{"config":{"lang":["ja"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u6700\u5f37\u306e\u546a\u8853\u5e2b\u3078\u306e\u9053 - Rust\u5b8c\u5168\u7fd2\u5f97\u6307\u5357\u66f8","text":""},{"location":"#_1","title":"\u3088\u3046\u3053\u305d\u3001\u672a\u6765\u306e\u6700\u5f37\u3078","text":"<p>\u3084\u3042\u3084\u3042\u3001\u305d\u3053\u306e\u541b\u3002Rust\u3092\u5b66\u3073\u305f\u3044\u3063\u3066\uff1f\u3044\u3044\u306d\u3001\u3068\u3066\u3082\u826f\u3044\u76ee\u3092\u3057\u3066\u3044\u308b\u3002</p> <p>\u4ffa\u306f\u4e94\u6761\u609f\u3002\u6771\u4eac\u546a\u8853\u9ad8\u7b49\u5c02\u9580\u5b66\u6821\u306e\u6559\u5e2b\u3092\u3084\u3063\u3066\u308b\u3002\u666e\u6bb5\u306f\u546a\u970a\u3092\u7953\u3063\u305f\u308a\u3001\u53ef\u611b\u3044\u6559\u3048\u5b50\u305f\u3061\u3092\u6700\u5f37\u306b\u80b2\u3066\u4e0a\u3052\u305f\u308a\u3057\u3066\u308b\u3093\u3060\u3051\u3069\u3001\u4eca\u65e5\u306f\u7279\u5225\u306b\u541b\u306bRust\u3068\u3044\u3046\u6700\u5f37\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3092\u4f1d\u6388\u3057\u3066\u3084\u308d\u3046\u3002</p> <p>\u4e94\u6761\u5148\u751f\u304b\u3089\u306e\u30e1\u30c3\u30bb\u30fc\u30b8</p> <p>\u3053\u306e\u672c\u306f\u5358\u306a\u308b\u5165\u9580\u66f8\u3058\u3083\u306a\u3044\u3002\u541b\u3092\u6700\u5f37\u306eRust\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u306b\u80b2\u3066\u4e0a\u3052\u308b\u305f\u3081\u306e\u6307\u5357\u66f8\u3060\u3002 \u546a\u8853\u5efb\u6226\u306e\u8853\u5f0f\u306e\u3088\u3046\u306b\u3001\u6bb5\u968e\u7684\u306b\u529b\u3092\u8eab\u306b\u3064\u3051\u3066\u3044\u3051\u3070\u3001\u6700\u5f8c\u306b\u306f\u4ffa\u306e\u3088\u3046\u306a\u7121\u4e0b\u9650\u306e\u529b\u3092\u624b\u306b\u5165\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002</p>"},{"location":"#rust","title":"\u306a\u305cRust\u306a\u306e\u304b\uff1f","text":"<p>\u4ed6\u306e\u8a00\u8a9e\uff1f\u3042\u3042\u3001\u305d\u308c\u3089\u306f\u78ba\u304b\u306b\u5b58\u5728\u3059\u308b\u306d\u3002\u3067\u3082\u541b\u3001\u683c\u304c\u9055\u3046\u3093\u3060\u3088\u3002</p> <p>Rust\u306f\uff1a</p> <ul> <li>\u30e1\u30e2\u30ea\u5b89\u5168\u6027 - \u30bb\u30b0\u30d5\u30a9\u30eb\u30c8\u306a\u3093\u3066\u96d1\u9b5a\u306f\u8fd1\u3065\u3051\u306a\u3044</li> <li>\u6240\u6709\u6a29\u30b7\u30b9\u30c6\u30e0 - \u546a\u529b\u306e\u6d41\u308c\u3092\u5b8c\u74a7\u306b\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb</li> <li>\u30bc\u30ed\u30b3\u30b9\u30c8\u62bd\u8c61\u5316 - \u9ad8\u7d1a\u8853\u5f0f\u306a\u306e\u306b\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306a\u3057</li> <li>\u4e26\u884c\u6027 - \u8907\u6570\u306e\u8853\u5f0f\u3092\u540c\u6642\u767a\u52d5\u53ef\u80fd</li> </ul> <p>\u3064\u307e\u308a\u3001\u6700\u5f37\u3063\u3066\u3053\u3068\u3060\u3002</p>"},{"location":"#_2","title":"\u3053\u306e\u672c\u306e\u69cb\u6210","text":"<p>\u4ffa\u306e\u6559\u3048\u65b9\u306f\u4ed6\u3068\u306f\u9055\u3046\u3002\u546a\u8853\u5efb\u6226\u306e\u8853\u5f0f\u7fd2\u5f97\u306e\u3088\u3046\u306b\u3001\u6bb5\u968e\u7684\u306b\u541b\u306e\u529b\u3092\u5f15\u304d\u4e0a\u3052\u3066\u3044\u304f\uff1a</p>"},{"location":"#1","title":"\u7b2c1\u7ae0\uff1a\u8853\u5f0f\u7fd2\u5f97\u7de8\uff08\u57fa\u672c\u6587\u6cd5\uff09","text":"<p>\u307e\u305a\u306f\u57fa\u672c\u7684\u306a\u8853\u5f0f\u304b\u3089\u3002\u5909\u6570\u3001\u95a2\u6570\u3001\u5236\u5fa1\u69cb\u6587...\u3053\u308c\u3089\u306f\u5168\u3066\u57fa\u790e\u4e2d\u306e\u57fa\u790e\u3060\u3002\u3067\u3082\u4fae\u308b\u306a\u3088\uff1f\u57fa\u790e\u304c\u3057\u3063\u304b\u308a\u3057\u3066\u306a\u3044\u3068\u3001\u5f8c\u3067\u75db\u3044\u76ee\u3092\u898b\u308b\u3002</p>"},{"location":"#2","title":"\u7b2c2\u7ae0\uff1a\u546a\u529b\u64cd\u4f5c\u7de8\uff08\u6240\u6709\u6a29\u30fb\u501f\u7528\uff09","text":"<p>Rust\u306e\u771f\u9aa8\u9802\u3001\u6240\u6709\u6a29\u30b7\u30b9\u30c6\u30e0\u306e\u7fd2\u5f97\u3060\u3002\u3053\u308c\u3092\u7406\u89e3\u3059\u308c\u3070\u3001\u541b\u306e\u546a\u529b...\u3058\u3083\u306a\u304b\u3063\u305f\u3001\u30b3\u30fc\u30c9\u306e\u6271\u3044\u304c\u683c\u6bb5\u306b\u4e0a\u304c\u308b\u3002</p>"},{"location":"#3","title":"\u7b2c3\u7ae0\uff1a\u53cd\u8ee2\u8853\u5f0f\u7de8\uff08\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\uff09","text":"<p>\u30a8\u30e9\u30fc\u3092\u9006\u624b\u306b\u53d6\u308b\u6280\u8853\u3002<code>Option</code>\u3068<code>Result</code>\u3092\u4f7f\u3044\u3053\u306a\u305b\u3070\u3001\u3069\u3093\u306a\u56f0\u96e3\u306a\u72b6\u6cc1\u3082\u4e57\u308a\u8d8a\u3048\u3089\u308c\u308b\u3002</p>"},{"location":"#4","title":"\u7b2c4\u7ae0\uff1a\u9818\u57df\u5c55\u958b\u7de8\uff08\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u30fb\u30c8\u30ec\u30a4\u30c8\uff09","text":"<p>\u3053\u3053\u304b\u3089\u304c\u672c\u756a\u3060\u3002\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3068\u30c8\u30ec\u30a4\u30c8\u3092\u4f7f\u3063\u305f\u9ad8\u5ea6\u306a\u62bd\u8c61\u5316\u3002\u9818\u57df\u5c55\u958b\u306e\u3088\u3046\u306b\u3001\u81ea\u5206\u3060\u3051\u306e\u7279\u5225\u306a\u7a7a\u9593\u3092\u4f5c\u308a\u4e0a\u3052\u308d\u3002</p>"},{"location":"#5","title":"\u7b2c5\u7ae0\uff1a\u7121\u4e0b\u9650\u546a\u8853\u7de8\uff08\u975e\u540c\u671f\u30fb\u30de\u30af\u30ed\uff09","text":"<p>\u6700\u7d42\u6bb5\u968e\u3002\u975e\u540c\u671f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3068\u30de\u30af\u30ed\u3092\u7fd2\u5f97\u3059\u308c\u3070\u3001\u541b\u3082\u4ffa\u306e\u3088\u3046\u306a\u7121\u4e0b\u9650\u306e\u529b\u3092\u624b\u306b\u5165\u308c\u308b\u3002</p>"},{"location":"#_3","title":"\u5b66\u7fd2\u306e\u5fc3\u69cb\u3048","text":"<p>\u4e94\u6761\u6d41\u5b66\u7fd2\u6cd5</p> <ol> <li>\u7406\u8ad6\u3088\u308a\u5b9f\u8df5 - \u982d\u3067\u8003\u3048\u308b\u3088\u308a\u624b\u3092\u52d5\u304b\u305b</li> <li>\u5931\u6557\u3092\u6050\u308c\u308b\u306a - \u30a8\u30e9\u30fc\u306f\u6210\u9577\u306e\u30c1\u30e3\u30f3\u30b9</li> <li>\u5e38\u306b\u6700\u5f37\u3092\u76ee\u6307\u305b - \u59a5\u5354\u306f\u7981\u7269</li> <li>\u697d\u3057\u3080\u3053\u3068 - \u3064\u307e\u3089\u306a\u3044\u52c9\u5f37\u306f\u8eab\u306b\u3064\u304b\u306a\u3044</li> </ol>"},{"location":"#_4","title":"\u6e96\u5099\u306f\u3044\u3044\u304b\uff1f","text":"<p>\u3055\u3042\u3001\u541b\u306e\u65c5\u304c\u59cb\u307e\u308b\u3002\u4ffa\u304c\u4fdd\u8a3c\u3057\u3066\u3084\u308b - \u3053\u306e\u672c\u3092\u6700\u5f8c\u307e\u3067\u8aad\u307f\u629c\u3051\u3070\u3001\u541b\u306f\u9593\u9055\u3044\u306a\u304f\u6700\u5f37\u306eRust\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u306b\u306a\u308c\u308b\u3002</p> <p>\u3067\u3082\u899a\u3048\u3066\u304a\u3051\u3002\u6700\u5f37\u3078\u306e\u9053\u306f\u6c7a\u3057\u3066\u697d\u3058\u3083\u306a\u3044\u3002\u9014\u4e2d\u3067\u632b\u3051\u305d\u3046\u306b\u306a\u308b\u3053\u3068\u3082\u3042\u308b\u3060\u308d\u3046\u3002\u305d\u3093\u306a\u6642\u306f\u4ffa\u306e\u8a00\u8449\u3092\u601d\u3044\u51fa\u305b\uff1a</p> <p>\u300c\u611b\u3068\u9858\u3044\u4ee5\u5916\u306f\u3044\u3089\u306a\u3044\u3088\u3001\u6700\u5f37\u3060\u304b\u3089\u300d</p> <p>\u305d\u308c\u3058\u3083\u3042\u3001\u7b2c1\u7ae0\u304b\u3089\u59cb\u3081\u3066\u3044\u3053\u3046\u304b\u3002</p> <p>\u300c\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\u300d</p>"},{"location":"chapter01/basics/","title":"\u7b2c1\u7ae0\uff1a\u8853\u5f0f\u7fd2\u5f97\u7de8 - \u57fa\u672c\u7684\u306a\u8853\u5f0f","text":""},{"location":"chapter01/basics/#rust","title":"Rust\u306e\u4e16\u754c\u3078\u3088\u3046\u3053\u305d","text":"<p>\u3088\u3057\u3001\u3053\u3053\u304b\u3089\u304c\u672c\u683c\u7684\u306a\u4fee\u884c\u306e\u59cb\u307e\u308a\u3060\u3002\u307e\u305a\u306fRust\u3068\u3044\u3046\u8a00\u8a9e\u306e\u57fa\u672c\u7684\u306a\u8853\u5f0f\u304b\u3089\u899a\u3048\u3066\u3044\u3053\u3046\u3002</p> <p>\u4ffa\u305f\u3061\u546a\u8853\u5e2b\u304c\u6700\u521d\u306b\u7fd2\u5f97\u3059\u308b\u306e\u306f\u57fa\u672c\u7684\u306a\u546a\u529b\u64cd\u4f5c\u3060\u308d\u3046\uff1fRust\u3082\u540c\u3058\u3060\u3002\u57fa\u790e\u3092\u3057\u3063\u304b\u308a\u56fa\u3081\u306a\u3044\u3068\u3001\u5f8c\u3067\u9ad8\u7b49\u8853\u5f0f\u3092\u7fd2\u5f97\u3059\u308b\u3068\u304d\u306b\u5fc5\u305a\u8e93\u304f\u3002</p>"},{"location":"chapter01/basics/#rust-","title":"Rust\u74b0\u5883\u306e\u69cb\u7bc9 - \u8853\u5f0f\u767a\u52d5\u306e\u6e96\u5099","text":"<p>\u307e\u305a\u306f\u74b0\u5883\u69cb\u7bc9\u304b\u3089\u3002\u3053\u308c\u306f\u546a\u8853\u5e2b\u304c\u8853\u5f0f\u3092\u767a\u52d5\u3059\u308b\u524d\u306e\u6e96\u5099\u306e\u3088\u3046\u306a\u3082\u306e\u3060\u3002</p>"},{"location":"chapter01/basics/#rustup","title":"Rustup\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":"<pre><code>curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n</code></pre> <p>\u4e94\u6761\u5148\u751f\u306e\u30a2\u30c9\u30d0\u30a4\u30b9</p> <p>\u3053\u308c\u3067Rust\u306e\u30c4\u30fc\u30eb\u30c1\u30a7\u30fc\u30f3\u4e00\u5f0f\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u308b\u3002<code>rustc</code>\uff08\u30b3\u30f3\u30d1\u30a4\u30e9\uff09\u3001<code>cargo</code>\uff08\u30d1\u30c3\u30b1\u30fc\u30b8\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\uff09\u3001<code>rustup</code>\uff08\u30c4\u30fc\u30eb\u7ba1\u7406\uff09\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u3002</p> <p>\u4ffa\u306e\u7121\u4e0b\u9650\u8853\u5f0f\u307f\u305f\u3044\u306b\u3001\u4e00\u5ea6\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3059\u308c\u3070\u5f8c\u306f\u697d\u52dd\u3060\u3002</p>"},{"location":"chapter01/basics/#-hello","title":"\u6700\u521d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0 - \u300cHello, \u6700\u5f37!\u300d","text":"<p>\u65b0\u3057\u3044\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\uff1a</p> <pre><code>cargo new hello_saikyou\ncd hello_saikyou\n</code></pre> <p><code>src/main.rs</code>\u3092\u958b\u3044\u3066\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304f\uff1a</p> <pre><code>fn main() {\n    println!(\\\"Hello, \u6700\u5f37!\\\");\n    println!(\\\"\u4ffa\u306e\u540d\u524d\u306f\u4e94\u6761\u609f\u3002\u3088\u308d\u3057\u304f\u3002\\\");\n}\n</code></pre> <p>\u5b9f\u884c\u3057\u3066\u307f\u3088\u3046\uff1a</p> <pre><code>cargo run\n</code></pre> <p>\u8853\u5f0f\u306e\u30b3\u30c4</p> <p><code>println!</code>\u306f\u6a19\u6e96\u51fa\u529b\u306b\u6587\u5b57\u5217\u3092\u8868\u793a\u3059\u308b\u30de\u30af\u30ed\u3060\u3002\u30de\u30af\u30ed\u306f\u540d\u524d\u306e\u5f8c\u306b<code>!</code>\u304c\u3064\u304f\u3002 \u3053\u308c\u306f\u4ffa\u306e\u300c\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\u300d\u307f\u305f\u3044\u306a\u3082\u306e\u3067\u3001\u6c7a\u307e\u3063\u305f\u5f62\u5f0f\u3067\u5f37\u529b\u306a\u52b9\u679c\u3092\u767a\u63ee\u3059\u308b\u3002</p>"},{"location":"chapter01/basics/#-","title":"\u30b3\u30e1\u30f3\u30c8 - \u8853\u5f0f\u306e\u89e3\u8aac","text":"<p>\u30b3\u30fc\u30c9\u306b\u6ce8\u91c8\u3092\u3064\u3051\u308b\u306e\u306f\u91cd\u8981\u3060\u3002\u4ffa\u3060\u3063\u3066\u6559\u3048\u5b50\u306b\u8853\u5f0f\u3092\u6559\u3048\u308b\u3068\u304d\u306f\u4e01\u5be7\u306b\u8aac\u660e\u3059\u308b\u304b\u3089\u306d\u3002</p> <pre><code>// \u3053\u308c\u306f\u4e00\u884c\u30b3\u30e1\u30f3\u30c8 - \u8853\u5f0f\u306e\u7c21\u5358\u306a\u8aac\u660e\n\n/*\n * \u3053\u308c\u306f\u8907\u6570\u884c\u30b3\u30e1\u30f3\u30c8\n * \u8907\u96d1\u306a\u8853\u5f0f\u306e\u8a73\u7d30\u306a\u89e3\u8aac\u306b\u4f7f\u3046\n */\n\n/// \u3053\u308c\u306f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u30b3\u30e1\u30f3\u30c8\n/// \u95a2\u6570\u3084\u69cb\u9020\u4f53\u306e\u8aac\u660e\u306b\u4f7f\u3046\uff08rustdoc\u3067\u81ea\u52d5\u751f\u6210\u3055\u308c\u308b\uff09\nfn saikyou_technique() {\n    // \u3053\u3053\u306b\u6700\u5f37\u306e\u8853\u5f0f\u3092\u66f8\u304f\n}\n</code></pre>"},{"location":"chapter01/basics/#-_1","title":"\u6587\u3068\u5f0f - \u8853\u5f0f\u306e\u69cb\u9020","text":"<p>Rust\u306b\u306f**\u6587\uff08Statement\uff09\u3068\u5f0f\uff08Expression\uff09**\u304c\u3042\u308b\u3002\u3053\u308c\u3092\u7406\u89e3\u3059\u308b\u306e\u306f\u91cd\u8981\u3060\u3002</p> <pre><code>fn main() {\n    // \u6587\uff08Statement\uff09- \u5024\u3092\u8fd4\u3055\u306a\u3044\n    let x = 5;  // \u5909\u6570\u5ba3\u8a00\u6587\n\n    // \u5f0f\uff08Expression\uff09- \u5024\u3092\u8fd4\u3059\n    let y = {\n        let inner = 3;\n        inner + 1  // \u30bb\u30df\u30b3\u30ed\u30f3\u304c\u306a\u3044\uff01\u3053\u308c\u304c\u5f0f\u306e\u5024\u306b\u306a\u308b\n    }; // y\u306f4\u306b\u306a\u308b\n\n    println!(\\\"x: {}, y: {}\\\", x, y);\n}\n</code></pre> <p>\u5f0f\u3068\u6587\u306e\u9055\u3044</p> <ul> <li>\u6587\uff1a\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\u304c\u5024\u3092\u8fd4\u3055\u306a\u3044\uff08\u30bb\u30df\u30b3\u30ed\u30f3\u3067\u7d42\u308f\u308b\uff09</li> <li>\u5f0f\uff1a\u5024\u3092\u8a55\u4fa1\u3057\u3066\u8fd4\u3059\uff08\u30bb\u30df\u30b3\u30ed\u30f3\u304c\u306a\u3044\uff09</li> </ul> <p>\u4ffa\u306e\u8853\u5f0f\u3067\u4f8b\u3048\u308b\u3068\u3001\u300c\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\u300d\u306e\u767a\u52d5\u306f\u6587\u3067\u3001\u305d\u306e\u5a01\u529b\u306e\u8a08\u7b97\u306f\u5f0f\u3060\u3002</p>"},{"location":"chapter01/basics/#-_2","title":"\u57fa\u672c\u7684\u306a\u30c7\u30fc\u30bf\u578b - \u546a\u529b\u306e\u7a2e\u985e","text":""},{"location":"chapter01/basics/#_1","title":"\u6574\u6570\u578b","text":"<pre><code>fn main() {\n    let power_level: i32 = 999999;  // 32\u30d3\u30c3\u30c8\u7b26\u53f7\u4ed8\u304d\u6574\u6570\n    let curse_count: u64 = 1000000000;  // 64\u30d3\u30c3\u30c8\u7b26\u53f7\u306a\u3057\u6574\u6570\n\n    // \u578b\u63a8\u8ad6\u3082\u4f7f\u3048\u308b\n    let small_power = 100;  // \u30c7\u30d5\u30a9\u30eb\u30c8\u306fi32\n\n    println!(\\\"\u4ffa\u306e\u546a\u529b\u30ec\u30d9\u30eb: {}\\\", power_level);\n}\n</code></pre>"},{"location":"chapter01/basics/#_2","title":"\u6d6e\u52d5\u5c0f\u6570\u70b9\u578b","text":"<pre><code>fn main() {\n    let precision: f64 = 99.999;  // 64\u30d3\u30c3\u30c8\u6d6e\u52d5\u5c0f\u6570\u70b9\n    let speed: f32 = 299792458.0;  // 32\u30d3\u30c3\u30c8\u6d6e\u52d5\u5c0f\u6570\u70b9\n\n    println!(\\\"\u8853\u5f0f\u306e\u7cbe\u5ea6: {}%\\\", precision);\n}\n</code></pre>"},{"location":"chapter01/basics/#_3","title":"\u8ad6\u7406\u578b","text":"<pre><code>fn main() {\n    let is_saikyou = true;\n    let has_limits = false;\n\n    if is_saikyou &amp;&amp; !has_limits {\n        println!(\\\"\u4ffa\u306f\u6700\u5f37\u3060\\\");\n    }\n}\n</code></pre>"},{"location":"chapter01/basics/#_4","title":"\u6587\u5b57\u578b","text":"<pre><code>fn main() {\n    let technique = '\u84bc';  // Unicode\u30b9\u30ab\u30e9\u30fc\u5024\n    let symbol = '\u221e';      // \u7121\u4e0b\u9650\u306e\u30b7\u30f3\u30dc\u30eb\n\n    println!(\\\"\u8853\u5f0f: {}\\\", technique);\n}\n</code></pre>"},{"location":"chapter01/basics/#_5","title":"\u6587\u5b57\u5217\u578b","text":"<pre><code>fn main() {\n    // \u6587\u5b57\u5217\u30b9\u30e9\u30a4\u30b9\uff08&amp;str\uff09- \u4e0d\u5909\n    let greeting = \\\"\u3084\u3042\u3084\u3042\\\";\n\n    // String\u578b - \u53ef\u5909\u9577\u3001\u30d2\u30fc\u30d7\u306b\u4fdd\u5b58\n    let mut technique_name = String::from(\\\"\u8853\u5f0f\u9806\u8ee2\\\");\n    technique_name.push_str(\\\"\u300e\u84bc\u300f\\\");\n\n    println!(\\\"{}: {}\\\", greeting, technique_name);\n}\n</code></pre>"},{"location":"chapter01/basics/#-_3","title":"\u57fa\u672c\u7684\u306a\u6f14\u7b97 - \u546a\u529b\u306e\u8a08\u7b97","text":"<pre><code>fn main() {\n    // \u7b97\u8853\u6f14\u7b97\n    let base_power = 1000;\n    let multiplier = 10;\n\n    let total_power = base_power + multiplier * 100;  // 2000\n    let remaining = total_power % 300;                // 200\n\n    // \u8ad6\u7406\u6f14\u7b97\n    let is_strongest = true;\n    let has_limitless = true;\n    let is_gojo = is_strongest &amp;&amp; has_limitless;\n\n    // \u6bd4\u8f03\u6f14\u7b97\n    let enemy_power = 500;\n    let can_defeat = total_power &gt; enemy_power;\n\n    println!(\\\"\u546a\u529b: {}, \u6575\u3092\u5012\u305b\u308b: {}\\\", total_power, can_defeat);\n}\n</code></pre>"},{"location":"chapter01/basics/#-_4","title":"\u578b\u5909\u63db - \u546a\u529b\u306e\u5909\u63db\u8853","text":"<pre><code>fn main() {\n    let power_i32: i32 = 1000;\n    let power_f64 = power_i32 as f64;  // \u660e\u793a\u7684\u306a\u578b\u5909\u63db\n\n    // \u6587\u5b57\u5217\u304b\u3089\u6570\u5024\u3078\u306e\u5909\u63db\n    let power_str = \\\"9999\\\";\n    let power_from_str: i32 = power_str.parse()\n        .expect(\\\"\u6570\u5024\u5909\u63db\u306b\u5931\u6557\u3057\u307e\u3057\u305f\\\");\n\n    println!(\\\"\u5909\u63db\u3055\u308c\u305f\u546a\u529b: {}\\\", power_from_str);\n}\n</code></pre> <p>\u4e94\u6761\u6d41\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0</p> <p>\u578b\u5909\u63db\u306f\u614e\u91cd\u306b\u884c\u3048\u3002\u9593\u9055\u3063\u305f\u5909\u63db\u306f\u8853\u5f0f\u306e\u66b4\u8d70\u306b\u3064\u306a\u304c\u308b\u3002 <code>as</code>\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u4f7f\u3063\u305f\u5909\u63db\u306f\u60c5\u5831\u304c\u5931\u308f\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u304b\u3089\u6ce8\u610f\u3057\u308d\u3002</p>"},{"location":"chapter01/basics/#-_5","title":"\u5b9a\u6570 - \u4e0d\u5909\u306e\u771f\u7406","text":"<pre><code>// \u30b0\u30ed\u30fc\u30d0\u30eb\u5b9a\u6570\uff08\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u6c7a\u5b9a\uff09\nconst INFINITY_POWER: u32 = 999_999_999;\nconst TECHNIQUE_NAME: &amp;str = \\\"\u7121\u4e0b\u9650\u546a\u8853\\\";\n\nfn main() {\n    println!(\\\"\u6700\u5927\u546a\u529b: {}\\\", INFINITY_POWER);\n    println!(\\\"\u5965\u7fa9: {}\\\", TECHNIQUE_NAME);\n}\n</code></pre>"},{"location":"chapter01/basics/#-_6","title":"\u307e\u3068\u3081 - \u57fa\u790e\u8853\u5f0f\u306e\u5b8c\u6210","text":"<p>\u3053\u3053\u307e\u3067\u3067\u57fa\u672c\u7684\u306a\u8853\u5f0f\u306e\u7fd2\u5f97\u306f\u5b8c\u4e86\u3060\u3002\u3069\u3046\u3060\u3063\u305f\uff1f\u601d\u3063\u305f\u3088\u308a\u7c21\u5358\u3060\u3063\u305f\u3060\u308d\u3046\uff1f</p> <p>\u899a\u3048\u3066\u304a\u304f\u3079\u304d\u91cd\u8981\u306a\u30dd\u30a4\u30f3\u30c8\uff1a</p> <ol> <li>\u578b\u30b7\u30b9\u30c6\u30e0 - Rust\u306f\u578b\u306b\u53b3\u683c\u3002\u3067\u3082\u305d\u308c\u304c\u5b89\u5168\u6027\u3092\u4fdd\u8a3c\u3057\u3066\u304f\u308c\u308b</li> <li>\u5f0f\u3068\u6587 - \u30bb\u30df\u30b3\u30ed\u30f3\u306e\u6709\u7121\u3067\u610f\u5473\u304c\u5909\u308f\u308b</li> <li>\u578b\u63a8\u8ad6 - \u660e\u793a\u3057\u306a\u304f\u3066\u3082\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u63a8\u8ad6\u3057\u3066\u304f\u308c\u308b</li> <li>\u4e0d\u5909\u6027 - \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u5024\u306f\u4e0d\u5909\uff08<code>mut</code>\u3067\u53ef\u5909\u306b\u3067\u304d\u308b\uff09</li> </ol> <p>\u6b21\u306f\u5909\u6570\u3068\u53ef\u5909\u6027\u306b\u3064\u3044\u3066\u5b66\u3093\u3067\u3044\u3053\u3046\u3002\u4ffa\u306e\u8853\u5f0f\u3082\u305d\u3046\u3060\u3051\u3069\u3001\u6642\u306b\u306f\u5909\u5316\u304c\u5fc5\u8981\u306a\u3093\u3060\u3002</p> <p>\u300c\u57fa\u790e\u3092\u3057\u3063\u304b\u308a\u56fa\u3081\u308b\u3053\u3068\u304c\u3001\u6700\u5f37\u3078\u306e\u7b2c\u4e00\u6b69\u3060\u300d</p>"},{"location":"chapter01/control/","title":"\u5236\u5fa1\u69cb\u6587 - \u8853\u5f0f\u306e\u6d41\u308c\u3092\u64cd\u308b","text":""},{"location":"chapter01/control/#-_1","title":"\u6761\u4ef6\u5206\u5c90 - \u72b6\u6cc1\u306b\u5fdc\u3058\u305f\u8853\u5f0f\u9078\u629e","text":"<p>\u546a\u8853\u5e2b\u306f\u72b6\u6cc1\u306b\u5fdc\u3058\u3066\u6700\u9069\u306a\u8853\u5f0f\u3092\u9078\u3076\u5fc5\u8981\u304c\u3042\u308b\u3002Rust\u3067\u3082\u540c\u3058\u3060\u3002\u6761\u4ef6\u306b\u3088\u3063\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u6d41\u308c\u3092\u5236\u5fa1\u3067\u304d\u308b\u3002</p>"},{"location":"chapter01/control/#if-","title":"if\u5f0f - \u57fa\u672c\u7684\u306a\u5224\u65ad","text":"<pre><code>fn main() {\n    let enemy_power = 1500;\n    let my_power = 2000;\n\n    if my_power &gt; enemy_power {\n        println!(\\\"\u697d\u52dd\u3060\u306d\\\");\n    } else if my_power == enemy_power {\n        println!(\\\"\u4e92\u89d2\u304b...\u9762\u767d\u3044\\\");\n    } else {\n        println!(\\\"\u3061\u3087\u3063\u3068\u672c\u6c17\u51fa\u3059\u304b\u306a\\\");\n    }\n}\n</code></pre> <p>\u4e94\u6761\u5148\u751f\u306e\u30dd\u30a4\u30f3\u30c8</p> <p>Rust\u306e<code>if</code>\u306f\u5f0f\u3060\u304b\u3089\u5024\u3092\u8fd4\u305b\u308b\u3002\u3053\u308c\u306f\u4ffa\u306e\u8853\u5f0f\u9078\u629e\u307f\u305f\u3044\u306b\u3001\u6761\u4ef6\u306b\u3088\u3063\u3066\u7d50\u679c\u304c\u6c7a\u307e\u308b\u3093\u3060\u3002</p>"},{"location":"chapter01/control/#if","title":"if\u5f0f\u3067\u5024\u3092\u8fd4\u3059","text":"<pre><code>fn main() {\n    let enemy_type = \\\"\u7279\u7d1a\u546a\u970a\\\";\n\n    let technique = if enemy_type == \\\"\u7279\u7d1a\u546a\u970a\\\" {\n        \\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\"\n    } else if enemy_type == \\\"\u507d\u590f\u6cb9\\\" {\n        \\\"\u8853\u5f0f\u53cd\u8ee2\u300e\u8d6b\u300f\\\"\n    } else {\n        \\\"\u57fa\u672c\u8853\u5f0f\\\"\n    };\n\n    println!(\\\"\u4f7f\u7528\u3059\u308b\u6280: {}\\\", technique);\n\n    // \u6570\u5024\u3067\u306e\u4f8b\n    let power_level = 1000;\n    let damage = if power_level &gt; 500 { power_level * 2 } else { power_level };\n\n    println!(\\\"\u30c0\u30e1\u30fc\u30b8: {}\\\", damage);\n}\n</code></pre>"},{"location":"chapter01/control/#match-","title":"match\u5f0f - \u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0","text":"<p>\u3053\u308c\u304c\u672c\u5f53\u306e\u529b\u3060\u3002<code>match</code>\u5f0f\u306f\u4ffa\u306e\u9818\u57df\u5c55\u958b\u307f\u305f\u3044\u306b\u3001\u3042\u3089\u3086\u308b\u53ef\u80fd\u6027\u3092\u5b8c\u74a7\u306b\u30ab\u30d0\u30fc\u3067\u304d\u308b\u3002</p>"},{"location":"chapter01/control/#match","title":"\u57fa\u672c\u7684\u306amatch","text":"<pre><code>fn main() {\n    let technique_type = \\\"\u84bc\\\";\n\n    match technique_type {\n        \\\"\u84bc\\\" =&gt; println!(\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f - \u5f15\u529b\u64cd\u4f5c\\\"),\n        \\\"\u8d6b\\\" =&gt; println!(\\\"\u8853\u5f0f\u53cd\u8ee2\u300e\u8d6b\u300f - \u65a5\u529b\u64cd\u4f5c\\\"),\n        \\\"\u8308\\\" =&gt; println!(\\\"\u865a\u5f0f\u300e\u8308\u300f - \u4eee\u60f3\u8cea\u91cf\\\"),\n        \\\"\u7d2b\\\" =&gt; println!(\\\"\u7121\u4e0b\u9650\u546a\u8853\u300e\u7d2b\u300f - \u6700\u5f37\\\"),\n        _ =&gt; println!(\\\"\u672a\u77e5\u306e\u8853\u5f0f\\\"),  // \u305d\u306e\u4ed6\u5168\u3066\n    }\n}\n</code></pre>"},{"location":"chapter01/control/#match_1","title":"\u5024\u3092\u8fd4\u3059match","text":"<pre><code>fn calculate_damage(technique: &amp;str) -&gt; i32 {\n    match technique {\n        \\\"\u84bc\\\" =&gt; 1000,\n        \\\"\u8d6b\\\" =&gt; 1500,\n        \\\"\u8308\\\" =&gt; 3000,\n        \\\"\u7d2b\\\" =&gt; 9999,\n        _ =&gt; 100,\n    }\n}\n\nfn main() {\n    let techniques = [\\\"\u84bc\\\", \\\"\u8d6b\\\", \\\"\u8308\\\", \\\"\u7d2b\\\"];\n\n    for tech in techniques.iter() {\n        let damage = calculate_damage(tech);\n        println!(\\\"{}: \u30c0\u30e1\u30fc\u30b8 {}\\\", tech, damage);\n    }\n}\n</code></pre>"},{"location":"chapter01/control/#_1","title":"\u8907\u6570\u306e\u30d1\u30bf\u30fc\u30f3","text":"<pre><code>fn main() {\n    let enemy_grade = 2;\n\n    let strategy = match enemy_grade {\n        1 | 2 =&gt; \\\"\u57fa\u672c\u8853\u5f0f\u3067\u5341\u5206\\\",\n        3 =&gt; \\\"\u5c11\u3057\u672c\u6c17\u3092\u51fa\u305d\u3046\\\",\n        4 =&gt; \\\"\u7279\u7d1a\u304b...\u9762\u767d\u3044\\\",\n        0 =&gt; \\\"\u7279\u7d1a\u306e\u4e2d\u3067\u3082\u683c\u304c\u9055\u3046\\\",\n        _ =&gt; \\\"\u672a\u77e5\u306e\u7b49\u7d1a\\\",\n    };\n\n    println!(\\\"\u6226\u7565: {}\\\", strategy);\n}\n</code></pre>"},{"location":"chapter01/control/#_2","title":"\u7bc4\u56f2\u3067\u306e\u30de\u30c3\u30c1","text":"<pre><code>fn main() {\n    let power_level = 1500;\n\n    let comment = match power_level {\n        0..=500 =&gt; \\\"\u96d1\u9b5a\u3060\u306d\\\",\n        501..=1000 =&gt; \\\"\u307e\u3042\u307e\u3042\u304b\u306a\\\",\n        1001..=2000 =&gt; \\\"\u305d\u3053\u305d\u3053\u3084\u308b\u3058\u3083\u306a\u3044\\\",\n        2001..=5000 =&gt; \\\"\u304a\u3001\u306a\u304b\u306a\u304b\\\",\n        5001.. =&gt; \\\"\u307b\u307b\u3046\u3001\u9762\u767d\u3044\\\",\n    };\n\n    println!(\\\"\u8a55\u4fa1: {}\\\", comment);\n}\n</code></pre>"},{"location":"chapter01/control/#-_2","title":"\u30eb\u30fc\u30d7 - \u8853\u5f0f\u306e\u53cd\u5fa9","text":""},{"location":"chapter01/control/#loop-","title":"loop - \u7121\u9650\u30eb\u30fc\u30d7","text":"<pre><code>fn main() {\n    let mut curse_count = 5;\n\n    loop {\n        if curse_count == 0 {\n            println!(\\\"\u5168\u3066\u306e\u546a\u970a\u3092\u7953\u3063\u305f\uff01\\\");\n            break;  // \u30eb\u30fc\u30d7\u304b\u3089\u629c\u3051\u308b\n        }\n\n        println!(\\\"\u546a\u970a\u3092\u7953\u3063\u305f\u3002\u6b8b\u308a: {}\\\", curse_count);\n        curse_count -= 1;\n    }\n}\n</code></pre>"},{"location":"chapter01/control/#loop","title":"loop\u3067\u5024\u3092\u8fd4\u3059","text":"<pre><code>fn main() {\n    let mut counter = 0;\n\n    let result = loop {\n        counter += 1;\n\n        if counter == 10 {\n            break counter * 2;  // \u5024\u3092\u8fd4\u3057\u3066\u30eb\u30fc\u30d7\u7d42\u4e86\n        }\n    };\n\n    println!(\\\"\u7d50\u679c: {}\\\", result);  // 20\n}\n</code></pre>"},{"location":"chapter01/control/#while-","title":"while - \u6761\u4ef6\u4ed8\u304d\u30eb\u30fc\u30d7","text":"<pre><code>fn main() {\n    let mut enemy_hp = 1000;\n    let damage = 150;\n\n    while enemy_hp &gt; 0 {\n        enemy_hp -= damage;\n        println!(\\\"\u653b\u6483\uff01\u6b8b\u308aHP: {}\\\", enemy_hp.max(0));\n    }\n\n    println!(\\\"\u6575\u3092\u5012\u3057\u305f\uff01\\\");\n}\n</code></pre>"},{"location":"chapter01/control/#for-","title":"for - \u30a4\u30c6\u30ec\u30fc\u30bf\u30eb\u30fc\u30d7","text":"<pre><code>fn main() {\n    // \u7bc4\u56f2\u3067\u306e\u30eb\u30fc\u30d7\n    println!(\\\"\u30ab\u30a6\u30f3\u30c8\u30c0\u30a6\u30f3:\\\");\n    for i in (1..=5).rev() {\n        println!(\\\"{}\\\", i);\n    }\n    println!(\\\"\u8853\u5f0f\u767a\u52d5\uff01\\\");\n\n    // \u914d\u5217\u306e\u30eb\u30fc\u30d7\n    let techniques = [\\\"\u84bc\\\", \\\"\u8d6b\\\", \\\"\u8308\\\"];\n    for (index, technique) in techniques.iter().enumerate() {\n        println!(\\\"\u6280{}: {}\\\", index + 1, technique);\n    }\n\n    // \u30d9\u30af\u30bf\u30fc\u306e\u30eb\u30fc\u30d7\n    let mut enemies = vec![\\\"\u546a\u970aA\\\", \\\"\u546a\u970aB\\\", \\\"\u546a\u970aC\\\"];\n    for enemy in enemies.iter_mut() {\n        *enemy = \\\"\u6483\u7834\u6e08\u307f\\\";\n    }\n    println!(\\\"\u6575\u306e\u72b6\u614b: {:?}\\\", enemies);\n}\n</code></pre>"},{"location":"chapter01/control/#-break-continue","title":"\u30eb\u30fc\u30d7\u5236\u5fa1 - break \u3068 continue","text":"<pre><code>fn main() {\n    println!(\\\"=== break \u306e\u4f8b ===\\\");\n    for i in 1..10 {\n        if i == 5 {\n            println!(\\\"{}\u3067\u4e2d\u65ad\\\", i);\n            break;\n        }\n        println!(\\\"\u6570\u5024: {}\\\", i);\n    }\n\n    println!(\\\"\\\\n=== continue \u306e\u4f8b ===\\\");\n    for i in 1..=10 {\n        if i % 2 == 0 {\n            continue;  // \u5076\u6570\u306f\u30b9\u30ad\u30c3\u30d7\n        }\n        println!(\\\"\u5947\u6570: {}\\\", i);\n    }\n}\n</code></pre>"},{"location":"chapter01/control/#_3","title":"\u30e9\u30d9\u30eb\u4ed8\u304d\u30eb\u30fc\u30d7","text":"<pre><code>fn main() {\n    'outer: for x in 1..=3 {\n        'inner: for y in 1..=3 {\n            if x == 2 &amp;&amp; y == 2 {\n                println!(\\\"({}, {}) \u3067\u5916\u5074\u30eb\u30fc\u30d7\u3092\u629c\u3051\u308b\\\", x, y);\n                break 'outer;  // \u5916\u5074\u306e\u30eb\u30fc\u30d7\u3092\u629c\u3051\u308b\n            }\n            println!(\\\"({}, {})\\\", x, y);\n        }\n    }\n    println!(\\\"\u5b8c\u4e86\\\");\n}\n</code></pre>"},{"location":"chapter01/control/#-_3","title":"\u5b9f\u8df5\u4f8b - \u546a\u970a\u8a0e\u4f10\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u30fc","text":"<pre><code>fn main() {\n    let mut enemies = vec![\n        (\\\"1\u7d1a\u546a\u970a\\\", 500),\n        (\\\"\u7279\u7d1a\u546a\u970a\\\", 1500),\n        (\\\"\u7279\u7d1a\u546a\u970a(\u507d\u590f\u6cb9)\\\", 3000),\n    ];\n\n    let techniques = [\n        (\\\"\u84bc\\\", 600),\n        (\\\"\u8d6b\\\", 800),\n        (\\\"\u8308\\\", 2000),\n        (\\\"\u7d2b\\\", 9999),\n    ];\n\n    for (enemy_name, enemy_hp) in enemies.iter() {\n        println!(\\\"\\\\n{} (HP: {}) \u304c\u73fe\u308c\u305f\uff01\\\", enemy_name, enemy_hp);\n\n        let selected_technique = match *enemy_hp {\n            0..=500 =&gt; &amp;techniques[0],      // \u84bc\n            501..=1000 =&gt; &amp;techniques[1],   // \u8d6b\n            1001..=2000 =&gt; &amp;techniques[2],  // \u8308\n            _ =&gt; &amp;techniques[3],            // \u7d2b\n        };\n\n        let (tech_name, damage) = selected_technique;\n\n        println!(\\\"\u300e{}\u300f\u3092\u4f7f\u7528\uff01\\\", tech_name);\n\n        if damage &gt;= enemy_hp {\n            println!(\\\"{}\u30c0\u30e1\u30fc\u30b8\uff01{} \u3092\u6483\u7834\uff01\\\", damage, enemy_name);\n        } else {\n            println!(\\\"{}\u30c0\u30e1\u30fc\u30b8\u3060\u304c\u3001\u307e\u3060\u751f\u304d\u3066\u3044\u308b...\\\", damage);\n        }\n    }\n\n    println!(\\\"\\\\n\u5168\u3066\u306e\u6575\u3092\u5012\u3057\u305f\uff01\u6700\u5f37\u3060\u304b\u3089\u5f53\u7136\u3060\u306d\u3002\\\");\n}\n</code></pre>"},{"location":"chapter01/control/#_4","title":"\u7df4\u7fd2\u554f\u984c","text":"### \u554f\u984c1: \u546a\u529b\u5224\u5b9a\u30b7\u30b9\u30c6\u30e0  \u546a\u529b\u5024\u306b\u5fdc\u3058\u3066\u7b49\u7d1a\u3092\u5224\u5b9a\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092`match`\u5f0f\u3067\u4f5c\u6210\u305b\u3088\u3002  - 0-100: 4\u7d1a - 101-500: 3\u7d1a - 501-1000: 2\u7d1a - 1001-2000: 1\u7d1a - 2001\u4ee5\u4e0a: \u7279\u7d1a   \u89e3\u7b54\u3092\u898b\u308b <pre><code>fn judge_grade(power: i32) -&gt; &amp;'static str {\n    match power {\n        0..=100 =&gt; \\\"4\u7d1a\\\",\n        101..=500 =&gt; \\\"3\u7d1a\\\",\n        501..=1000 =&gt; \\\"2\u7d1a\\\",\n        1001..=2000 =&gt; \\\"1\u7d1a\\\",\n        2001.. =&gt; \\\"\u7279\u7d1a\\\",\n    }\n}\n\nfn main() {\n    let power_levels = [50, 300, 800, 1500, 3000];\n\n    for power in power_levels.iter() {\n        let grade = judge_grade(*power);\n        println!(\\\"\u546a\u529b{}: {} \u546a\u8853\u5e2b\\\", power, grade);\n    }\n}\n</code></pre>   ### \u554f\u984c2: FizzBuzz\u546a\u8853\u7248  1\u304b\u308930\u307e\u3067\u6570\u3048\u3066\u30013\u306e\u500d\u6570\u3067\u300c\u546a\", 5\u306e\u500d\u6570\u3067\u300c\u8853\", \u4e21\u65b9\u306e\u500d\u6570\u3067\u300c\u546a\u8853\"\u3068\u8868\u793a\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u305b\u3088\u3002   \u89e3\u7b54\u3092\u898b\u308b <pre><code>fn main() {\n    for i in 1..=30 {\n        match (i % 3, i % 5) {\n            (0, 0) =&gt; println!(\\\"\u546a\u8853\\\"),\n            (0, _) =&gt; println!(\\\"\u546a\\\"),\n            (_, 0) =&gt; println!(\\\"\u8853\\\"),\n            _ =&gt; println!(\\\"{}\\\", i),\n        }\n    }\n}\n</code></pre>"},{"location":"chapter01/control/#_5","title":"\u307e\u3068\u3081","text":"<p>\u5236\u5fa1\u69cb\u6587\u306e\u7fd2\u5f97\u306f\u5b8c\u4e86\u3060\u3002\u91cd\u8981\u306a\u30dd\u30a4\u30f3\u30c8\uff1a</p> <ol> <li>if\u5f0f - \u6761\u4ef6\u306b\u5fdc\u3058\u305f\u5206\u5c90\u3001\u5024\u3082\u8fd4\u305b\u308b</li> <li>match\u5f0f - \u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0\u3001\u5168\u30d1\u30bf\u30fc\u30f3\u7db2\u7f85\u5fc5\u9808</li> <li>loop - \u7121\u9650\u30eb\u30fc\u30d7\u3001\u5024\u3092\u8fd4\u305b\u308b</li> <li>while - \u6761\u4ef6\u4ed8\u304d\u30eb\u30fc\u30d7</li> <li>for - \u30a4\u30c6\u30ec\u30fc\u30bf\u30eb\u30fc\u30d7\u3001\u6700\u3082\u4f7f\u7528\u983b\u5ea6\u304c\u9ad8\u3044</li> <li>break/continue - \u30eb\u30fc\u30d7\u5236\u5fa1</li> </ol> <p>\u6b21\u306f\u95a2\u6570\u306b\u3064\u3044\u3066\u5b66\u307c\u3046\u3002\u95a2\u6570\u306f\u8853\u5f0f\u3092\u30e2\u30b8\u30e5\u30fc\u30eb\u5316\u3059\u308b\u91cd\u8981\u306a\u6982\u5ff5\u3060\u3002</p> <p>\u300c\u5236\u5fa1\u306e\u6d41\u308c\u3092\u6975\u3081\u308c\u3070\u3001\u3069\u3093\u306a\u8907\u96d1\u306a\u8853\u5f0f\u3082\u7d44\u307f\u7acb\u3066\u3089\u308c\u308b\u300d</p>"},{"location":"chapter01/exercises/","title":"\u7b2c1\u7ae0 \u7df4\u7fd2\u554f\u984c - \u57fa\u672c\u8853\u5f0f\u306e\u8a66\u7df4","text":""},{"location":"chapter01/exercises/#_1","title":"\u8853\u5f0f\u7fd2\u5f97\u306e\u78ba\u8a8d","text":"<p>\u3053\u3053\u307e\u3067\u306e\u5b66\u7fd2\u3067\u57fa\u672c\u7684\u306a\u8853\u5f0f\u306f\u8eab\u306b\u3064\u3044\u305f\u306f\u305a\u3060\u3002\u3067\u3082\u672c\u5f53\u306b\u30de\u30b9\u30bf\u30fc\u3067\u304d\u3066\u3044\u308b\u304b\uff1f\u5b9f\u969b\u306b\u624b\u3092\u52d5\u304b\u3057\u3066\u78ba\u8a8d\u3057\u3066\u307f\u3088\u3046\u3002</p> <p>\u4ffa\u306e\u6559\u3048\u5b50\u305f\u3061\u3082\u3001\u982d\u3067\u7406\u89e3\u3057\u305f\u3060\u3051\u3058\u3083\u30c0\u30e1\u3060\u3002\u5b9f\u6226\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u521d\u3081\u3066\u300c\u7fd2\u5f97\u3057\u305f\u300d\u3068\u8a00\u3048\u308b\u3002</p> <p>\u4e94\u6761\u5148\u751f\u304b\u3089\u306e\u30a2\u30c9\u30d0\u30a4\u30b9</p> <p>\u7df4\u7fd2\u554f\u984c\u306f\u6bb5\u968e\u7684\u306b\u96e3\u3057\u304f\u306a\u3063\u3066\u3044\u308b\u3002\u6700\u521d\u306f\u7c21\u5358\u3067\u3082\u3001\u6700\u5f8c\u306e\u65b9\u306f\u3061\u3087\u3063\u3068\u624b\u5f37\u3044\u305e\u3002 \u3067\u3082\u5fc3\u914d\u3059\u308b\u306a\u3002\u4ffa\u304c\u76f4\u3005\u306b\u89e3\u7b54\u3082\u7528\u610f\u3057\u3066\u3042\u308b\u3002</p>"},{"location":"chapter01/exercises/#-","title":"\u521d\u7d1a\u7de8 - \u57fa\u672c\u8853\u5f0f","text":""},{"location":"chapter01/exercises/#1","title":"\u554f\u984c1: \u5909\u6570\u3068\u6f14\u7b97","text":"<p>\u4e94\u6761\u5148\u751f\u306e\u57fa\u672c\u546a\u529b\u306f1500\u3001\u30ec\u30d9\u30eb\u30a2\u30c3\u30d7\u3067300\u5897\u52a0\u3059\u308b\u3002\u30ec\u30d9\u30eb5\u307e\u3067\u4e0a\u304c\u3063\u305f\u6642\u306e\u6700\u7d42\u546a\u529b\u3092\u8a08\u7b97\u3057\u3066\u8868\u793a\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3051\u3002</p> <pre><code>fn main() {\n    // \u3053\u3053\u306b\u30b3\u30fc\u30c9\u3092\u66f8\u304f\n}\n</code></pre> \u89e3\u7b54\u3092\u898b\u308b <pre><code>fn main() {\n    let base_power = 1500;\n    let level_bonus = 300;\n    let max_level = 5;\n\n    let final_power = base_power + (level_bonus * max_level);\n\n    println!(\\\"\u4e94\u6761\u5148\u751f\u306e\u57fa\u672c\u546a\u529b: {}\\\", base_power);\n    println!(\\\"\u30ec\u30d9\u30eb{}\u5230\u9054\u6642\u306e\u546a\u529b: {}\\\", max_level, final_power);\n\n    // \u3088\u308a\u8a73\u7d30\u306a\u8868\u793a\n    for level in 1..=max_level {\n        let current_power = base_power + (level_bonus * level);\n        println!(\\\"\u30ec\u30d9\u30eb{}: \u546a\u529b {}\\\", level, current_power);\n    }\n}\n</code></pre>"},{"location":"chapter01/exercises/#2","title":"\u554f\u984c2: \u6587\u5b57\u5217\u64cd\u4f5c","text":"<p>\u300c\u8853\u5f0f\u9806\u8ee2\u300d\u3068\u3044\u3046\u6587\u5b57\u5217\u306b\u300c\u300e\u84bc\u300f\u300d\u3092\u8ffd\u52a0\u3057\u3066\u300c\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\u300d\u306b\u3057\u3001\u3055\u3089\u306b\u300c\u767a\u52d5\uff01\u300d\u3092\u8ffd\u52a0\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3051\u3002</p> <pre><code>fn main() {\n    let base_technique = \\\"\u8853\u5f0f\u9806\u8ee2\\\";\n    // \u3053\u3053\u306b\u30b3\u30fc\u30c9\u3092\u66f8\u304f\n}\n</code></pre> \u89e3\u7b54\u3092\u898b\u308b <pre><code>fn main() {\n    let base_technique = \\\"\u8853\u5f0f\u9806\u8ee2\\\";\n\n    // String\u578b\u306b\u5909\u63db\u3057\u3066\u64cd\u4f5c\n    let mut full_technique = String::from(base_technique);\n    full_technique.push_str(\\\"\u300e\u84bc\u300f\\\");\n    full_technique.push_str(\\\"\u767a\u52d5\uff01\\\");\n\n    println!(\\\"\u5b8c\u6210\u3057\u305f\u546a\u6587: {}\\\", full_technique);\n\n    // format!\u30de\u30af\u30ed\u3092\u4f7f\u3046\u65b9\u6cd5\n    let formatted = format!(\\\"{}\u300e\u84bc\u300f\u767a\u52d5\uff01\\\", base_technique);\n    println!(\\\"format!\u4f7f\u7528: {}\\\", formatted);\n}\n</code></pre>"},{"location":"chapter01/exercises/#-_1","title":"\u4e2d\u7d1a\u7de8 - \u5236\u5fa1\u69cb\u6587\u306e\u5fdc\u7528","text":""},{"location":"chapter01/exercises/#3","title":"\u554f\u984c3: \u546a\u8853\u5e2b\u7b49\u7d1a\u5224\u5b9a\u30b7\u30b9\u30c6\u30e0","text":"<p>\u546a\u529b\u5024\u306b\u5fdc\u3058\u3066\u546a\u8853\u5e2b\u306e\u7b49\u7d1a\u3092\u5224\u5b9a\u3057\u3001\u3055\u3089\u306b\u7279\u5225\u306a\u79f0\u53f7\u3082\u4ed8\u4e0e\u3059\u308b\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u6210\u305b\u3088\u3002</p> <p>\u5224\u5b9a\u57fa\u6e96:</p> <ul> <li>0-500: 4\u7d1a\u546a\u8853\u5e2b</li> <li>501-1000: 3\u7d1a\u546a\u8853\u5e2b</li> <li>1001-1500: 2\u7d1a\u546a\u8853\u5e2b</li> <li>1501-2500: 1\u7d1a\u546a\u8853\u5e2b</li> <li>2501-4000: \u7279\u7d1a\u546a\u8853\u5e2b</li> <li>4001\u4ee5\u4e0a: \u7279\u7d1a\u546a\u8853\u5e2b\uff08\u6700\u5f37\u5019\u88dc\uff09</li> </ul> <p>\u7279\u5225\u79f0\u53f7:</p> <ul> <li>\u5076\u6570\u306e\u546a\u529b: \u300c\u5b89\u5b9a\u578b\u300d</li> <li>3\u306e\u500d\u6570: \u300c\u5929\u624d\u578b\u300d</li> <li>5\u306e\u500d\u6570: \u300c\u52aa\u529b\u578b\u300d</li> <li>1000\u306e\u500d\u6570: \u300c\u898f\u683c\u5916\u300d</li> </ul> <pre><code>fn main() {\n    let test_powers = [300, 750, 1200, 2000, 3000, 5000];\n\n    for power in test_powers.iter() {\n        // \u3053\u3053\u306b\u5224\u5b9a\u30ed\u30b8\u30c3\u30af\u3092\u66f8\u304f\n    }\n}\n</code></pre> \u89e3\u7b54\u3092\u898b\u308b <pre><code>fn judge_grade(power: i32) -&gt; String {\n    let grade = match power {\n        0..=500 =&gt; \\\"4\u7d1a\u546a\u8853\u5e2b\\\",\n        501..=1000 =&gt; \\\"3\u7d1a\u546a\u8853\u5e2b\\\",\n        1001..=1500 =&gt; \\\"2\u7d1a\u546a\u8853\u5e2b\\\",\n        1501..=2500 =&gt; \\\"1\u7d1a\u546a\u8853\u5e2b\\\",\n        2501..=4000 =&gt; \\\"\u7279\u7d1a\u546a\u8853\u5e2b\\\",\n        _ =&gt; \\\"\u7279\u7d1a\u546a\u8853\u5e2b\uff08\u6700\u5f37\u5019\u88dc\uff09\\\",\n    };\n\n    let mut titles = Vec::new();\n\n    if power % 2 == 0 {\n        titles.push(\\\"\u5b89\u5b9a\u578b\\\");\n    }\n    if power % 3 == 0 {\n        titles.push(\\\"\u5929\u624d\u578b\\\");\n    }\n    if power % 5 == 0 {\n        titles.push(\\\"\u52aa\u529b\u578b\\\");\n    }\n    if power % 1000 == 0 {\n        titles.push(\\\"\u898f\u683c\u5916\\\");\n    }\n\n    if titles.is_empty() {\n        format!(\\\"{}\\\", grade)\n    } else {\n        format!(\\\"{} [{}]\\\", grade, titles.join(\\\", \\\"))\n    }\n}\n\nfn main() {\n    let test_powers = [300, 750, 1200, 2000, 3000, 5000];\n\n    println!(\\\"=== \u546a\u8853\u5e2b\u7b49\u7d1a\u5224\u5b9a\u30b7\u30b9\u30c6\u30e0 ===\\\");\n    for power in test_powers.iter() {\n        let result = judge_grade(*power);\n        println!(\\\"\u546a\u529b{}: {}\\\", power, result);\n    }\n}\n</code></pre>"},{"location":"chapter01/exercises/#4","title":"\u554f\u984c4: \u8853\u5f0f\u30b3\u30f3\u30d3\u30cd\u30fc\u30b7\u30e7\u30f3","text":"<p>\u4ee5\u4e0b\u306e\u8853\u5f0f\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u65b0\u3057\u3044\u6280\u3092\u4f5c\u6210\u3059\u308b\u30b7\u30b9\u30c6\u30e0\u3092\u5b9f\u88c5\u305b\u3088\u3002</p> <p>\u57fa\u672c\u8853\u5f0f: \u84bc(1000), \u8d6b(1200), \u9ed2(800), \u767d(600)</p> <p>\u7d44\u307f\u5408\u308f\u305b\u30eb\u30fc\u30eb:</p> <ul> <li>\u84bc + \u8d6b = \u8308 (\u5a01\u529b3000)</li> <li>\u9ed2 + \u767d = \u9670\u967d (\u5a01\u529b1800)</li> <li>\u540c\u3058\u8853\u5f0f2\u3064 = \u5f37\u5316\u7248 (\u5a01\u529b1.5\u500d)</li> <li>\u305d\u306e\u4ed6 = \u57fa\u672c\u30b3\u30f3\u30dc (\u5a01\u529b\u5408\u8a08 \u00d7 1.2)</li> </ul> <pre><code>fn main() {\n    let combinations = [\n        (\\\"\u84bc\\\", \\\"\u8d6b\\\"),\n        (\\\"\u9ed2\\\", \\\"\u767d\\\"),\n        (\\\"\u84bc\\\", \\\"\u84bc\\\"),\n        (\\\"\u84bc\\\", \\\"\u9ed2\\\"),\n    ];\n\n    // \u3053\u3053\u306b\u5b9f\u88c5\n}\n</code></pre> \u89e3\u7b54\u3092\u898b\u308b <pre><code>fn get_base_power(technique: &amp;str) -&gt; i32 {\n    match technique {\n        \\\"\u84bc\\\" =&gt; 1000,\n        \\\"\u8d6b\\\" =&gt; 1200,\n        \\\"\u9ed2\\\" =&gt; 800,\n        \\\"\u767d\\\" =&gt; 600,\n        _ =&gt; 0,\n    }\n}\n\nfn combine_techniques(tech1: &amp;str, tech2: &amp;str) -&gt; (String, i32) {\n    match (tech1, tech2) {\n        (\\\"\u84bc\\\", \\\"\u8d6b\\\") | (\\\"\u8d6b\\\", \\\"\u84bc\\\") =&gt; {\n            (String::from(\\\"\u865a\u5f0f\u300e\u8308\u300f\\\"), 3000)\n        },\n        (\\\"\u9ed2\\\", \\\"\u767d\\\") | (\\\"\u767d\\\", \\\"\u9ed2\\\") =&gt; {\n            (String::from(\\\"\u9670\u967d\u8853\\\"), 1800)\n        },\n        (a, b) if a == b =&gt; {\n            let base = get_base_power(a);\n            let enhanced = (base as f64 * 1.5) as i32;\n            (format!(\\\"\u5f37\u5316\u300e{}\u300f\\\", a), enhanced)\n        },\n        (a, b) =&gt; {\n            let total = get_base_power(a) + get_base_power(b);\n            let combo_power = (total as f64 * 1.2) as i32;\n            (format!(\\\"{}\u00d7{}\u30b3\u30f3\u30dc\\\", a, b), combo_power)\n        }\n    }\n}\n\nfn main() {\n    let combinations = [\n        (\\\"\u84bc\\\", \\\"\u8d6b\\\"),\n        (\\\"\u9ed2\\\", \\\"\u767d\\\"),\n        (\\\"\u84bc\\\", \\\"\u84bc\\\"),\n        (\\\"\u84bc\\\", \\\"\u9ed2\\\"),\n        (\\\"\u8d6b\\\", \\\"\u767d\\\"),\n    ];\n\n    println!(\\\"=== \u8853\u5f0f\u30b3\u30f3\u30d3\u30cd\u30fc\u30b7\u30e7\u30f3\u30b7\u30b9\u30c6\u30e0 ===\\\");\n\n    for (tech1, tech2) in combinations.iter() {\n        let (combo_name, power) = combine_techniques(tech1, tech2);\n        println!(\\\"{} + {} \u2192 {} (\u5a01\u529b: {})\\\",\n                 tech1, tech2, combo_name, power);\n    }\n}\n</code></pre>"},{"location":"chapter01/exercises/#-_2","title":"\u4e0a\u7d1a\u7de8 - \u95a2\u6570\u3068\u30c7\u30fc\u30bf\u69cb\u9020","text":""},{"location":"chapter01/exercises/#5","title":"\u554f\u984c5: \u546a\u970a\u8a0e\u4f10\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u30fc","text":"<p>\u546a\u970a\u306e\u7fa4\u308c\u3068\u6226\u3046\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u30fc\u3092\u4f5c\u6210\u305b\u3088\u3002\u4ee5\u4e0b\u306e\u4ed5\u69d8\u3092\u6e80\u305f\u3059\u3053\u3068\uff1a</p> <p>\u546a\u970a\u306e\u7a2e\u985e:</p> <ul> <li>\u4e0b\u7d1a\u546a\u970a: HP 100, \u7d4c\u9a13\u5024 10</li> <li>\u4e2d\u7d1a\u546a\u970a: HP 300, \u7d4c\u9a13\u5024 30</li> <li>\u4e0a\u7d1a\u546a\u970a: HP 500, \u7d4c\u9a13\u5024 50</li> <li>\u7279\u7d1a\u546a\u970a: HP 1000, \u7d4c\u9a13\u5024 100</li> </ul> <p>\u546a\u8853\u5e2b\u306e\u80fd\u529b:</p> <ul> <li>\u521d\u671fHP: 1000, \u521d\u671f\u546a\u529b: 1500</li> <li>\u30ec\u30d9\u30eb\u30a2\u30c3\u30d7: \u7d4c\u9a13\u5024100\u3067\u546a\u529b+200</li> <li>\u653b\u6483\u30d1\u30bf\u30fc\u30f3: \u57fa\u672c\u653b\u6483(\u546a\u529b\u00d70.8), \u5fc5\u6bba\u6280(\u546a\u529b\u00d71.5, 3\u56de\u306b1\u56de)</li> </ul> <pre><code>// \u69cb\u9020\u4f53\u306e\u5b9a\u7fa9\u4f8b\nstruct Curse {\n    name: String,\n    hp: i32,\n    exp_value: i32,\n}\n\nstruct Sorcerer {\n    hp: i32,\n    power: i32,\n    exp: i32,\n    level: i32,\n}\n\nfn main() {\n    // \u3053\u3053\u306b\u5b9f\u88c5\n}\n</code></pre> \u89e3\u7b54\u3092\u898b\u308b <pre><code>#[derive(Clone)]\nstruct Curse {\n    name: String,\n    hp: i32,\n    max_hp: i32,\n    exp_value: i32,\n}\n\nstruct Sorcerer {\n    hp: i32,\n    max_hp: i32,\n    power: i32,\n    exp: i32,\n    level: i32,\n    attack_count: i32,\n}\n\nimpl Curse {\n    fn new(curse_type: &amp;str) -&gt; Self {\n        let (hp, exp) = match curse_type {\n            \\\"\u4e0b\u7d1a\\\" =&gt; (100, 10),\n            \\\"\u4e2d\u7d1a\\\" =&gt; (300, 30),\n            \\\"\u4e0a\u7d1a\\\" =&gt; (500, 50),\n            \\\"\u7279\u7d1a\\\" =&gt; (1000, 100),\n            _ =&gt; (50, 5),\n        };\n\n        Curse {\n            name: format!(\\\"{}\u546a\u970a\\\", curse_type),\n            hp,\n            max_hp: hp,\n            exp_value: exp,\n        }\n    }\n\n    fn is_alive(&amp;self) -&gt; bool {\n        self.hp &gt; 0\n    }\n\n    fn take_damage(&amp;mut self, damage: i32) {\n        self.hp = (self.hp - damage).max(0);\n    }\n}\n\nimpl Sorcerer {\n    fn new() -&gt; Self {\n        Sorcerer {\n            hp: 1000,\n            max_hp: 1000,\n            power: 1500,\n            exp: 0,\n            level: 1,\n            attack_count: 0,\n        }\n    }\n\n    fn attack(&amp;mut self, target: &amp;mut Curse) -&gt; i32 {\n        self.attack_count += 1;\n\n        let damage = if self.attack_count % 3 == 0 {\n            println!(\\\"\u5fc5\u6bba\u6280\u767a\u52d5\uff01\\\");\n            (self.power as f64 * 1.5) as i32\n        } else {\n            (self.power as f64 * 0.8) as i32\n        };\n\n        target.take_damage(damage);\n        damage\n    }\n\n    fn gain_exp(&amp;mut self, exp: i32) {\n        self.exp += exp;\n\n        // \u30ec\u30d9\u30eb\u30a2\u30c3\u30d7\u5224\u5b9a\n        let new_level = (self.exp / 100) + 1;\n        if new_level &gt; self.level {\n            let level_ups = new_level - self.level;\n            self.level = new_level;\n            self.power += level_ups * 200;\n            println!(\\\"\u30ec\u30d9\u30eb\u30a2\u30c3\u30d7\uff01 Lv.{} \u546a\u529b: {}\\\", self.level, self.power);\n        }\n    }\n}\n\nfn battle(sorcerer: &amp;mut Sorcerer, curse: &amp;mut Curse) -&gt; bool {\n    println!(\\\"\\\\n{} \u3068\u306e\u6226\u95d8\u958b\u59cb\uff01\\\", curse.name);\n\n    while curse.is_alive() &amp;&amp; sorcerer.hp &gt; 0 {\n        // \u546a\u8853\u5e2b\u306e\u653b\u6483\n        let damage = sorcerer.attack(curse);\n        println!(\\\"{} \u306b {} \u30c0\u30e1\u30fc\u30b8\uff01 (\u6b8b\u308aHP: {})\\\",\n                 curse.name, damage, curse.hp);\n\n        if !curse.is_alive() {\n            println!(\\\"{} \u3092\u6483\u7834\uff01\\\", curse.name);\n            sorcerer.gain_exp(curse.exp_value);\n            return true;\n        }\n\n        // \u546a\u970a\u306e\u53cd\u6483\uff08\u7c21\u6613\u7248\uff09\n        let curse_damage = curse.max_hp / 10;\n        sorcerer.hp = (sorcerer.hp - curse_damage).max(0);\n        if curse_damage &gt; 0 {\n            println!(\\\"{} \u306e\u53cd\u6483\uff01 {} \u30c0\u30e1\u30fc\u30b8 (\u6b8b\u308aHP: {})\\\",\n                     curse.name, curse_damage, sorcerer.hp);\n        }\n    }\n\n    false\n}\n\nfn main() {\n    let mut gojo = Sorcerer::new();\n\n    let curse_types = [\\\"\u4e0b\u7d1a\\\", \\\"\u4e0b\u7d1a\\\", \\\"\u4e2d\u7d1a\\\", \\\"\u4e0a\u7d1a\\\", \\\"\u7279\u7d1a\\\"];\n    let mut defeated_count = 0;\n\n    println!(\\\"=== \u546a\u970a\u8a0e\u4f10\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u30fc ===\\\");\n    println!(\\\"\u546a\u8853\u5e2b\u30b9\u30c6\u30fc\u30bf\u30b9: HP {} \u546a\u529b {} \u30ec\u30d9\u30eb {}\\\",\n             gojo.hp, gojo.power, gojo.level);\n\n    for curse_type in curse_types.iter() {\n        if gojo.hp &lt;= 0 {\n            break;\n        }\n\n        let mut curse = Curse::new(curse_type);\n\n        if battle(&amp;mut gojo, &amp;mut curse) {\n            defeated_count += 1;\n        }\n    }\n\n    println!(\\\"\\\\n=== \u6226\u95d8\u7d50\u679c ===\\\");\n    println!(\\\"\u6483\u7834\u6570: {}\\\", defeated_count);\n    println!(\\\"\u6700\u7d42\u30b9\u30c6\u30fc\u30bf\u30b9: HP {} \u546a\u529b {} \u30ec\u30d9\u30eb {} \u7d4c\u9a13\u5024 {}\\\",\n             gojo.hp, gojo.power, gojo.level, gojo.exp);\n\n    if gojo.hp &gt; 0 {\n        println!(\\\"\u5b8c\u5168\u52dd\u5229\uff01\u3055\u3059\u304c\u6700\u5f37\u3060\u3002\\\");\n    } else {\n        println!(\\\"\u307e\u3060\u307e\u3060\u4fee\u884c\u304c\u8db3\u308a\u306a\u3044\u306a\u3002\\\");\n    }\n}\n</code></pre>"},{"location":"chapter01/exercises/#6","title":"\u554f\u984c6: \u8853\u5f0f\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9","text":"<p>\u8853\u5f0f\u306e\u60c5\u5831\u3092\u7ba1\u7406\u3059\u308b\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u6210\u305b\u3088\u3002\u4ee5\u4e0b\u306e\u6a5f\u80fd\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\uff1a</p> <ul> <li>\u8853\u5f0f\u306e\u8ffd\u52a0</li> <li>\u540d\u524d\u306b\u3088\u308b\u691c\u7d22</li> <li>\u5a01\u529b\u3067\u306e\u30bd\u30fc\u30c8</li> <li>\u7d71\u8a08\u60c5\u5831\u306e\u8868\u793a</li> </ul> <pre><code>struct Technique {\n    name: String,\n    power: i32,\n    element: String,\n    user: String,\n}\n\nfn main() {\n    // \u3053\u3053\u306b\u5b9f\u88c5\n}\n</code></pre> \u89e3\u7b54\u3092\u898b\u308b <pre><code>#[derive(Debug, Clone)]\nstruct Technique {\n    name: String,\n    power: i32,\n    element: String,\n    user: String,\n}\n\nimpl Technique {\n    fn new(name: &amp;str, power: i32, element: &amp;str, user: &amp;str) -&gt; Self {\n        Technique {\n            name: String::from(name),\n            power,\n            element: String::from(element),\n            user: String::from(user),\n        }\n    }\n}\n\nstruct TechniqueDatabase {\n    techniques: Vec&lt;Technique&gt;,\n}\n\nimpl TechniqueDatabase {\n    fn new() -&gt; Self {\n        TechniqueDatabase {\n            techniques: Vec::new(),\n        }\n    }\n\n    fn add_technique(&amp;mut self, technique: Technique) {\n        self.techniques.push(technique);\n        println!(\\\"\u8853\u5f0f '{}' \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\\\", self.techniques.last().unwrap().name);\n    }\n\n    fn search_by_name(&amp;self, name: &amp;str) -&gt; Vec&lt;&amp;Technique&gt; {\n        self.techniques.iter()\n            .filter(|tech| tech.name.contains(name))\n            .collect()\n    }\n\n    fn search_by_user(&amp;self, user: &amp;str) -&gt; Vec&lt;&amp;Technique&gt; {\n        self.techniques.iter()\n            .filter(|tech| tech.user == user)\n            .collect()\n    }\n\n    fn sort_by_power(&amp;self) -&gt; Vec&lt;&amp;Technique&gt; {\n        let mut sorted: Vec&lt;&amp;Technique&gt; = self.techniques.iter().collect();\n        sorted.sort_by(|a, b| b.power.cmp(&amp;a.power));\n        sorted\n    }\n\n    fn show_statistics(&amp;self) {\n        if self.techniques.is_empty() {\n            println!(\\\"\u8853\u5f0f\u30c7\u30fc\u30bf\u304c\u3042\u308a\u307e\u305b\u3093\\\");\n            return;\n        }\n\n        let total_techniques = self.techniques.len();\n        let total_power: i32 = self.techniques.iter().map(|t| t.power).sum();\n        let average_power = total_power / total_techniques as i32;\n        let max_power = self.techniques.iter().map(|t| t.power).max().unwrap();\n        let min_power = self.techniques.iter().map(|t| t.power).min().unwrap();\n\n        println!(\\\"\\\\n=== \u8853\u5f0f\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u7d71\u8a08 ===\\\");\n        println!(\\\"\u7dcf\u8853\u5f0f\u6570: {}\\\", total_techniques);\n        println!(\\\"\u5e73\u5747\u5a01\u529b: {}\\\", average_power);\n        println!(\\\"\u6700\u5927\u5a01\u529b: {}\\\", max_power);\n        println!(\\\"\u6700\u5c0f\u5a01\u529b: {}\\\", min_power);\n\n        // \u5c5e\u6027\u5225\u96c6\u8a08\n        let mut elements: std::collections::HashMap&lt;String, i32&gt; = std::collections::HashMap::new();\n        for tech in &amp;self.techniques {\n            *elements.entry(tech.element.clone()).or_insert(0) += 1;\n        }\n\n        println!(\\\"\\\\n\u5c5e\u6027\u5225\u7d71\u8a08:\\\");\n        for (element, count) in elements {\n            println!(\\\"{}: {} \u500b\\\", element, count);\n        }\n    }\n\n    fn list_all(&amp;self) {\n        println!(\\\"\\\\n=== \u5168\u8853\u5f0f\u4e00\u89a7 ===\\\");\n        for (i, tech) in self.techniques.iter().enumerate() {\n            println!(\\\"{}. {} - \u5a01\u529b:{} \u5c5e\u6027:{} \u4f7f\u7528\u8005:{}\\\",\n                     i + 1, tech.name, tech.power, tech.element, tech.user);\n        }\n    }\n}\n\nfn main() {\n    let mut db = TechniqueDatabase::new();\n\n    // \u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u306e\u8ffd\u52a0\n    db.add_technique(Technique::new(\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\", 1000, \\\"\u7121\u4e0b\u9650\\\", \\\"\u4e94\u6761\u609f\\\"));\n    db.add_technique(Technique::new(\\\"\u8853\u5f0f\u53cd\u8ee2\u300e\u8d6b\u300f\\\", 1500, \\\"\u7121\u4e0b\u9650\\\", \\\"\u4e94\u6761\u609f\\\"));\n    db.add_technique(Technique::new(\\\"\u865a\u5f0f\u300e\u8308\u300f\\\", 3000, \\\"\u7121\u4e0b\u9650\\\", \\\"\u4e94\u6761\u609f\\\"));\n    db.add_technique(Technique::new(\\\"\u89e3\\\", 2000, \\\"\u65ac\u6483\\\", \\\"\u4e21\u9762\u5bbf\u513a\\\"));\n    db.add_technique(Technique::new(\\\"\u634c\\\", 2500, \\\"\u65ac\u6483\\\", \\\"\u4e21\u9762\u5bbf\u513a\\\"));\n    db.add_technique(Technique::new(\\\"\u5341\u7a2e\u5f71\u6cd5\u8853\\\", 800, \\\"\u5f0f\u795e\\\", \\\"\u4f0f\u9ed2\u6075\\\"));\n    db.add_technique(Technique::new(\\\"\u91d8\u5d0e\u91ce\u8594\u8587\\\", 600, \\\"\u546a\u5177\\\", \\\"\u91d8\u5d0e\u91ce\u8594\u8587\\\"));\n\n    // \u5168\u4e00\u89a7\u8868\u793a\n    db.list_all();\n\n    // \u7d71\u8a08\u60c5\u5831\n    db.show_statistics();\n\n    // \u691c\u7d22\u30c6\u30b9\u30c8\n    println!(\\\"\\\\n=== \u691c\u7d22\u30c6\u30b9\u30c8 ===\\\");\n    let blue_results = db.search_by_name(\\\"\u84bc\\\");\n    println!(\\\"'\u84bc'\u3092\u542b\u3080\u8853\u5f0f:\\\");\n    for tech in blue_results {\n        println!(\\\"  {}\\\", tech.name);\n    }\n\n    let gojo_techniques = db.search_by_user(\\\"\u4e94\u6761\u609f\\\");\n    println!(\\\"\\\\n\u4e94\u6761\u609f\u306e\u8853\u5f0f:\\\");\n    for tech in gojo_techniques {\n        println!(\\\"  {} (\u5a01\u529b: {})\\\", tech.name, tech.power);\n    }\n\n    // \u5a01\u529b\u9806\u30bd\u30fc\u30c8\n    println!(\\\"\\\\n=== \u5a01\u529b\u9806\u30e9\u30f3\u30ad\u30f3\u30b0 ===\\\");\n    let sorted = db.sort_by_power();\n    for (i, tech) in sorted.iter().take(5).enumerate() {\n        println!(\\\"{}\u4f4d: {} - \u5a01\u529b {} ({})\\\",\n                 i + 1, tech.name, tech.power, tech.user);\n    }\n}\n</code></pre>"},{"location":"chapter01/exercises/#_2","title":"\u7dcf\u5408\u554f\u984c","text":""},{"location":"chapter01/exercises/#7","title":"\u554f\u984c7: \u546a\u8853\u9ad8\u5c02\u5165\u5b66\u8a66\u9a13\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u30fc","text":"<p>\u6700\u5f8c\u306e\u554f\u984c\u3060\u3002\u3053\u308c\u307e\u3067\u5b66\u3093\u3060\u5168\u3066\u306e\u8981\u7d20\u3092\u4f7f\u3063\u3066\u3001\u546a\u8853\u9ad8\u5c02\u306e\u5165\u5b66\u8a66\u9a13\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u305b\u3088\u3002</p> <p>\u8981\u4ef6:</p> <ul> <li>\u53d7\u9a13\u8005\u306f\u540d\u524d\u3001\u521d\u671f\u546a\u529b\u3001\u5f97\u610f\u8853\u5f0f\u3092\u6301\u3064</li> <li>3\u3064\u306e\u8a66\u9a13\u79d1\u76ee: \u5b9f\u6280\u3001\u7b46\u8a18\u3001\u9762\u63a5</li> <li>\u79d1\u76ee\u3054\u3068\u306b\u7570\u306a\u308b\u8a55\u4fa1\u65b9\u6cd5</li> <li>\u6700\u7d42\u7684\u306a\u5408\u5426\u5224\u5b9a\u3068\u8b1b\u8a55</li> </ul>   \u81ea\u7531\u306b\u8a2d\u8a08\u3057\u3066\u5b9f\u88c5\u3057\u3066\u307f\u3088\u3046\uff01   \u89e3\u7b54\u4f8b\u3092\u898b\u308b <pre><code>use std::collections::HashMap;\n\n#[derive(Debug, Clone)]\nstruct Student {\n    name: String,\n    base_power: i32,\n    specialty: String,\n    scores: HashMap&lt;String, i32&gt;,\n    total_score: i32,\n    passed: bool,\n}\n\nimpl Student {\n    fn new(name: &amp;str, base_power: i32, specialty: &amp;str) -&gt; Self {\n        Student {\n            name: String::from(name),\n            base_power,\n            specialty: String::from(specialty),\n            scores: HashMap::new(),\n            total_score: 0,\n            passed: false,\n        }\n    }\n\n    fn add_score(&amp;mut self, subject: &amp;str, score: i32) {\n        self.scores.insert(String::from(subject), score);\n    }\n\n    fn calculate_total(&amp;mut self) {\n        self.total_score = self.scores.values().sum();\n    }\n}\n\nstruct ExamSystem {\n    students: Vec&lt;Student&gt;,\n    pass_threshold: i32,\n}\n\nimpl ExamSystem {\n    fn new(pass_threshold: i32) -&gt; Self {\n        ExamSystem {\n            students: Vec::new(),\n            pass_threshold,\n        }\n    }\n\n    fn register_student(&amp;mut self, student: Student) {\n        println!(\\\"{} \u304c\u53d7\u9a13\u767b\u9332\u3057\u307e\u3057\u305f\\\", student.name);\n        self.students.push(student);\n    }\n\n    fn practical_exam(&amp;mut self) {\n        println!(\\\"\\\\n=== \u5b9f\u6280\u8a66\u9a13\u958b\u59cb ===\\\");\n\n        for student in &amp;mut self.students {\n            let base_score = match student.specialty.as_str() {\n                \\\"\u653b\u6483\u8853\u5f0f\\\" =&gt; 85,\n                \\\"\u9632\u5fa1\u8853\u5f0f\\\" =&gt; 75,\n                \\\"\u88dc\u52a9\u8853\u5f0f\\\" =&gt; 70,\n                \\\"\u7279\u6b8a\u8853\u5f0f\\\" =&gt; 80,\n                _ =&gt; 60,\n            };\n\n            // \u546a\u529b\u306b\u3088\u308b\u88dc\u6b63\n            let power_bonus = (student.base_power / 100).min(20);\n            let final_score = (base_score + power_bonus).min(100);\n\n            student.add_score(\\\"\u5b9f\u6280\\\", final_score);\n            println!(\\\"{}: {}\u70b9 (\u5f97\u610f: {}, \u546a\u529b\u88dc\u6b63: +{})\\\",\n                     student.name, final_score, student.specialty, power_bonus);\n        }\n    }\n\n    fn written_exam(&amp;mut self) {\n        println!(\\\"\\\\n=== \u7b46\u8a18\u8a66\u9a13\u958b\u59cb ===\\\");\n\n        // \u7c21\u6613\u7684\u306a\u30e9\u30f3\u30c0\u30e0\u8981\u7d20\uff08\u5b9f\u969b\u306f\u3082\u3063\u3068\u8907\u96d1\uff09\n        let base_scores = [95, 85, 78, 92, 88, 76, 90, 82];\n\n        for (i, student) in self.students.iter_mut().enumerate() {\n            let score = base_scores[i % base_scores.len()];\n            student.add_score(\\\"\u7b46\u8a18\\\", score);\n            println!(\\\"{}: {}\u70b9\\\", student.name, score);\n        }\n    }\n\n    fn interview_exam(&amp;mut self) {\n        println!(\\\"\\\\n=== \u9762\u63a5\u8a66\u9a13\u958b\u59cb ===\\\");\n\n        for student in &amp;mut self.students {\n            let base_score = 70;\n\n            // \u7279\u6b8a\u8853\u5f0f\u306f\u9762\u63a5\u3067\u9ad8\u8a55\u4fa1\n            let specialty_bonus = match student.specialty.as_str() {\n                \\\"\u7279\u6b8a\u8853\u5f0f\\\" =&gt; 15,\n                \\\"\u653b\u6483\u8853\u5f0f\\\" =&gt; 5,\n                \\\"\u9632\u5fa1\u8853\u5f0f\\\" =&gt; 10,\n                \\\"\u88dc\u52a9\u8853\u5f0f\\\" =&gt; 12,\n                _ =&gt; 0,\n            };\n\n            let final_score = (base_score + specialty_bonus).min(100);\n            student.add_score(\\\"\u9762\u63a5\\\", final_score);\n            println!(\\\"{}: {}\u70b9 (\u5c02\u9580\u6027\u8a55\u4fa1: +{})\\\",\n                     student.name, final_score, specialty_bonus);\n        }\n    }\n\n    fn judge_results(&amp;mut self) {\n        println!(\\\"\\\\n=== \u6700\u7d42\u5224\u5b9a ===\\\");\n\n        for student in &amp;mut self.students {\n            student.calculate_total();\n            student.passed = student.total_score &gt;= self.pass_threshold;\n\n            let status = if student.passed { \\\"\u5408\u683c\\\" } else { \\\"\u4e0d\u5408\u683c\\\" };\n\n            println!(\\\"{}: {}\u70b9 - {}\\\",\n                     student.name, student.total_score, status);\n\n            // \u8a73\u7d30\u30b9\u30b3\u30a2\n            println!(\\\"  \u5b9f\u6280: {}\u70b9, \u7b46\u8a18: {}\u70b9, \u9762\u63a5: {}\u70b9\\\",\n                     student.scores.get(\\\"\u5b9f\u6280\\\").unwrap_or(&amp;0),\n                     student.scores.get(\\\"\u7b46\u8a18\\\").unwrap_or(&amp;0),\n                     student.scores.get(\\\"\u9762\u63a5\\\").unwrap_or(&amp;0));\n        }\n    }\n\n    fn show_statistics(&amp;self) {\n        println!(\\\"\\\\n=== \u8a66\u9a13\u7d71\u8a08 ===\\\");\n\n        let total_students = self.students.len();\n        let passed_students = self.students.iter().filter(|s| s.passed).count();\n        let pass_rate = (passed_students as f64 / total_students as f64) * 100.0;\n\n        println!(\\\"\u53d7\u9a13\u8005\u6570: {}\\\", total_students);\n        println!(\\\"\u5408\u683c\u8005\u6570: {}\\\", passed_students);\n        println!(\\\"\u5408\u683c\u7387: {:.1}%\\\", pass_rate);\n\n        if let Some(top_student) = self.students.iter().max_by_key(|s| s.total_score) {\n            println!(\\\"\u9996\u5e2d: {} ({}\u70b9)\\\", top_student.name, top_student.total_score);\n        }\n    }\n\n    fn gojo_comment(&amp;self) {\n        println!(\\\"\\\\n=== \u4e94\u6761\u5148\u751f\u306e\u8b1b\u8a55 ===\\\");\n\n        let passed_count = self.students.iter().filter(|s| s.passed).count();\n\n        match passed_count {\n            0 =&gt; println!(\\\"\u5168\u54e1\u4e0d\u5408\u683c\u304b...\u307e\u3060\u307e\u3060\u4fee\u884c\u304c\u8db3\u308a\u306a\u3044\u306a\u3002\\\"),\n            1..=2 =&gt; println!(\\\"\u5c11\u6570\u7cbe\u92ed\u3060\u306d\u3002\u8cea\u306e\u9ad8\u3044\u5b66\u751f\u304c\u5165\u5b66\u3057\u3066\u304f\u308b\u3002\\\"),\n            3..=5 =&gt; println!(\\\"\u826f\u3044\u7d50\u679c\u3060\u3002\u671f\u5f85\u3067\u304d\u308b\u65b0\u5165\u751f\u305f\u3061\u3060\u306d\u3002\\\"),\n            _ =&gt; println!(\\\"\u5927\u8c4a\u4f5c\u3060\uff01\u6b21\u4e16\u4ee3\u306e\u6700\u5f37\u5019\u88dc\u304c\u305f\u304f\u3055\u3093\u3044\u308b\u3002\\\"),\n        }\n\n        // \u9ad8\u5f97\u70b9\u8005\u3078\u306e\u30b3\u30e1\u30f3\u30c8\n        for student in &amp;self.students {\n            if student.total_score &gt;= 270 {\n                println!(\\\"{}: \u7d20\u6674\u3089\u3057\u3044\uff01\u541b\u306b\u306f\u6700\u5f37\u306e\u7d20\u8cea\u304c\u3042\u308b\u3002\\\", student.name);\n            } else if student.total_score &gt;= 240 {\n                println!(\\\"{}: \u3068\u3066\u3082\u826f\u3044\u6210\u7e3e\u3060\u3002\u3057\u3063\u304b\u308a\u4f38\u3070\u3057\u3066\u3044\u3053\u3046\u3002\\\", student.name);\n            } else if student.passed {\n                println!(\\\"{}: \u5408\u683c\u304a\u3081\u3067\u3068\u3046\u3002\u3053\u308c\u304b\u3089\u304c\u672c\u756a\u3060\u305e\u3002\\\", student.name);\n            }\n        }\n    }\n}\n\nfn main() {\n    println!(\\\"=== \u6771\u4eac\u546a\u8853\u9ad8\u7b49\u5c02\u9580\u5b66\u6821 \u5165\u5b66\u8a66\u9a13 ===\\\");\n\n    let mut exam = ExamSystem::new(210);  // \u5408\u683c\u30e9\u30a4\u30f3210\u70b9\n\n    // \u53d7\u9a13\u751f\u767b\u9332\n    exam.register_student(Student::new(\\\"\u7530\u4e2d\u546a\u4ecb\\\", 800, \\\"\u653b\u6483\u8853\u5f0f\\\"));\n    exam.register_student(Student::new(\\\"\u4f50\u85e4\u970a\u5b50\\\", 1200, \\\"\u9632\u5fa1\u8853\u5f0f\\\"));\n    exam.register_student(Student::new(\\\"\u9234\u6728\u5f0f\u795e\\\", 600, \\\"\u88dc\u52a9\u8853\u5f0f\\\"));\n    exam.register_student(Student::new(\\\"\u9ad8\u6a4b\u7570\u80fd\\\", 1500, \\\"\u7279\u6b8a\u8853\u5f0f\\\"));\n    exam.register_student(Student::new(\\\"\u4f0a\u85e4\u546a\u529b\\\", 900, \\\"\u653b\u6483\u8853\u5f0f\\\"));\n\n    // \u8a66\u9a13\u5b9f\u65bd\n    exam.practical_exam();\n    exam.written_exam();\n    exam.interview_exam();\n\n    // \u7d50\u679c\u767a\u8868\n    exam.judge_results();\n    exam.show_statistics();\n    exam.gojo_comment();\n\n    println!(\\\"\\\\n\u8a66\u9a13\u7d42\u4e86\u3002\u65b0\u305f\u306a\u546a\u8853\u5e2b\u305f\u3061\u306e\u9580\u51fa\u3092\u795d\u304a\u3046\uff01\\\");\n}\n</code></pre>"},{"location":"chapter01/exercises/#_3","title":"\u7ae0\u672b\u7dcf\u62ec","text":"<p>\u304a\u75b2\u308c\u69d8\uff01\u7b2c1\u7ae0\u306e\u7df4\u7fd2\u554f\u984c\u306f\u5168\u3066\u30af\u30ea\u30a2\u3067\u304d\u305f\u304b\uff1f</p> <p>\u3053\u308c\u3089\u306e\u554f\u984c\u3092\u901a\u3057\u3066\u3001\u4ee5\u4e0b\u306e\u91cd\u8981\u306a\u6982\u5ff5\u3092\u5b9f\u8df5\u3067\u304d\u305f\u306f\u305a\u3060\uff1a</p> <ul> <li>\u5909\u6570\u3068\u578b - \u9069\u5207\u306a\u30c7\u30fc\u30bf\u7ba1\u7406</li> <li>\u5236\u5fa1\u69cb\u6587 - \u6761\u4ef6\u5206\u5c90\u3068\u30eb\u30fc\u30d7\u306e\u6d3b\u7528</li> <li>\u95a2\u6570 - \u30b3\u30fc\u30c9\u306e\u518d\u5229\u7528\u3068\u69cb\u9020\u5316</li> <li>\u30c7\u30fc\u30bf\u69cb\u9020 - \u69cb\u9020\u4f53\u3068\u30d9\u30af\u30bf\u30fc\u306e\u6d3b\u7528</li> <li>\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0 - match\u306e\u5f37\u529b\u3055</li> </ul> <p>\u4e94\u6761\u5148\u751f\u306e\u6700\u7d42\u30a2\u30c9\u30d0\u30a4\u30b9</p> <p>\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306f\u6697\u8a18\u3058\u3083\u306a\u3044\u3002\u7406\u89e3\u3057\u3066\u3001\u624b\u3092\u52d5\u304b\u3057\u3066\u3001\u5b9f\u969b\u306b\u4f5c\u308b\u3053\u3068\u304c\u5927\u5207\u3060\u3002</p> <p>\u3053\u306e\u7df4\u7fd2\u554f\u984c\u3067\u8e93\u3044\u305f\u3068\u3053\u308d\u304c\u3042\u308c\u3070\u3001\u6065\u305a\u304b\u3057\u304c\u3089\u305a\u306b\u57fa\u672c\u306b\u623b\u3063\u3066\u5fa9\u7fd2\u3057\u308d\u3002 \u4ffa\u306e\u6559\u3048\u5b50\u305f\u3061\u3082\u3001\u6700\u521d\u306f\u7c21\u5358\u306a\u3053\u3068\u304b\u3089\u59cb\u3081\u3066\u3001\u4eca\u3067\u306f\u7acb\u6d3e\u306a\u546a\u8853\u5e2b\u306b\u306a\u3063\u3066\u3044\u308b\u3002</p> <p>\u6b21\u306f\u7b2c2\u7ae0\u300c\u546a\u529b\u64cd\u4f5c\u7de8\u300d\u3067\u6240\u6709\u6a29\u30b7\u30b9\u30c6\u30e0\u3092\u5b66\u3076\u3002\u3053\u308c\u304cRust\u306e\u771f\u306e\u529b\u306e\u6e90\u6cc9\u3060\u3002</p> <p>\u57fa\u790e\u3092\u3057\u3063\u304b\u308a\u56fa\u3081\u305f\u304b\u3089\u3053\u305d\u3001\u6b21\u306e\u30ec\u30d9\u30eb\u306b\u9032\u3081\u308b\u3002\u6e96\u5099\u306f\u3044\u3044\u304b\uff1f</p> <p>\u300c\u57fa\u790e\u304c\u3067\u304d\u305f\u304b\u3089\u3053\u305d\u3001\u6b21\u306e\u30b9\u30c6\u30fc\u30b8\u304c\u898b\u3048\u3066\u304f\u308b\u300d</p>"},{"location":"chapter01/functions/","title":"\u95a2\u6570 - \u8853\u5f0f\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u5316","text":""},{"location":"chapter01/functions/#-_1","title":"\u95a2\u6570\u306e\u57fa\u672c - \u8853\u5f0f\u306e\u5b9a\u7fa9","text":"<p>\u95a2\u6570\u306f\u8853\u5f0f\u3092\u30d1\u30c3\u30b1\u30fc\u30b8\u5316\u3057\u305f\u3082\u306e\u3060\u3002\u540c\u3058\u8853\u5f0f\u3092\u4f55\u5ea6\u3082\u4f7f\u3044\u56de\u305b\u308b\u3057\u3001\u8907\u96d1\u306a\u8853\u5f0f\u3092\u5c0f\u3055\u306a\u90e8\u54c1\u306b\u5206\u3051\u3066\u7ba1\u7406\u3067\u304d\u308b\u3002</p>"},{"location":"chapter01/functions/#_1","title":"\u57fa\u672c\u7684\u306a\u95a2\u6570\u5b9a\u7fa9","text":"<pre><code>fn greet() {\n    println!(\\\"\u3084\u3042\u3084\u3042\u3001\u4ffa\u306f\u4e94\u6761\u609f\u3060\\\");\n}\n\nfn main() {\n    greet();  // \u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\n    greet();  // \u4f55\u5ea6\u3067\u3082\u547c\u3073\u51fa\u305b\u308b\n}\n</code></pre>"},{"location":"chapter01/functions/#_2","title":"\u30d1\u30e9\u30e1\u30fc\u30bf\u4ed8\u304d\u95a2\u6570","text":"<pre><code>fn cast_technique(name: &amp;str, power: i32) {\n    println!(\\\"{}\u3092\u767a\u52d5\uff01\u5a01\u529b: {}\\\", name, power);\n}\n\nfn main() {\n    cast_technique(\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\", 1000);\n    cast_technique(\\\"\u8853\u5f0f\u53cd\u8ee2\u300e\u8d6b\u300f\\\", 1500);\n    cast_technique(\\\"\u865a\u5f0f\u300e\u8308\u300f\\\", 3000);\n}\n</code></pre> <p>\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u578b\u6307\u5b9a</p> <p>\u95a2\u6570\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u5fc5\u305a\u578b\u3092\u660e\u793a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u3053\u308c\u306f\u4ffa\u306e\u8853\u5f0f\u3068\u540c\u3058\u3067\u3001\u6b63\u78ba\u306a\u5b9a\u7fa9\u304c\u5a01\u529b\u3092\u6c7a\u3081\u308b\u3093\u3060\u3002</p>"},{"location":"chapter01/functions/#_3","title":"\u623b\u308a\u5024\u306e\u3042\u308b\u95a2\u6570","text":"<pre><code>fn calculate_damage(base_power: i32, multiplier: f64) -&gt; i32 {\n    (base_power as f64 * multiplier) as i32\n}\n\nfn get_technique_name(level: i32) -&gt; &amp;'static str {\n    if level &gt;= 3000 {\n        \\\"\u865a\u5f0f\u300e\u8308\u300f\\\"\n    } else if level &gt;= 1500 {\n        \\\"\u8853\u5f0f\u53cd\u8ee2\u300e\u8d6b\u300f\\\"\n    } else {\n        \\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\"\n    }\n}\n\nfn main() {\n    let damage = calculate_damage(1000, 2.5);\n    let technique = get_technique_name(damage);\n\n    println!(\\\"\u30c0\u30e1\u30fc\u30b8: {}\\\", damage);\n    println!(\\\"\u63a8\u5968\u8853\u5f0f: {}\\\", technique);\n}\n</code></pre>"},{"location":"chapter01/functions/#_4","title":"\u65e9\u671f\u30ea\u30bf\u30fc\u30f3","text":"<pre><code>fn check_enemy_threat(enemy_power: i32) -&gt; String {\n    if enemy_power &lt;= 0 {\n        return String::from(\\\"\u6575\u304c\u3044\u306a\u3044\\\");  // \u65e9\u671f\u30ea\u30bf\u30fc\u30f3\n    }\n\n    if enemy_power &gt; 5000 {\n        return String::from(\\\"\u3061\u3087\u3063\u3068\u672c\u6c17\u51fa\u3059\u304b\u306a\\\");\n    }\n\n    String::from(\\\"\u96d1\u9b5a\u3060\u306d\\\")  // \u6700\u5f8c\u306e\u5f0f\u304c\u623b\u308a\u5024\n}\n\nfn main() {\n    let threats = [0, 1000, 6000];\n\n    for power in threats.iter() {\n        println!(\\\"\u6575\u306e\u529b: {} -&gt; {}\\\", power, check_enemy_threat(*power));\n    }\n}\n</code></pre>"},{"location":"chapter01/functions/#_5","title":"\u5f0f\u3068\u6587\u306e\u8a73\u7d30","text":"<pre><code>fn power_calculation() -&gt; i32 {\n    let base = 1000;\n    let bonus = 500;\n\n    // \u3053\u308c\u306f\u5f0f\uff08\u30bb\u30df\u30b3\u30ed\u30f3\u306a\u3057\uff09- \u623b\u308a\u5024\u306b\u306a\u308b\n    base + bonus\n}\n\nfn technique_analysis() -&gt; (String, i32, bool) {\n    let name = String::from(\\\"\u7121\u4e0b\u9650\u546a\u8853\\\");\n    let power = 9999;\n    let is_defensive = false;\n\n    // \u30bf\u30d7\u30eb\u3067\u8907\u6570\u306e\u5024\u3092\u8fd4\u3059\n    (name, power, is_defensive)\n}\n\nfn main() {\n    let total_power = power_calculation();\n    let (tech_name, tech_power, is_def) = technique_analysis();\n\n    println!(\\\"\u7dcf\u546a\u529b: {}\\\", total_power);\n    println!(\\\"\u6280: {} (\u5a01\u529b: {}, \u9632\u5fa1: {})\\\", tech_name, tech_power, is_def);\n}\n</code></pre>"},{"location":"chapter01/functions/#_6","title":"\u6240\u6709\u6a29\u3068\u95a2\u6570","text":""},{"location":"chapter01/functions/#_7","title":"\u5024\u306e\u79fb\u52d5","text":"<pre><code>fn take_ownership(technique: String) {\n    println!(\\\"{}\u3092\u53d7\u3051\u53d6\u3063\u305f\\\", technique);\n}  // \u3053\u3053\u3067technique\u304c\u30c9\u30ed\u30c3\u30d7\u3055\u308c\u308b\n\nfn main() {\n    let my_technique = String::from(\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\");\n    take_ownership(my_technique);\n\n    // println!(\\\"{}\\\", my_technique);  // \u30a8\u30e9\u30fc\uff01\u6240\u6709\u6a29\u304c\u79fb\u52d5\u3057\u305f\n}\n</code></pre>"},{"location":"chapter01/functions/#_8","title":"\u53c2\u7167\u306e\u4f7f\u7528","text":"<pre><code>fn analyze_technique(technique: &amp;String) -&gt; usize {\n    technique.len()  // \u53c2\u7167\u306a\u306e\u3067\u6240\u6709\u6a29\u306f\u79fb\u52d5\u3057\u306a\u3044\n}\n\nfn main() {\n    let my_technique = String::from(\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\");\n    let length = analyze_technique(&amp;my_technique);\n\n    println!(\\\"\u6280\u540d: {}\\\", my_technique);  // \u307e\u3060\u4f7f\u3048\u308b\uff01\n    println!(\\\"\u6587\u5b57\u6570: {}\\\", length);\n}\n</code></pre>"},{"location":"chapter01/functions/#_9","title":"\u53ef\u5909\u53c2\u7167","text":"<pre><code>fn power_up(technique: &amp;mut String) {\n    technique.push_str(\\\" - \u6700\u5927\u51fa\u529b\\\");\n}\n\nfn main() {\n    let mut my_technique = String::from(\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\");\n    println!(\\\"\u5909\u66f4\u524d: {}\\\", my_technique);\n\n    power_up(&amp;mut my_technique);\n    println!(\\\"\u5909\u66f4\u5f8c: {}\\\", my_technique);\n}\n</code></pre>"},{"location":"chapter01/functions/#_10","title":"\u9ad8\u5ea6\u306a\u95a2\u6570\u6a5f\u80fd","text":""},{"location":"chapter01/functions/#_11","title":"\u95a2\u6570\u30dd\u30a4\u30f3\u30bf","text":"<pre><code>fn blue_technique() -&gt; i32 { 1000 }\nfn red_technique() -&gt; i32 { 1500 }\nfn hollow_purple() -&gt; i32 { 9999 }\n\nfn execute_technique(technique_fn: fn() -&gt; i32) -&gt; i32 {\n    technique_fn()\n}\n\nfn main() {\n    let techniques = [blue_technique, red_technique, hollow_purple];\n\n    for (i, technique) in techniques.iter().enumerate() {\n        let damage = execute_technique(*technique);\n        println!(\\\"\u8853\u5f0f{}: \u30c0\u30e1\u30fc\u30b8 {}\\\", i + 1, damage);\n    }\n}\n</code></pre>"},{"location":"chapter01/functions/#_12","title":"\u30af\u30ed\u30fc\u30b8\u30e3\uff08\u7121\u540d\u95a2\u6570\uff09","text":"<pre><code>fn main() {\n    let base_power = 1000;\n\n    // \u30af\u30ed\u30fc\u30b8\u30e3\u306e\u5b9a\u7fa9\n    let calculate_damage = |multiplier: f64| -&gt; i32 {\n        (base_power as f64 * multiplier) as i32\n    };\n\n    // \u30af\u30ed\u30fc\u30b8\u30e3\u306e\u4f7f\u7528\n    let normal_damage = calculate_damage(1.0);\n    let critical_damage = calculate_damage(2.5);\n\n    println!(\\\"\u901a\u5e38\u30c0\u30e1\u30fc\u30b8: {}\\\", normal_damage);\n    println!(\\\"\u30af\u30ea\u30c6\u30a3\u30ab\u30eb: {}\\\", critical_damage);\n\n    // \u3088\u308a\u7c21\u6f54\u306a\u66f8\u304d\u65b9\n    let quick_calc = |x| x * 2;\n    println!(\\\"\u500d\u7387\u8a08\u7b97: {}\\\", quick_calc(500));\n}\n</code></pre>"},{"location":"chapter01/functions/#_13","title":"\u9ad8\u968e\u95a2\u6570","text":"<pre><code>fn apply_multiplier&lt;F&gt;(power: i32, func: F) -&gt; i32\nwhere\n    F: Fn(i32) -&gt; i32\n{\n    func(power)\n}\n\nfn main() {\n    let base_power = 1000;\n\n    // \u7570\u306a\u308b\u5909\u63db\u95a2\u6570\u3092\u9069\u7528\n    let doubled = apply_multiplier(base_power, |x| x * 2);\n    let squared = apply_multiplier(base_power, |x| x * x);\n    let boosted = apply_multiplier(base_power, |x| x + 500);\n\n    println!(\\\"\u57fa\u672c\u5a01\u529b: {}\\\", base_power);\n    println!(\\\"2\u500d: {}\\\", doubled);\n    println!(\\\"2\u4e57: {}\\\", squared);\n    println!(\\\"\u5f37\u5316: {}\\\", boosted);\n}\n</code></pre>"},{"location":"chapter01/functions/#-_2","title":"\u5b9f\u8df5\u4f8b - \u546a\u8853\u6226\u95d8\u30b7\u30b9\u30c6\u30e0","text":"<pre><code>// \u546a\u8853\u5e2b\u306e\u60c5\u5831\nstruct Sorcerer {\n    name: String,\n    power: i32,\n    health: i32,\n}\n\nimpl Sorcerer {\n    fn new(name: &amp;str, power: i32) -&gt; Self {\n        Sorcerer {\n            name: String::from(name),\n            power,\n            health: 100,\n        }\n    }\n}\n\n// \u653b\u6483\u95a2\u6570\nfn attack(attacker: &amp;Sorcerer, target: &amp;mut Sorcerer, technique_name: &amp;str) {\n    let damage = calculate_technique_damage(&amp;attacker, technique_name);\n    target.health = (target.health - damage).max(0);\n\n    println!(\\\"{} \u304c {} \u3067 {} \u3092\u653b\u6483\uff01\\\",\n             attacker.name, technique_name, target.name);\n    println!(\\\"{}\u30c0\u30e1\u30fc\u30b8\uff01{}\u306e\u6b8b\u308aHP: {}\\\",\n             damage, target.name, target.health);\n}\n\n// \u8853\u5f0f\u30c0\u30e1\u30fc\u30b8\u8a08\u7b97\nfn calculate_technique_damage(sorcerer: &amp;Sorcerer, technique: &amp;str) -&gt; i32 {\n    let base_damage = match technique {\n        \\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\" =&gt; sorcerer.power,\n        \\\"\u8853\u5f0f\u53cd\u8ee2\u300e\u8d6b\u300f\\\" =&gt; (sorcerer.power as f64 * 1.5) as i32,\n        \\\"\u865a\u5f0f\u300e\u8308\u300f\\\" =&gt; sorcerer.power * 2,\n        \\\"\u7121\u4e0b\u9650\u546a\u8853\u300e\u7d2b\u300f\\\" =&gt; sorcerer.power * 10,\n        _ =&gt; sorcerer.power / 2,\n    };\n\n    // \u30e9\u30f3\u30c0\u30e0\u8981\u7d20\uff08\u7c21\u6613\u7248\uff09\n    let variation = (base_damage as f64 * 0.1) as i32;\n    base_damage + variation\n}\n\n// \u6226\u95d8\u7d42\u4e86\u5224\u5b9a\nfn is_battle_over(participants: &amp;[Sorcerer]) -&gt; bool {\n    participants.iter().any(|s| s.health &lt;= 0)\n}\n\n// \u751f\u5b58\u8005\u767a\u8868\nfn announce_winner(participants: &amp;[Sorcerer]) {\n    for sorcerer in participants {\n        if sorcerer.health &gt; 0 {\n            println!(\\\"\u52dd\u8005: {} (\u6b8b\u308aHP: {})\\\", sorcerer.name, sorcerer.health);\n            return;\n        }\n    }\n    println!(\\\"\u5f15\u304d\u5206\u3051\uff01\\\");\n}\n\nfn main() {\n    let mut gojo = Sorcerer::new(\\\"\u4e94\u6761\u609f\\\", 2000);\n    let mut sukuna = Sorcerer::new(\\\"\u4e21\u9762\u5bbf\u513a\\\", 1800);\n\n    println!(\\\"=== \u6700\u5f37\u5bfe\u6c7a\u958b\u59cb\uff01 ===\\\");\n    println!(\\\"{} (HP: {}) vs {} (HP: {})\\\",\n             gojo.name, gojo.health, sukuna.name, sukuna.health);\n\n    // \u6226\u95d8\u30eb\u30fc\u30d7\n    let mut round = 1;\n    loop {\n        println!(\\\"\\\\n--- \u30e9\u30a6\u30f3\u30c9 {} ---\\\", round);\n\n        // \u4e94\u6761\u306e\u653b\u6483\n        if gojo.health &gt; 0 {\n            let technique = if round &gt;= 3 { \\\"\u7121\u4e0b\u9650\u546a\u8853\u300e\u7d2b\u300f\\\" } else { \\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\" };\n            attack(&amp;gojo, &amp;mut sukuna, technique);\n        }\n\n        if is_battle_over(&amp;[gojo.clone(), sukuna.clone()]) {\n            break;\n        }\n\n        // \u5bbf\u513a\u306e\u653b\u6483\n        if sukuna.health &gt; 0 {\n            attack(&amp;sukuna, &amp;mut gojo, \\\"\u89e3\\\");\n        }\n\n        if is_battle_over(&amp;[gojo.clone(), sukuna.clone()]) {\n            break;\n        }\n\n        round += 1;\n        if round &gt; 5 {  // \u7121\u9650\u30eb\u30fc\u30d7\u9632\u6b62\n            break;\n        }\n    }\n\n    println!(\\\"\\\\n=== \u6226\u95d8\u7d42\u4e86 ===\\\");\n    announce_winner(&amp;[gojo, sukuna]);\n}\n\n// \u7c21\u6613\u7684\u306aclone\u5b9f\u88c5\u306e\u305f\u3081\nimpl Clone for Sorcerer {\n    fn clone(&amp;self) -&gt; Self {\n        Sorcerer {\n            name: self.name.clone(),\n            power: self.power,\n            health: self.health,\n        }\n    }\n}\n</code></pre>"},{"location":"chapter01/functions/#_14","title":"\u7df4\u7fd2\u554f\u984c","text":"### \u554f\u984c1: \u546a\u529b\u5909\u63db\u95a2\u6570  \u6574\u6570\u306e\u546a\u529b\u5024\u3092\u53d7\u3051\u53d6\u308a\u3001\u4ee5\u4e0b\u306e\u5909\u63db\u3092\u884c\u3046\u95a2\u6570\u3092\u4f5c\u6210\u305b\u3088\uff1a  - \u5165\u529b\u304c\u8ca0\u306e\u5834\u5408\u306f0\u3092\u8fd4\u3059 - 1000\u4ee5\u4e0b\u306e\u5834\u5408\u306f2\u500d\u3059\u308b - 1000\u3092\u8d85\u3048\u308b\u5834\u5408\u306f\u5e73\u65b9\u6839\u3092\u53d6\u308b\uff08\u6574\u6570\u3067\u8fd4\u3059\uff09   \u89e3\u7b54\u3092\u898b\u308b <pre><code>fn convert_power(power: i32) -&gt; i32 {\n    if power &lt; 0 {\n        0\n    } else if power &lt;= 1000 {\n        power * 2\n    } else {\n        (power as f64).sqrt() as i32\n    }\n}\n\nfn main() {\n    let test_powers = [-100, 500, 1000, 2500, 10000];\n\n    for power in test_powers.iter() {\n        let converted = convert_power(*power);\n        println!(\\\"\u5143\u306e\u546a\u529b: {} -&gt; \u5909\u63db\u5f8c: {}\\\", power, converted);\n    }\n}\n</code></pre>   ### \u554f\u984c2: \u8853\u5f0f\u30b3\u30f3\u30dc\u95a2\u6570  2\u3064\u306e\u8853\u5f0f\u540d\u3092\u53d7\u3051\u53d6\u308a\u3001\u7d44\u307f\u5408\u308f\u305b\u306b\u3088\u3063\u3066\u65b0\u3057\u3044\u6280\u540d\u3068\u30c0\u30e1\u30fc\u30b8\u3092\u8fd4\u3059\u95a2\u6570\u3092\u4f5c\u6210\u305b\u3088\u3002   \u89e3\u7b54\u3092\u898b\u308b <pre><code>fn combo_technique(tech1: &amp;str, tech2: &amp;str) -&gt; (String, i32) {\n    match (tech1, tech2) {\n        (\\\"\u84bc\\\", \\\"\u8d6b\\\") | (\\\"\u8d6b\\\", \\\"\u84bc\\\") =&gt; (String::from(\\\"\u865a\u5f0f\u300e\u8308\u300f\\\"), 3000),\n        (\\\"\u84bc\\\", \\\"\u84bc\\\") =&gt; (String::from(\\\"\u5f37\u5316\u300e\u84bc\u300f\\\"), 1500),\n        (\\\"\u8d6b\\\", \\\"\u8d6b\\\") =&gt; (String::from(\\\"\u5f37\u5316\u300e\u8d6b\u300f\\\"), 2000),\n        (\\\"\u8308\\\", _) | (_, \\\"\u8308\\\") =&gt; (String::from(\\\"\u8d85\u865a\u5f0f\u300e\u8308\u300f\\\"), 5000),\n        _ =&gt; (format!(\\\"{} + {}\\\", tech1, tech2), 800),\n    }\n}\n\nfn main() {\n    let combinations = [\n        (\\\"\u84bc\\\", \\\"\u8d6b\\\"),\n        (\\\"\u84bc\\\", \\\"\u84bc\\\"),\n        (\\\"\u8d6b\\\", \\\"\u8d6b\\\"),\n        (\\\"\u8308\\\", \\\"\u84bc\\\"),\n        (\\\"\u57fa\u672c\\\", \\\"\u57fa\u672c\\\"),\n    ];\n\n    for (tech1, tech2) in combinations.iter() {\n        let (combo_name, damage) = combo_technique(tech1, tech2);\n        println!(\\\"{} + {} = {} (\u30c0\u30e1\u30fc\u30b8: {})\\\",\n                 tech1, tech2, combo_name, damage);\n    }\n}\n</code></pre>"},{"location":"chapter01/functions/#_15","title":"\u307e\u3068\u3081","text":"<p>\u95a2\u6570\u306e\u7fd2\u5f97\u306f\u5b8c\u4e86\u3060\uff01\u91cd\u8981\u306a\u30dd\u30a4\u30f3\u30c8\uff1a</p> <ol> <li>\u95a2\u6570\u5b9a\u7fa9 - <code>fn</code>\u30ad\u30fc\u30ef\u30fc\u30c9\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u578b\u5fc5\u9808</li> <li>\u623b\u308a\u5024 - <code>-&gt;</code> \u3067\u578b\u6307\u5b9a\u3001\u6700\u5f8c\u306e\u5f0f\u304c\u623b\u308a\u5024</li> <li>\u6240\u6709\u6a29 - \u5024\u6e21\u3057\u3001\u53c2\u7167\u6e21\u3057\u3092\u9069\u5207\u306b\u4f7f\u3044\u5206\u3051</li> <li>\u30af\u30ed\u30fc\u30b8\u30e3 - \u7121\u540d\u95a2\u6570\u3001\u74b0\u5883\u3092\u30ad\u30e3\u30d7\u30c1\u30e3</li> <li>\u9ad8\u968e\u95a2\u6570 - \u95a2\u6570\u3092\u5f15\u6570\u306b\u53d6\u308b\u95a2\u6570</li> </ol> <p>\u3053\u308c\u3067\u7b2c1\u7ae0\u300c\u8853\u5f0f\u7fd2\u5f97\u7de8\u300d\u306f\u5b8c\u4e86\u3060\u3002\u57fa\u672c\u7684\u306a\u8853\u5f0f\u306f\u30de\u30b9\u30bf\u30fc\u3067\u304d\u305f\u306a\u3002\u6b21\u306f\u7b2c2\u7ae0\u3067\u6240\u6709\u6a29\u30b7\u30b9\u30c6\u30e0\u3068\u3044\u3046\u3001Rust\u306e\u771f\u306e\u529b\u3092\u5b66\u3093\u3067\u3044\u3053\u3046\u3002</p> <p>\u300c\u95a2\u6570\u306f\u8853\u5f0f\u306e\u57fa\u672c\u3002\u3053\u308c\u3092\u6975\u3081\u308c\u3070\u8907\u96d1\u306a\u546a\u8853\u3082\u7d44\u307f\u7acb\u3066\u3089\u308c\u308b\u300d</p>"},{"location":"chapter01/variables/","title":"\u5909\u6570\u3068\u578b - \u546a\u529b\u306e\u5bb9\u5668","text":""},{"location":"chapter01/variables/#-_1","title":"\u5909\u6570\u5ba3\u8a00 - \u546a\u529b\u3092\u84c4\u3048\u308b\u5668","text":"<p>\u546a\u8853\u5e2b\u306b\u3068\u3063\u3066\u546a\u529b\u3092\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3059\u308b\u306e\u306f\u57fa\u672c\u4e2d\u306e\u57fa\u672c\u3060\u308d\u3046\uff1fRust\u3067\u3082\u540c\u3058\u3060\u3002\u5909\u6570\u306f\u546a\u529b\u3092\u84c4\u3048\u308b\u5668\u306e\u3088\u3046\u306a\u3082\u306e\u3060\u3002</p>"},{"location":"chapter01/variables/#_1","title":"\u57fa\u672c\u7684\u306a\u5909\u6570\u5ba3\u8a00","text":"<pre><code>fn main() {\n    let power = 1000;  // \u4e0d\u5909\u306a\u5909\u6570\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\uff09\n    println!(\\\"\u4ffa\u306e\u57fa\u672c\u546a\u529b: {}\\\", power);\n\n    // power = 2000;  // \u30a8\u30e9\u30fc\uff01\u4e0d\u5909\u306a\u5909\u6570\u306f\u5909\u66f4\u3067\u304d\u306a\u3044\n}\n</code></pre> <p>\u4e94\u6761\u5148\u751f\u306e\u30e1\u30e2</p> <p>Rust\u306e\u5909\u6570\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067**\u4e0d\u5909\uff08immutable\uff09**\u3060\u3002\u3053\u308c\u306f\u4ffa\u306e\u7121\u4e0b\u9650\u8853\u5f0f\u307f\u305f\u3044\u306b\u3001\u5b89\u5b9a\u3057\u305f\u72b6\u614b\u3092\u4fdd\u3064\u305f\u3081\u3060\u3002 \u5909\u66f4\u3057\u305f\u3044\u5834\u5408\u306f\u660e\u793a\u7684\u306b<code>mut</code>\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u4f7f\u3046\u3002</p>"},{"location":"chapter01/variables/#_2","title":"\u53ef\u5909\u306a\u5909\u6570","text":"<pre><code>fn main() {\n    let mut power = 1000;  // \u53ef\u5909\u306a\u5909\u6570\n    println!(\\\"\u521d\u671f\u546a\u529b: {}\\\", power);\n\n    power = 2000;  // OK\uff01\u53ef\u5909\u3060\u304b\u3089\u5909\u66f4\u3067\u304d\u308b\n    println!(\\\"\u5897\u5f37\u5f8c\u306e\u546a\u529b: {}\\\", power);\n\n    power += 1000;  // \u3055\u3089\u306b\u5897\u52a0\n    println!(\\\"\u6700\u7d42\u546a\u529b: {}\\\", power);\n}\n</code></pre>"},{"location":"chapter01/variables/#_3","title":"\u5909\u6570\u306e\u30b7\u30e3\u30c9\u30fc\u30a4\u30f3\u30b0","text":"<pre><code>fn main() {\n    let technique = \\\"\u57fa\u672c\u8853\u5f0f\\\";\n    println!(\\\"\u73fe\u5728\u306e\u6280: {}\\\", technique);\n\n    let technique = \\\"\u4e0a\u7d1a\u8853\u5f0f\\\";  // \u540c\u3058\u540d\u524d\u3067\u65b0\u3057\u3044\u5909\u6570\u3092\u4f5c\u6210\n    println!(\\\"\u9032\u5316\u3057\u305f\u6280: {}\\\", technique);\n\n    let technique = technique.len();  // \u578b\u3082\u5909\u66f4\u53ef\u80fd\n    println!(\\\"\u6280\u540d\u306e\u6587\u5b57\u6570: {}\\\", technique);\n}\n</code></pre> <p>\u30b7\u30e3\u30c9\u30fc\u30a4\u30f3\u30b0\u306e\u5229\u70b9</p> <p>\u30b7\u30e3\u30c9\u30fc\u30a4\u30f3\u30b0\u3092\u4f7f\u3048\u3070\u3001\u540c\u3058\u540d\u524d\u3067\u9055\u3046\u578b\u306e\u5024\u3092\u6271\u3048\u308b\u3002 \u4ffa\u306e\u8853\u5f0f\u3082\u300c\u84bc\u300d\u2192\u300c\u8d6b\u300d\u2192\u300c\u8308\u300d\u3068\u9032\u5316\u3059\u308b\u3088\u3046\u306b\u3001\u5909\u6570\u3082\u6bb5\u968e\u7684\u306b\u9032\u5316\u3055\u305b\u3089\u308c\u308b\u3002</p>"},{"location":"chapter01/variables/#-_2","title":"\u578b\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3 - \u8853\u5f0f\u306e\u8a73\u7d30\u6307\u5b9a","text":"<pre><code>fn main() {\n    // \u660e\u793a\u7684\u306a\u578b\u6307\u5b9a\n    let power_level: i64 = 999_999_999;\n    let technique_name: &amp;str = \\\"\u7121\u4e0b\u9650\u546a\u8853\\\";\n    let is_active: bool = true;\n\n    // \u578b\u63a8\u8ad6\uff08\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u63a8\u8ad6\uff09\n    let enemy_count = 10;        // i32\u3068\u63a8\u8ad6\u3055\u308c\u308b\n    let damage_rate = 99.9;      // f64\u3068\u63a8\u8ad6\u3055\u308c\u308b\n\n    println!(\\\"\u546a\u529b: {}, \u6280\u540d: {}\\\", power_level, technique_name);\n}\n</code></pre>"},{"location":"chapter01/variables/#-_3","title":"\u30b9\u30b3\u30fc\u30d7 - \u8853\u5f0f\u306e\u6709\u52b9\u7bc4\u56f2","text":"<pre><code>fn main() {\n    let outer_power = 1000;  // \u5916\u5074\u306e\u30b9\u30b3\u30fc\u30d7\n\n    {\n        let inner_power = 500;  // \u5185\u5074\u306e\u30b9\u30b3\u30fc\u30d7\n        println!(\\\"\u5185\u5074\u306e\u546a\u529b: {}\\\", inner_power);\n        println!(\\\"\u5916\u5074\u306e\u546a\u529b: {}\\\", outer_power);  // \u5916\u5074\u306e\u5909\u6570\u3082\u4f7f\u3048\u308b\n    }  // inner_power\u306f\u3053\u3053\u3067\u89e3\u653e\u3055\u308c\u308b\n\n    // println!(\\\"{}\\\", inner_power);  // \u30a8\u30e9\u30fc\uff01\u30b9\u30b3\u30fc\u30d7\u5916\n    println!(\\\"\u5916\u5074\u306e\u546a\u529b: {}\\\", outer_power);  // \u307e\u3060\u4f7f\u3048\u308b\n}\n</code></pre>"},{"location":"chapter01/variables/#-_4","title":"\u30bf\u30d7\u30eb - \u8907\u6570\u306e\u5024\u3092\u307e\u3068\u3081\u308b","text":"<pre><code>fn main() {\n    // \u30bf\u30d7\u30eb\u306e\u4f5c\u6210\n    let technique_info = (\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\", 9999, true);\n\n    // \u5206\u89e3\u3057\u3066\u53d6\u5f97\n    let (name, power, is_offensive) = technique_info;\n    println!(\\\"\u6280\u540d: {}, \u5a01\u529b: {}, \u653b\u6483\u6280: {}\\\", name, power, is_offensive);\n\n    // \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3067\u30a2\u30af\u30bb\u30b9\n    println!(\\\"\u6280\u540d: {}\\\", technique_info.0);\n    println!(\\\"\u5a01\u529b: {}\\\", technique_info.1);\n\n    // \u7a7a\u306e\u30bf\u30d7\u30eb\uff08\u30e6\u30cb\u30c3\u30c8\u578b\uff09\n    let unit = ();  // \u5024\u3092\u8fd4\u3055\u306a\u3044\u95a2\u6570\u306e\u623b\u308a\u5024\u578b\n}\n</code></pre>"},{"location":"chapter01/variables/#_4","title":"\u30bf\u30d7\u30eb\u306e\u5b9f\u7528\u4f8b","text":"<pre><code>fn get_technique_stats() -&gt; (String, i32, bool) {\n    (String::from(\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\"), 9999, true)\n}\n\nfn main() {\n    let (technique, power, is_offensive) = get_technique_stats();\n\n    if is_offensive {\n        println!(\\\"{} - \u5a01\u529b: {} (\u653b\u6483\u6280)\\\", technique, power);\n    } else {\n        println!(\\\"{} - \u5a01\u529b: {} (\u9632\u5fa1\u6280)\\\", technique, power);\n    }\n}\n</code></pre>"},{"location":"chapter01/variables/#-_5","title":"\u914d\u5217 - \u540c\u3058\u578b\u306e\u5024\u306e\u96c6\u5408","text":"<pre><code>fn main() {\n    // \u56fa\u5b9a\u9577\u914d\u5217\n    let techniques = [\\\"\u84bc\\\", \\\"\u8d6b\\\", \\\"\u8308\\\"];\n    let power_levels = [1000, 1500, 3000];\n\n    // \u578b\u3068\u9577\u3055\u3092\u660e\u793a\n    let enemy_hp: [i32; 5] = [100, 200, 300, 400, 500];\n\n    // \u540c\u3058\u5024\u3067\u521d\u671f\u5316\n    let damage = [999; 10];  // 999\u304c10\u500b\u306e\u914d\u5217\n\n    // \u8981\u7d20\u3078\u306e\u30a2\u30af\u30bb\u30b9\n    println!(\\\"\u6700\u521d\u306e\u6280: {}\\\", techniques[0]);\n    println!(\\\"\u6700\u5f8c\u306e\u6280: {}\\\", techniques[2]);\n\n    // \u914d\u5217\u306e\u9577\u3055\n    println!(\\\"\u6280\u306e\u6570: {}\\\", techniques.len());\n}\n</code></pre>"},{"location":"chapter01/variables/#_5","title":"\u914d\u5217\u306e\u53cd\u5fa9\u51e6\u7406","text":"<pre><code>fn main() {\n    let techniques = [\\\"\u84bc\\\", \\\"\u8d6b\\\", \\\"\u8308\\\", \\\"\u7d2b\\\"];\n\n    // \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u4ed8\u304d\u30eb\u30fc\u30d7\n    for i in 0..techniques.len() {\n        println!(\\\"\u6280{}: {}\\\", i + 1, techniques[i]);\n    }\n\n    // \u76f4\u63a5\u8981\u7d20\u3092\u30eb\u30fc\u30d7\n    for technique in techniques.iter() {\n        println!(\\\"\u8853\u5f0f: {}\\\", technique);\n    }\n\n    // \u5217\u6319\u4ed8\u304d\u30eb\u30fc\u30d7\n    for (index, technique) in techniques.iter().enumerate() {\n        println!(\\\"{}\u756a\u76ee\u306e\u6280: {}\\\", index + 1, technique);\n    }\n}\n</code></pre>"},{"location":"chapter01/variables/#-_6","title":"\u30d9\u30af\u30bf\u30fc - \u52d5\u7684\u914d\u5217","text":"<pre><code>fn main() {\n    // \u7a7a\u306e\u30d9\u30af\u30bf\u30fc\u4f5c\u6210\n    let mut enemy_list: Vec&lt;String&gt; = Vec::new();\n\n    // \u30de\u30af\u30ed\u3067\u4f5c\u6210\n    let mut power_levels = vec![1000, 1500, 2000];\n\n    // \u8981\u7d20\u306e\u8ffd\u52a0\n    enemy_list.push(String::from(\\\"\u7279\u7d1a\u546a\u970a\\\"));\n    enemy_list.push(String::from(\\\"\u7279\u7d1a\u546a\u970a(\u507d\u590f\u6cb9)\\\"));\n\n    power_levels.push(9999);\n\n    // \u8981\u7d20\u3078\u306e\u30a2\u30af\u30bb\u30b9\n    println!(\\\"\u6700\u521d\u306e\u6575: {}\\\", enemy_list[0]);\n    println!(\\\"\u6700\u5927\u546a\u529b: {}\\\", power_levels[3]);\n\n    // \u5b89\u5168\u306a\u30a2\u30af\u30bb\u30b9\n    match enemy_list.get(1) {\n        Some(enemy) =&gt; println!(\\\"2\u756a\u76ee\u306e\u6575: {}\\\", enemy),\n        None =&gt; println!(\\\"\u6575\u304c\u3044\u306a\u3044\\\"),\n    }\n}\n</code></pre>"},{"location":"chapter01/variables/#_6","title":"\u30d9\u30af\u30bf\u30fc\u306e\u64cd\u4f5c","text":"<pre><code>fn main() {\n    let mut techniques = vec![\\\"\u84bc\\\", \\\"\u8d6b\\\"];\n\n    // \u8981\u7d20\u306e\u8ffd\u52a0\n    techniques.push(\\\"\u8308\\\");\n    techniques.push(\\\"\u7d2b\\\");\n\n    // \u8981\u7d20\u306e\u524a\u9664\n    let last_technique = techniques.pop();  // Option&lt;T&gt;\u3092\u8fd4\u3059\n    match last_technique {\n        Some(tech) =&gt; println!(\\\"\u524a\u9664\u3057\u305f\u6280: {}\\\", tech),\n        None =&gt; println!(\\\"\u6280\u304c\u306a\u3044\\\"),\n    }\n\n    // \u9577\u3055\u3068\u30ad\u30e3\u30d1\u30b7\u30c6\u30a3\n    println!(\\\"\u6280\u306e\u6570: {}\\\", techniques.len());\n    println!(\\\"\u5bb9\u91cf: {}\\\", techniques.capacity());\n\n    // \u5168\u8981\u7d20\u306e\u8868\u793a\n    for technique in &amp;techniques {\n        println!(\\\"\u7fd2\u5f97\u6e08\u307f: {}\\\", technique);\n    }\n}\n</code></pre>"},{"location":"chapter01/variables/#-_7","title":"\u6587\u5b57\u5217\u306e\u8a73\u7d30 - \u546a\u6587\u306e\u6271\u3044","text":""},{"location":"chapter01/variables/#string-vs-str","title":"String vs &amp;str","text":"<pre><code>fn main() {\n    // \u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\uff08&amp;str\uff09\n    let greeting = \\\"\u3084\u3042\u3084\u3042\\\";  // \u9759\u7684\u306a\u6587\u5b57\u5217\n\n    // String\u578b\uff08\u6240\u6709\u6a29\u3042\u308a\uff09\n    let mut technique_name = String::from(\\\"\u8853\u5f0f\u9806\u8ee2\\\");\n    technique_name.push_str(\\\"\u300e\u84bc\u300f\\\");\n\n    // \u5909\u63db\n    let static_str: &amp;str = &amp;technique_name;  // String\u304b\u3089Str\u3078\n    let owned_string: String = greeting.to_string();  // &amp;str\u304b\u3089String\u3078\n\n    println!(\\\"\u6328\u62f6: {}\\\", greeting);\n    println!(\\\"\u6280\u540d: {}\\\", technique_name);\n}\n</code></pre>"},{"location":"chapter01/variables/#_7","title":"\u6587\u5b57\u5217\u306e\u64cd\u4f5c","text":"<pre><code>fn main() {\n    let mut spell = String::from(\\\"\u8853\u5f0f\\\");\n\n    // \u6587\u5b57\u5217\u306e\u7d50\u5408\n    spell.push_str(\\\"\u9806\u8ee2\\\");\n    spell.push('\u300e');\n    spell.push_str(\\\"\u84bc\u300f\\\");\n\n    // format!\u30de\u30af\u30ed\n    let power = 9999;\n    let description = format!(\\\"{}\u306e\u5a01\u529b\u306f{}\\\", spell, power);\n\n    // \u6587\u5b57\u5217\u306e\u5206\u5272\n    let full_name = \\\"\u4e94\u6761\u609f\\\";\n    let parts: Vec&lt;&amp;str&gt; = full_name.split(\\\"\u6761\\\").collect();\n\n    println!(\\\"\u546a\u6587: {}\\\", spell);\n    println!(\\\"\u8aac\u660e: {}\\\", description);\n    println!(\\\"\u540d\u524d\u306e\u5206\u5272: {:?}\\\", parts);\n}\n</code></pre>"},{"location":"chapter01/variables/#-_8","title":"\u578b\u5909\u63db\u3068\u30ad\u30e3\u30b9\u30c8 - \u546a\u529b\u306e\u5909\u63db","text":"<pre><code>fn main() {\n    // \u6570\u5024\u578b\u9593\u306e\u5909\u63db\n    let power_i32: i32 = 1000;\n    let power_i64: i64 = power_i32 as i64;  // \u5b89\u5168\u306a\u62e1\u5927\u5909\u63db\n    let power_u32: u32 = power_i32 as u32;  // \u6ce8\u610f\u304c\u5fc5\u8981\n\n    // \u6587\u5b57\u5217\u304b\u3089\u6570\u5024\n    let power_str = \\\"9999\\\";\n    let power_num: i32 = power_str.parse()\n        .expect(\\\"\u6570\u5024\u5909\u63db\u5931\u6557\\\");\n\n    // \u6570\u5024\u304b\u3089\u6587\u5b57\u5217\n    let level = 99;\n    let level_str = level.to_string();\n\n    // \u3088\u308a\u5b89\u5168\u306a\u5909\u63db\n    let safe_conversion: Result&lt;i32, _&gt; = \\\"1234\\\".parse();\n    match safe_conversion {\n        Ok(num) =&gt; println!(\\\"\u5909\u63db\u6210\u529f: {}\\\", num),\n        Err(e) =&gt; println!(\\\"\u5909\u63db\u5931\u6557: {}\\\", e),\n    }\n\n    println!(\\\"\u5909\u63db\u3055\u308c\u305f\u546a\u529b: {}\\\", power_num);\n}\n</code></pre>"},{"location":"chapter01/variables/#_8","title":"\u7df4\u7fd2\u554f\u984c","text":"### \u554f\u984c1: \u546a\u529b\u8a08\u7b97\u6a5f  3\u3064\u306e\u8853\u5f0f\u306e\u5a01\u529b\u3092\u914d\u5217\u306b\u4fdd\u5b58\u3057\u3001\u5408\u8a08\u5a01\u529b\u3092\u8a08\u7b97\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3051\u3002  <pre><code>fn main() {\n    // \u3053\u3053\u306b\u30b3\u30fc\u30c9\u3092\u66f8\u304f\n}\n</code></pre> \u89e3\u7b54\u3092\u898b\u308b <pre><code>fn main() {\n    let techniques = [1000, 1500, 3000];  // \u84bc\u3001\u8d6b\u3001\u8308\u306e\u5a01\u529b\n    let mut total_power = 0;\n\n    for power in techniques.iter() {\n        total_power += power;\n    }\n\n    println!(\\\"\u5408\u8a08\u5a01\u529b: {}\\\", total_power);\n\n    // \u307e\u305f\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\u306esum()\u3092\u4f7f\u7528\n    let total: i32 = techniques.iter().sum();\n    println!(\\\"\u5408\u8a08\u5a01\u529b(sum\u4f7f\u7528): {}\\\", total);\n}\n</code></pre>   ### \u554f\u984c2: \u6575\u30ea\u30b9\u30c8\u7ba1\u7406  \u30d9\u30af\u30bf\u30fc\u3092\u4f7f\u3063\u3066\u6575\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3057\u3001\u6575\u3092\u8ffd\u52a0\u30fb\u524a\u9664\u3059\u308b\u6a5f\u80fd\u3092\u5b9f\u88c5\u305b\u3088\u3002   \u89e3\u7b54\u3092\u898b\u308b <pre><code>fn main() {\n    let mut enemies = Vec::new();\n\n    // \u6575\u3092\u8ffd\u52a0\n    enemies.push(\\\"\u7279\u7d1a\u546a\u970a\\\");\n    enemies.push(\\\"1\u7d1a\u546a\u970a\\\");\n    enemies.push(\\\"\u546a\u8a5b\u5e2b\\\");\n\n    println!(\\\"\u6575\u30ea\u30b9\u30c8:\\\");\n    for (i, enemy) in enemies.iter().enumerate() {\n        println!(\\\"{}. {}\\\", i + 1, enemy);\n    }\n\n    // \u6700\u5f8c\u306e\u6575\u3092\u5012\u3059\n    if let Some(defeated) = enemies.pop() {\n        println!(\\\"\\n{}\u3092\u5012\u3057\u305f\uff01\\\", defeated);\n    }\n\n    println!(\\\"\\\\n\u6b8b\u308a\u306e\u6575: {} \u4f53\\\", enemies.len());\n}\n</code></pre>"},{"location":"chapter01/variables/#_9","title":"\u307e\u3068\u3081","text":"<p>\u5909\u6570\u3068\u578b\u306e\u57fa\u672c\u306f\u30de\u30b9\u30bf\u30fc\u3067\u304d\u305f\u304b\uff1f\u91cd\u8981\u306a\u30dd\u30a4\u30f3\u30c8\u3092\u5fa9\u7fd2\u3057\u3088\u3046\uff1a</p> <ol> <li>\u4e0d\u5909\u6027\u304c\u30c7\u30d5\u30a9\u30eb\u30c8 - \u5b89\u5168\u6027\u306e\u305f\u3081</li> <li>mut \u3067\u53ef\u5909\u6027\u3092\u660e\u793a - \u5fc5\u8981\u306a\u6642\u3060\u3051</li> <li>\u30b7\u30e3\u30c9\u30fc\u30a4\u30f3\u30b0 - \u540c\u540d\u3067\u65b0\u3057\u3044\u5909\u6570\u4f5c\u6210</li> <li>\u578b\u63a8\u8ad6 - \u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u8ce2\u304f\u63a8\u8ad6</li> <li>\u30bf\u30d7\u30eb - \u8907\u6570\u306e\u5024\u3092\u307e\u3068\u3081\u308b</li> <li>\u914d\u5217 vs \u30d9\u30af\u30bf\u30fc - \u56fa\u5b9a\u9577 vs \u52d5\u7684</li> </ol> <p>\u6b21\u306f\u5236\u5fa1\u69cb\u6587\u306b\u3064\u3044\u3066\u5b66\u307c\u3046\u3002if\u6587\u3001\u30eb\u30fc\u30d7\u3001match\u5f0f...\u3053\u308c\u3089\u306f\u8853\u5f0f\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u4f5c\u308b\u306e\u306b\u5fc5\u9808\u3060\u3002</p> <p>\u300c\u5909\u6570\u306f\u546a\u529b\u306e\u5668\u3002\u5927\u5207\u306b\u6271\u3048\u300d</p>"},{"location":"chapter02/borrowing/","title":"\u501f\u7528\u3068\u53c2\u7167 - \u546a\u529b\u306e\u5171\u6709\u8853","text":""},{"location":"chapter02/borrowing/#-_1","title":"\u501f\u7528\u30b7\u30b9\u30c6\u30e0 - \u529b\u3092\u8cb8\u3057\u4e0e\u3048\u308b\u6280\u8853","text":"<p>\u6240\u6709\u6a29\u306e\u79fb\u52d5\u306f\u5f37\u529b\u3060\u304c\u3001\u3044\u3061\u3044\u3061\u6240\u6709\u6a29\u3092\u624b\u653e\u3059\u306e\u306f\u9762\u5012\u3060\u308d\u3046\uff1f\u305d\u3053\u3067\u767b\u5834\u3059\u308b\u306e\u304c**\u501f\u7528\uff08Borrowing\uff09**\u3060\u3002</p> <p>\u3053\u308c\u306f\u4ffa\u304c\u6559\u3048\u5b50\u306b\u8853\u5f0f\u3092\u6559\u3048\u308b\u6642\u307f\u305f\u3044\u306a\u3082\u306e\u3060\u3002\u4ffa\u306e\u77e5\u8b58\u306f\u624b\u653e\u3055\u305a\u306b\u3001\u5fc5\u8981\u306a\u5206\u3060\u3051\u5171\u6709\u3059\u308b\u3002\u305d\u308c\u304c\u501f\u7528\u306e\u672c\u8cea\u3060\u3002</p> <p>\u4e94\u6761\u5148\u751f\u306e\u89e3\u8aac</p> <p>\u501f\u7528\u306f\u53c2\u7167\uff08Reference\uff09\u3092\u4f7f\u3063\u3066\u5b9f\u73fe\u3055\u308c\u308b\u3002\u30c7\u30fc\u30bf\u306e\u6240\u6709\u6a29\u3092\u79fb\u52d5\u3055\u305b\u305a\u306b\u3001\u305d\u306e\u30c7\u30fc\u30bf\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u65b9\u6cd5\u3060\u3002 <code>&amp;</code>\u8a18\u53f7\u3092\u4f7f\u3063\u3066\u53c2\u7167\u3092\u4f5c\u308a\u3001<code>*</code>\u8a18\u53f7\u3067\u53c2\u7167\u5148\u306e\u5024\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3002</p>"},{"location":"chapter02/borrowing/#-_2","title":"\u4e0d\u5909\u306a\u501f\u7528 - \u8aad\u307f\u53d6\u308a\u5c02\u7528\u306e\u5171\u6709","text":""},{"location":"chapter02/borrowing/#_1","title":"\u57fa\u672c\u7684\u306a\u53c2\u7167","text":"<pre><code>fn main() {\n    let technique = String::from(\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\");\n    let reference = &amp;technique;  // \u53c2\u7167\u3092\u4f5c\u6210\n\n    println!(\\\"\u5143\u306e\u30c7\u30fc\u30bf: {}\\\", technique);    // \u6240\u6709\u8005\u3082\u4f7f\u3048\u308b\n    println!(\\\"\u53c2\u7167\u7d4c\u7531: {}\\\", reference);      // \u53c2\u7167\u3082\u4f7f\u3048\u308b\n    println!(\\\"\u53c2\u7167\u5148: {}\\\", *reference);       // \u30c7\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\n}\n</code></pre>"},{"location":"chapter02/borrowing/#_2","title":"\u95a2\u6570\u3067\u306e\u501f\u7528","text":"<pre><code>fn analyze_technique(technique: &amp;String) -&gt; usize {\n    technique.len()  // \u53c2\u7167\u5148\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\n}\n\nfn display_technique(technique: &amp;String) {\n    println!(\\\"\u6280\u540d: {}\\\", technique);\n}\n\nfn main() {\n    let my_technique = String::from(\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\");\n\n    let length = analyze_technique(&amp;my_technique);  // \u501f\u7528\n    display_technique(&amp;my_technique);               // \u501f\u7528\n\n    println!(\\\"\u6587\u5b57\u6570: {}\\\", length);\n    println!(\\\"\u5143\u306e\u6280: {}\\\", my_technique);  // \u307e\u3060\u4f7f\u3048\u308b\uff01\n}\n</code></pre>"},{"location":"chapter02/borrowing/#_3","title":"\u8907\u6570\u306e\u4e0d\u5909\u53c2\u7167","text":"<pre><code>fn main() {\n    let technique = String::from(\\\"\u7121\u4e0b\u9650\u546a\u8853\\\");\n\n    let ref1 = &amp;technique;\n    let ref2 = &amp;technique;\n    let ref3 = &amp;technique;\n\n    // \u8907\u6570\u306e\u4e0d\u5909\u53c2\u7167\u306f\u540c\u6642\u306b\u5b58\u5728\u3067\u304d\u308b\n    println!(\\\"\u53c2\u71671: {}\\\", ref1);\n    println!(\\\"\u53c2\u71672: {}\\\", ref2);\n    println!(\\\"\u53c2\u71673: {}\\\", ref3);\n    println!(\\\"\u5143\u30c7\u30fc\u30bf: {}\\\", technique);\n}\n</code></pre>"},{"location":"chapter02/borrowing/#-_3","title":"\u53ef\u5909\u306a\u501f\u7528 - \u4fee\u6b63\u53ef\u80fd\u306a\u5171\u6709","text":""},{"location":"chapter02/borrowing/#_4","title":"\u57fa\u672c\u7684\u306a\u53ef\u5909\u53c2\u7167","text":"<pre><code>fn main() {\n    let mut technique = String::from(\\\"\u8853\u5f0f\u9806\u8ee2\\\");\n    let mutable_ref = &amp;mut technique;  // \u53ef\u5909\u53c2\u7167\n\n    mutable_ref.push_str(\\\"\u300e\u84bc\u300f\\\");  // \u53c2\u7167\u7d4c\u7531\u3067\u5909\u66f4\n\n    println!(\\\"\u5909\u66f4\u5f8c: {}\\\", mutable_ref);\n}\n</code></pre>"},{"location":"chapter02/borrowing/#_5","title":"\u95a2\u6570\u3067\u306e\u53ef\u5909\u501f\u7528","text":"<pre><code>fn power_up_technique(technique: &amp;mut String) {\n    technique.push_str(\\\" - \u6700\u5927\u51fa\u529b\\\");\n}\n\nfn clear_technique(technique: &amp;mut String) {\n    technique.clear();\n    technique.push_str(\\\"\u65b0\u3057\u3044\u8853\u5f0f\\\");\n}\n\nfn main() {\n    let mut my_technique = String::from(\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\");\n    println!(\\\"\u5909\u66f4\u524d: {}\\\", my_technique);\n\n    power_up_technique(&amp;mut my_technique);  // \u53ef\u5909\u501f\u7528\n    println!(\\\"\u5f37\u5316\u5f8c: {}\\\", my_technique);\n\n    clear_technique(&amp;mut my_technique);     // \u53ef\u5909\u501f\u7528\n    println!(\\\"\u5909\u66f4\u5f8c: {}\\\", my_technique);\n}\n</code></pre>"},{"location":"chapter02/borrowing/#-_4","title":"\u501f\u7528\u306e\u898f\u5247 - \u546a\u529b\u7ba1\u7406\u306e\u6cd5\u5247","text":""},{"location":"chapter02/borrowing/#1","title":"\u898f\u52471: \u540c\u6642\u306b\u5b58\u5728\u3067\u304d\u308b\u53c2\u7167\u306e\u5236\u9650","text":"<pre><code>fn main() {\n    let mut technique = String::from(\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\");\n\n    // \u30d1\u30bf\u30fc\u30f31: \u8907\u6570\u306e\u4e0d\u5909\u53c2\u7167 - OK\n    let ref1 = &amp;technique;\n    let ref2 = &amp;technique;\n    println!(\\\"{}, {}\\\", ref1, ref2);\n\n    // \u30d1\u30bf\u30fc\u30f32: 1\u3064\u306e\u53ef\u5909\u53c2\u7167 - OK\n    let mut_ref = &amp;mut technique;\n    mut_ref.push_str(\\\" - \u5f37\u5316\\\");\n    println!(\\\"{}\\\", mut_ref);\n\n    // \u30d1\u30bf\u30fc\u30f33: \u4e0d\u5909\u3068\u53ef\u5909\u306e\u6df7\u5728 - \u30a8\u30e9\u30fc\uff01\n    /*\n    let ref3 = &amp;technique;\n    let mut_ref2 = &amp;mut technique;  // \u30a8\u30e9\u30fc\uff01\n    println!(\\\"{}, {}\\\", ref3, mut_ref2);\n    */\n}\n</code></pre>"},{"location":"chapter02/borrowing/#2","title":"\u898f\u52472: \u53c2\u7167\u306e\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0","text":"<pre><code>fn main() {\n    let technique;\n\n    {\n        let temp = String::from(\\\"\u4e00\u6642\u7684\u306a\u8853\u5f0f\\\");\n        // technique = &amp;temp;  // \u30a8\u30e9\u30fc\uff01temp\u306e\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u304c\u77ed\u3044\n    }\n\n    // println!(\\\"{}\\\", technique);  // \u30a8\u30e9\u30fc\uff01\n\n    // \u6b63\u3057\u3044\u4f8b\n    let permanent = String::from(\\\"\u6c38\u7d9a\u7684\u306a\u8853\u5f0f\\\");\n    let valid_ref = &amp;permanent;\n    println!(\\\"{}\\\", valid_ref);  // OK\n}\n</code></pre>"},{"location":"chapter02/borrowing/#-_5","title":"\u30b9\u30e9\u30a4\u30b9 - \u90e8\u5206\u7684\u306a\u501f\u7528","text":""},{"location":"chapter02/borrowing/#_6","title":"\u6587\u5b57\u5217\u30b9\u30e9\u30a4\u30b9","text":"<pre><code>fn main() {\n    let technique = String::from(\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\");\n\n    // \u90e8\u5206\u7684\u306a\u501f\u7528\uff08\u30b9\u30e9\u30a4\u30b9\uff09\n    let technique_type = &amp;technique[0..6];   // \\\"\u8853\u5f0f\u9806\u8ee2\\\"\n    let technique_name = &amp;technique[6..];    // \\\"\u300e\u84bc\u300f\\\"\n    let full_slice = &amp;technique[..];         // \u5168\u4f53\n\n    println!(\\\"\u7a2e\u985e: {}\\\", technique_type);\n    println!(\\\"\u540d\u524d: {}\\\", technique_name);\n    println!(\\\"\u5168\u4f53: {}\\\", full_slice);\n\n    // \u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u306f&amp;str\u578b\n    let literal: &amp;str = \\\"\u8853\u5f0f\u53cd\u8ee2\u300e\u8d6b\u300f\\\";\n    println!(\\\"\u30ea\u30c6\u30e9\u30eb: {}\\\", literal);\n}\n</code></pre>"},{"location":"chapter02/borrowing/#_7","title":"\u95a2\u6570\u3067\u306e\u6587\u5b57\u5217\u30b9\u30e9\u30a4\u30b9","text":"<pre><code>// String \u3068 &amp;str \u306e\u4e21\u65b9\u3092\u53d7\u3051\u53d6\u308c\u308b\nfn analyze_technique_name(name: &amp;str) -&gt; usize {\n    name.len()\n}\n\nfn get_technique_grade(name: &amp;str) -&gt; &amp;str {\n    if name.contains(\\\"\u8308\\\") {\n        \\\"\u7279\u7d1a\\\"\n    } else if name.contains(\\\"\u84bc\\\") || name.contains(\\\"\u8d6b\\\") {\n        \\\"\u4e0a\u7d1a\\\"\n    } else {\n        \\\"\u57fa\u672c\\\"\n    }\n}\n\nfn main() {\n    let owned_string = String::from(\\\"\u865a\u5f0f\u300e\u8308\u300f\\\");\n    let string_literal = \\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\";\n\n    // \u3069\u3061\u3089\u3082\u540c\u3058\u95a2\u6570\u3067\u51e6\u7406\u3067\u304d\u308b\n    println!(\\\"\u6587\u5b57\u65701: {}\\\", analyze_technique_name(&amp;owned_string));\n    println!(\\\"\u6587\u5b57\u65702: {}\\\", analyze_technique_name(string_literal));\n\n    println!(\\\"\u7b49\u7d1a1: {}\\\", get_technique_grade(&amp;owned_string));\n    println!(\\\"\u7b49\u7d1a2: {}\\\", get_technique_grade(string_literal));\n}\n</code></pre>"},{"location":"chapter02/borrowing/#_8","title":"\u914d\u5217\u30b9\u30e9\u30a4\u30b9","text":"<pre><code>fn main() {\n    let powers = [1000, 1500, 2000, 3000, 9999];\n\n    let weak_powers = &amp;powers[0..2];    // [1000, 1500]\n    let strong_powers = &amp;powers[3..];   // [3000, 9999]\n    let all_powers = &amp;powers[..];       // \u5168\u4f53\n\n    println!(\\\"\u5f31\u3044\u6280: {:?}\\\", weak_powers);\n    println!(\\\"\u5f37\u3044\u6280: {:?}\\\", strong_powers);\n\n    // \u30b9\u30e9\u30a4\u30b9\u3092\u64cd\u4f5c\u3059\u308b\u95a2\u6570\n    let max_power = find_max_power(strong_powers);\n    println!(\\\"\u6700\u5927\u5a01\u529b: {}\\\", max_power);\n}\n\nfn find_max_power(powers: &amp;[i32]) -&gt; i32 {\n    let mut max = 0;\n    for &amp;power in powers {\n        if power &gt; max {\n            max = power;\n        }\n    }\n    max\n}\n</code></pre>"},{"location":"chapter02/borrowing/#-_6","title":"\u5b9f\u8df5\u4f8b - \u546a\u8853\u5e2b\u6226\u95d8\u30ed\u30b0\u30b7\u30b9\u30c6\u30e0","text":"<pre><code>struct BattleLog {\n    entries: Vec&lt;String&gt;,\n}\n\nimpl BattleLog {\n    fn new() -&gt; Self {\n        BattleLog {\n            entries: Vec::new(),\n        }\n    }\n\n    // \u4e0d\u5909\u501f\u7528\u3067\u30ed\u30b0\u3092\u8ffd\u52a0\n    fn add_entry(&amp;mut self, message: &amp;str) {\n        self.entries.push(String::from(message));\n    }\n\n    // \u4e0d\u5909\u501f\u7528\u3067\u30ed\u30b0\u3092\u53d6\u5f97\n    fn get_entry(&amp;self, index: usize) -&gt; Option&lt;&amp;String&gt; {\n        self.entries.get(index)\n    }\n\n    // \u30b9\u30e9\u30a4\u30b9\u3067\u30ed\u30b0\u306e\u4e00\u90e8\u3092\u53d6\u5f97\n    fn get_recent_entries(&amp;self, count: usize) -&gt; &amp;[String] {\n        let start = self.entries.len().saturating_sub(count);\n        &amp;self.entries[start..]\n    }\n\n    // \u4e0d\u5909\u501f\u7528\u3067\u30ed\u30b0\u3092\u691c\u7d22\n    fn find_entries_containing(&amp;self, keyword: &amp;str) -&gt; Vec&lt;&amp;String&gt; {\n        self.entries.iter()\n            .filter(|entry| entry.contains(keyword))\n            .collect()\n    }\n\n    // \u53ef\u5909\u501f\u7528\u3067\u30ed\u30b0\u3092\u7de8\u96c6\n    fn edit_entry(&amp;mut self, index: usize, new_message: &amp;str) -&gt; bool {\n        if let Some(entry) = self.entries.get_mut(index) {\n            *entry = String::from(new_message);\n            true\n        } else {\n            false\n        }\n    }\n\n    // \u4e0d\u5909\u501f\u7528\u3067\u30ec\u30dd\u30fc\u30c8\u751f\u6210\n    fn generate_report(&amp;self) -&gt; String {\n        format!(\\\"\u6226\u95d8\u30ed\u30b0: {} \u4ef6\u306e\u30a8\u30f3\u30c8\u30ea\\\", self.entries.len())\n    }\n}\n\n// \u546a\u8853\u5e2b\u69cb\u9020\u4f53\nstruct Sorcerer {\n    name: String,\n    power: i32,\n}\n\nimpl Sorcerer {\n    fn new(name: &amp;str, power: i32) -&gt; Self {\n        Sorcerer {\n            name: String::from(name),\n            power,\n        }\n    }\n\n    // \u4e0d\u5909\u501f\u7528\u3067\u653b\u6483\n    fn attack(&amp;self, target: &amp;Sorcerer, log: &amp;mut BattleLog) -&gt; i32 {\n        let damage = self.power / 10;\n        let message = format!(\\\"{} \u304c {} \u3092\u653b\u6483\uff01 {} \u30c0\u30e1\u30fc\u30b8\\\",\n                             self.name, target.name, damage);\n        log.add_entry(&amp;message);\n        damage\n    }\n\n    // \u53ef\u5909\u501f\u7528\u3067\u30c0\u30e1\u30fc\u30b8\u3092\u53d7\u3051\u308b\n    fn take_damage(&amp;mut self, damage: i32, log: &amp;mut BattleLog) {\n        self.power = (self.power - damage).max(0);\n        let message = format!(\\\"{} \u304c {} \u30c0\u30e1\u30fc\u30b8\u3092\u53d7\u3051\u305f\uff08\u6b8b\u308a\u546a\u529b: {}\uff09\\\",\n                             self.name, damage, self.power);\n        log.add_entry(&amp;message);\n    }\n}\n\nfn simulate_battle(fighter1: &amp;mut Sorcerer, fighter2: &amp;mut Sorcerer) -&gt; BattleLog {\n    let mut log = BattleLog::new();\n\n    log.add_entry(&amp;format!(\\\"\u6226\u95d8\u958b\u59cb: {} vs {}\\\", fighter1.name, fighter2.name));\n\n    let mut round = 1;\n    while fighter1.power &gt; 0 &amp;&amp; fighter2.power &gt; 0 &amp;&amp; round &lt;= 5 {\n        log.add_entry(&amp;format!(\\\"--- \u30e9\u30a6\u30f3\u30c9 {} ---\\\", round));\n\n        // 1\u756a\u624b\u306e\u653b\u6483\n        let damage1 = fighter1.attack(fighter2, &amp;mut log);\n        fighter2.take_damage(damage1, &amp;mut log);\n\n        if fighter2.power &lt;= 0 {\n            log.add_entry(&amp;format!(\\\"{} \u306e\u52dd\u5229\uff01\\\", fighter1.name));\n            break;\n        }\n\n        // 2\u756a\u624b\u306e\u653b\u6483\n        let damage2 = fighter2.attack(fighter1, &amp;mut log);\n        fighter1.take_damage(damage2, &amp;mut log);\n\n        if fighter1.power &lt;= 0 {\n            log.add_entry(&amp;format!(\\\"{} \u306e\u52dd\u5229\uff01\\\", fighter2.name));\n            break;\n        }\n\n        round += 1;\n    }\n\n    if round &gt; 5 {\n        log.add_entry(\\\"\u6642\u9593\u5207\u308c\u3067\u5f15\u304d\u5206\u3051\\\");\n    }\n\n    log\n}\n\nfn main() {\n    let mut gojo = Sorcerer::new(\\\"\u4e94\u6761\u609f\\\", 2000);\n    let mut sukuna = Sorcerer::new(\\\"\u4e21\u9762\u5bbf\u513a\\\", 1800);\n\n    println!(\\\"=== \u6700\u5f37\u5bfe\u6c7a\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3 ===\\\");\n\n    let battle_log = simulate_battle(&amp;mut gojo, &amp;mut sukuna);\n\n    // \u30ed\u30b0\u306e\u8868\u793a\n    println!(\\\"\\\\n{}\\\", battle_log.generate_report());\n    println!(\\\"\\\\n=== \u6226\u95d8\u30ed\u30b0 ===\\\");\n\n    // \u6700\u8fd1\u306e\u30a8\u30f3\u30c8\u30ea\u3092\u8868\u793a\n    let recent = battle_log.get_recent_entries(10);\n    for (i, entry) in recent.iter().enumerate() {\n        println!(\\\"{}: {}\\\", i + 1, entry);\n    }\n\n    // \u653b\u6483\u30ed\u30b0\u3060\u3051\u3092\u62bd\u51fa\n    println!(\\\"\\\\n=== \u653b\u6483\u30ed\u30b0 ===\\\");\n    let attack_logs = battle_log.find_entries_containing(\\\"\u653b\u6483\\\");\n    for log in attack_logs {\n        println!(\\\"{}\\\", log);\n    }\n}\n</code></pre>"},{"location":"chapter02/borrowing/#-_7","title":"\u501f\u7528\u30c1\u30a7\u30c3\u30ab\u30fc - \u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u5b88\u8b77\u8005","text":"<p>Rust\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u306f\u501f\u7528\u30c1\u30a7\u30c3\u30ab\u30fc\uff08Borrow Checker\uff09\u3068\u3044\u3046\u5f37\u529b\u306a\u5b88\u8b77\u8005\u304c\u3044\u308b\uff1a</p> <pre><code>fn main() {\n    let mut data = vec![1, 2, 3, 4, 5];\n\n    // \u4e0d\u5909\u53c2\u7167\u3092\u4f5c\u6210\n    let first = &amp;data[0];\n\n    // \u53ef\u5909\u53c2\u7167\u3092\u4f5c\u308d\u3046\u3068\u3059\u308b\u3068\u30a8\u30e9\u30fc\n    // data.push(6);  // \u30a8\u30e9\u30fc\uff01\u4e0d\u5909\u53c2\u7167\u304c\u751f\u304d\u3066\u3044\u308b\u9593\u306f\u5909\u66f4\u4e0d\u53ef\n\n    println!(\\\"\u6700\u521d\u306e\u8981\u7d20: {}\\\", first);\n    // \u3053\u3053\u3067first\u306e\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u7d42\u4e86\n\n    // \u4eca\u5ea6\u306f\u5909\u66f4\u3067\u304d\u308b\n    data.push(6);\n    println!(\\\"\u30c7\u30fc\u30bf: {:?}\\\", data);\n}\n</code></pre>"},{"location":"chapter02/borrowing/#_9","title":"\u7df4\u7fd2\u554f\u984c","text":"### \u554f\u984c1: \u6587\u5b57\u5217\u5206\u6790\u95a2\u6570  \u6587\u5b57\u5217\u30b9\u30e9\u30a4\u30b9\u3092\u53d7\u3051\u53d6\u3063\u3066\u3001\u4ee5\u4e0b\u306e\u60c5\u5831\u3092\u8fd4\u3059\u95a2\u6570\u3092\u4f5c\u6210\u305b\u3088\uff1a  - \u6587\u5b57\u6570 - \u300c\u8853\u5f0f\u300d\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u304b - \u6700\u521d\u306e\u5358\u8a9e   \u89e3\u7b54\u3092\u898b\u308b <pre><code>fn analyze_text(text: &amp;str) -&gt; (usize, bool, &amp;str) {\n    let char_count = text.chars().count();\n    let contains_jutsu = text.contains(\\\"\u8853\u5f0f\\\");\n\n    let first_word = text.split_whitespace()\n        .next()\n        .unwrap_or(\\\"\\\");\n\n    (char_count, contains_jutsu, first_word)\n}\n\nfn main() {\n    let technique1 = \\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\";\n    let technique2 = String::from(\\\"\u7121\u4e0b\u9650 \u546a\u8853 \u9818\u57df\u5c55\u958b\\\");\n\n    let (count1, has_jutsu1, first1) = analyze_text(technique1);\n    println!(\\\"{}: \u6587\u5b57\u6570{}, \u8853\u5f0f\u542b\u3080{}, \u6700\u521d\u306e\u5358\u8a9e'{}'\\\",\n             technique1, count1, has_jutsu1, first1);\n\n    let (count2, has_jutsu2, first2) = analyze_text(&amp;technique2);\n    println!(\\\"{}: \u6587\u5b57\u6570{}, \u8853\u5f0f\u542b\u3080{}, \u6700\u521d\u306e\u5358\u8a9e'{}'\\\",\n             technique2, count2, has_jutsu2, first2);\n}\n</code></pre>   ### \u554f\u984c2: \u30d9\u30af\u30bf\u30fc\u64cd\u4f5c\u30b7\u30b9\u30c6\u30e0  \u6574\u6570\u306e\u30d9\u30af\u30bf\u30fc\u3092\u501f\u7528\u3057\u3066\u3001\u4ee5\u4e0b\u306e\u64cd\u4f5c\u3092\u884c\u3046\u95a2\u6570\u7fa4\u3092\u4f5c\u6210\u305b\u3088\uff1a  - \u5408\u8a08\u5024\u3092\u8a08\u7b97\uff08\u4e0d\u5909\u501f\u7528\uff09 - \u6700\u5927\u5024\u3092\u898b\u3064\u3051\u308b\uff08\u4e0d\u5909\u501f\u7528\uff09 - \u5168\u8981\u7d20\u30922\u500d\u306b\u3059\u308b\uff08\u53ef\u5909\u501f\u7528\uff09   \u89e3\u7b54\u3092\u898b\u308b <pre><code>// \u4e0d\u5909\u501f\u7528\u3067\u5408\u8a08\u8a08\u7b97\nfn calculate_sum(numbers: &amp;[i32]) -&gt; i32 {\n    numbers.iter().sum()\n}\n\n// \u4e0d\u5909\u501f\u7528\u3067\u6700\u5927\u5024\u691c\u7d22\nfn find_maximum(numbers: &amp;[i32]) -&gt; Option&lt;i32&gt; {\n    numbers.iter().max().copied()\n}\n\n// \u53ef\u5909\u501f\u7528\u3067\u5168\u8981\u7d20\u30922\u500d\nfn double_all(numbers: &amp;mut [i32]) {\n    for num in numbers.iter_mut() {\n        *num *= 2;\n    }\n}\n\n// \u4e0d\u5909\u501f\u7528\u3067\u30b9\u30e9\u30a4\u30b9\u8868\u793a\nfn display_slice(numbers: &amp;[i32], label: &amp;str) {\n    println!(\\\"{}: {:?}\\\", label, numbers);\n}\n\nfn main() {\n    let mut power_levels = vec![1000, 1500, 800, 2000, 1200];\n\n    display_slice(&amp;power_levels, \\\"\u521d\u671f\u72b6\u614b\\\");\n\n    let total = calculate_sum(&amp;power_levels);\n    println!(\\\"\u5408\u8a08\u546a\u529b: {}\\\", total);\n\n    if let Some(max) = find_maximum(&amp;power_levels) {\n        println!(\\\"\u6700\u5927\u546a\u529b: {}\\\", max);\n    }\n\n    // \u90e8\u5206\u7684\u306a\u64cd\u4f5c\n    let middle_slice = &amp;mut power_levels[1..4];\n    double_all(middle_slice);\n\n    display_slice(&amp;power_levels, \\\"\u4e00\u90e8\u5f37\u5316\u5f8c\\\");\n\n    // \u5168\u4f53\u3092\u5f37\u5316\n    double_all(&amp;mut power_levels);\n    display_slice(&amp;power_levels, \\\"\u5168\u4f53\u5f37\u5316\u5f8c\\\");\n\n    let final_total = calculate_sum(&amp;power_levels);\n    println!(\\\"\u6700\u7d42\u5408\u8a08\u546a\u529b: {}\\\", final_total);\n}\n</code></pre>"},{"location":"chapter02/borrowing/#_10","title":"\u307e\u3068\u3081","text":"<p>\u501f\u7528\u30b7\u30b9\u30c6\u30e0\u306e\u7fd2\u5f97\u306f\u5b8c\u4e86\u3060\uff01\u91cd\u8981\u306a\u30dd\u30a4\u30f3\u30c8\uff1a</p> <ol> <li>\u4e0d\u5909\u501f\u7528\uff08&amp;T\uff09 - \u8aad\u307f\u53d6\u308a\u5c02\u7528\u3001\u8907\u6570\u540c\u6642\u53ef\u80fd</li> <li>\u53ef\u5909\u501f\u7528\uff08&amp;mut T\uff09 - \u8aad\u307f\u66f8\u304d\u53ef\u80fd\u3001\u540c\u6642\u306b1\u3064\u3060\u3051</li> <li>\u30b9\u30e9\u30a4\u30b9 - \u90e8\u5206\u7684\u306a\u30c7\u30fc\u30bf\u3078\u306e\u53c2\u7167</li> <li>\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0 - \u53c2\u7167\u306e\u6709\u52b9\u671f\u9593</li> <li>\u501f\u7528\u30c1\u30a7\u30c3\u30ab\u30fc - \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306e\u5b89\u5168\u6027\u4fdd\u8a3c</li> </ol> <p>\u3053\u308c\u3067\u6240\u6709\u6a29\u3092\u624b\u653e\u3059\u3053\u3068\u306a\u304f\u3001\u30c7\u30fc\u30bf\u3092\u5b89\u5168\u306b\u5171\u6709\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\u307e\u3055\u306b\u4ffa\u306e\u7121\u4e0b\u9650\u8853\u5f0f\u306e\u3088\u3046\u306b\u3001\u5b8c\u74a7\u306a\u5236\u5fa1\u3060\u3002</p> <p>\u6b21\u306f\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u5b66\u307c\u3046\u3002\u53c2\u7167\u304c\u3044\u3064\u307e\u3067\u6709\u52b9\u306a\u306e\u304b\u3092\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u6280\u8853\u3060\u3002</p> <p>\u300c\u501f\u7528\u3092\u6975\u3081\u308c\u3070\u3001\u6240\u6709\u6a29\u3068\u5171\u6709\u306e\u5b8c\u74a7\u306a\u30d0\u30e9\u30f3\u30b9\u304c\u53d6\u308c\u308b\u300d</p>"},{"location":"chapter02/exercises/","title":"\u7b2c2\u7ae0 \u7df4\u7fd2\u554f\u984c - \u546a\u529b\u64cd\u4f5c\u306e\u8a66\u7df4","text":""},{"location":"chapter02/exercises/#_1","title":"\u6240\u6709\u6a29\u30fb\u501f\u7528\u30fb\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u306e\u7dcf\u5408\u6f14\u7fd2","text":"<p>\u7b2c2\u7ae0\u3067\u5b66\u3093\u3060\u546a\u529b\u64cd\u4f5c\u7de8\u306e\u5185\u5bb9\u3092\u5b9f\u8df5\u3067\u78ba\u8a8d\u3057\u3088\u3046\u3002\u6240\u6709\u6a29\u3001\u501f\u7528\u3001\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0 - \u3053\u308c\u3089\u306f\u4ffa\u306e\u7121\u4e0b\u9650\u8853\u5f0f\u3068\u540c\u3058\u304f\u3001\u4e00\u5ea6\u30de\u30b9\u30bf\u30fc\u3059\u308c\u3070\u7d76\u5bfe\u7684\u306a\u529b\u306b\u306a\u308b\u3002</p> <p>\u4e94\u6761\u5148\u751f\u304b\u3089\u306e\u30a2\u30c9\u30d0\u30a4\u30b9</p> <p>\u3053\u306e\u7ae0\u306e\u554f\u984c\u306f\u5c11\u3057\u624b\u5f37\u3044\u305e\u3002\u3067\u3082\u5fc3\u914d\u3059\u308b\u306a\u3002\u57fa\u672c\u3092\u7406\u89e3\u3057\u3066\u3044\u308c\u3070\u5fc5\u305a\u89e3\u3051\u308b\u3002 \u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u3088\u304f\u8aad\u3093\u3067\u3001\u4f55\u304c\u554f\u984c\u306a\u306e\u304b\u3092\u7406\u89e3\u3059\u308b\u3053\u3068\u3082\u5927\u5207\u3060\u3002</p>"},{"location":"chapter02/exercises/#-","title":"\u521d\u7d1a\u7de8 - \u6240\u6709\u6a29\u306e\u57fa\u672c\u64cd\u4f5c","text":""},{"location":"chapter02/exercises/#1","title":"\u554f\u984c1: \u546a\u529b\u306e\u79fb\u8b72\u30b7\u30b9\u30c6\u30e0","text":"<p>2\u4eba\u306e\u546a\u8853\u5e2b\u9593\u3067\u546a\u529b\u3092\u79fb\u8b72\u3059\u308b\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u6210\u305b\u3088\u3002\u4ee5\u4e0b\u306e\u4ed5\u69d8\u3092\u6e80\u305f\u3059\u3053\u3068\uff1a</p> <ul> <li>\u546a\u8853\u5e2b\u306f\u540d\u524d\u3068\u546a\u529b\u5024\u3092\u6301\u3064</li> <li>\u546a\u529b\u3092\u4ed6\u306e\u546a\u8853\u5e2b\u306b\u79fb\u8b72\u3059\u308b\u95a2\u6570</li> <li>\u79fb\u8b72\u5f8c\u306f\u5143\u306e\u546a\u8853\u5e2b\u306e\u546a\u529b\u306f0\u306b\u306a\u308b</li> </ul> <pre><code>struct Sorcerer {\n    name: String,\n    power: i32,\n}\n\n// \u3053\u3053\u306b\u5b9f\u88c5\nfn main() {\n    let mut gojo = Sorcerer {\n        name: String::from(\\\"\u4e94\u6761\u609f\\\"),\n        power: 2000,\n    };\n\n    let mut yuji = Sorcerer {\n        name: String::from(\\\"\u864e\u6756\u60a0\u4ec1\\\"),\n        power: 800,\n    };\n\n    // \u546a\u529b\u79fb\u8b72\u306e\u5b9f\u88c5\n}\n</code></pre> \u89e3\u7b54\u3092\u898b\u308b <pre><code>struct Sorcerer {\n    name: String,\n    power: i32,\n}\n\nimpl Sorcerer {\n    fn transfer_power(&amp;mut self, amount: i32, recipient: &amp;mut Sorcerer) -&gt; bool {\n        if self.power &gt;= amount {\n            self.power -= amount;\n            recipient.power += amount;\n            println!(\\\"{} \u304c {} \u306b {}\u306e\u546a\u529b\u3092\u79fb\u8b72\\\",\n                     self.name, recipient.name, amount);\n            true\n        } else {\n            println!(\\\"{} \u306e\u546a\u529b\u304c\u4e0d\u8db3\u3057\u3066\u3044\u307e\u3059\\\", self.name);\n            false\n        }\n    }\n\n    fn display_status(&amp;self) {\n        println!(\\\"{}: \u546a\u529b {}\\\", self.name, self.power);\n    }\n}\n\nfn main() {\n    let mut gojo = Sorcerer {\n        name: String::from(\\\"\u4e94\u6761\u609f\\\"),\n        power: 2000,\n    };\n\n    let mut yuji = Sorcerer {\n        name: String::from(\\\"\u864e\u6756\u60a0\u4ec1\\\"),\n        power: 800,\n    };\n\n    println!(\\\"=== \u79fb\u8b72\u524d ===\\\");\n    gojo.display_status();\n    yuji.display_status();\n\n    gojo.transfer_power(500, &amp;mut yuji);\n\n    println!(\\\"\\\\n=== \u79fb\u8b72\u5f8c ===\\\");\n    gojo.display_status();\n    yuji.display_status();\n}\n</code></pre>"},{"location":"chapter02/exercises/#2","title":"\u554f\u984c2: \u8853\u5f0f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u7ba1\u7406","text":"<p>\u8853\u5f0f\u540d\u306e\u30d9\u30af\u30bf\u30fc\u3092\u7ba1\u7406\u3059\u308b\u30b7\u30b9\u30c6\u30e0\u3067\u3001\u6240\u6709\u6a29\u306e\u79fb\u52d5\u3092\u6b63\u3057\u304f\u51e6\u7406\u305b\u3088\u3002</p> <pre><code>fn process_techniques(techniques: Vec&lt;String&gt;) -&gt; Vec&lt;String&gt; {\n    // \u5404\u8853\u5f0f\u306b \\\"\u7fd2\u5f97\u6e08\u307f:\\\" \u3092\u524d\u7f6e\n    // \u51e6\u7406\u5f8c\u306e\u30d9\u30af\u30bf\u30fc\u3092\u8fd4\u3059\n}\n\nfn count_powerful_techniques(techniques: &amp;Vec&lt;String&gt;) -&gt; usize {\n    // \\\"\u8853\u5f0f\\\"\u3092\u542b\u3080\u6280\u306e\u6570\u3092\u6570\u3048\u308b\n}\n\nfn main() {\n    let techniques = vec![\n        String::from(\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\"),\n        String::from(\\\"\u57fa\u672c\u653b\u6483\\\"),\n        String::from(\\\"\u8853\u5f0f\u53cd\u8ee2\u300e\u8d6b\u300f\\\"),\n        String::from(\\\"\u9632\u5fa1\u6280\\\"),\n    ];\n\n    // \u3053\u3053\u306b\u5b9f\u88c5\n}\n</code></pre> \u89e3\u7b54\u3092\u898b\u308b <pre><code>fn process_techniques(techniques: Vec&lt;String&gt;) -&gt; Vec&lt;String&gt; {\n    techniques.into_iter()\n        .map(|tech| format!(\\\"\u7fd2\u5f97\u6e08\u307f: {}\\\", tech))\n        .collect()\n}\n\nfn count_powerful_techniques(techniques: &amp;Vec&lt;String&gt;) -&gt; usize {\n    techniques.iter()\n        .filter(|tech| tech.contains(\\\"\u8853\u5f0f\\\"))\n        .count()\n}\n\nfn main() {\n    let techniques = vec![\n        String::from(\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\"),\n        String::from(\\\"\u57fa\u672c\u653b\u6483\\\"),\n        String::from(\\\"\u8853\u5f0f\u53cd\u8ee2\u300e\u8d6b\u300f\\\"),\n        String::from(\\\"\u9632\u5fa1\u6280\\\"),\n    ];\n\n    println!(\\\"\u5143\u306e\u6280: {:?}\\\", techniques);\n\n    // \u501f\u7528\u3067\u6280\u306e\u6570\u3092\u6570\u3048\u308b\n    let powerful_count = count_powerful_techniques(&amp;techniques);\n    println!(\\\"\u8853\u5f0f\u306e\u6570: {}\\\", powerful_count);\n\n    // \u6240\u6709\u6a29\u3092\u79fb\u52d5\u3057\u3066\u51e6\u7406\n    let processed = process_techniques(techniques);\n    println!(\\\"\u51e6\u7406\u5f8c: {:?}\\\", processed);\n\n    // techniques \u306f\u3082\u3046\u4f7f\u3048\u306a\u3044\uff08\u6240\u6709\u6a29\u304c\u79fb\u52d5\u3057\u305f\uff09\n    // println!(\\\"{:?}\\\", techniques); // \u30a8\u30e9\u30fc\uff01\n}\n</code></pre>"},{"location":"chapter02/exercises/#-_1","title":"\u4e2d\u7d1a\u7de8 - \u501f\u7528\u3068\u53c2\u7167\u306e\u6d3b\u7528","text":""},{"location":"chapter02/exercises/#3","title":"\u554f\u984c3: \u6226\u95d8\u30ed\u30b0\u5206\u6790\u30b7\u30b9\u30c6\u30e0","text":"<p>\u6226\u95d8\u30ed\u30b0\u3092\u5206\u6790\u3057\u3066\u7d71\u8a08\u60c5\u5831\u3092\u63d0\u4f9b\u3059\u308b\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u6210\u305b\u3088\u3002\u501f\u7528\u3092\u9069\u5207\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u3002</p> <pre><code>struct BattleLog {\n    entries: Vec&lt;String&gt;,\n}\n\nimpl BattleLog {\n    fn new() -&gt; Self {\n        BattleLog {\n            entries: Vec::new(),\n        }\n    }\n\n    fn add_entry(&amp;mut self, entry: String) {\n        self.entries.push(entry);\n    }\n}\n\n// \u4ee5\u4e0b\u306e\u95a2\u6570\u3092\u5b9f\u88c5\u305b\u3088\uff1a\n// 1. \u30ed\u30b0\u306e\u7dcf\u6570\u3092\u8fd4\u3059\u95a2\u6570\uff08\u4e0d\u5909\u501f\u7528\uff09\n// 2. \u7279\u5b9a\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u542b\u3080\u30a8\u30f3\u30c8\u30ea\u6570\u3092\u8fd4\u3059\u95a2\u6570\uff08\u4e0d\u5909\u501f\u7528\uff09\n// 3. \u6700\u5f8c\u306eN\u4ef6\u306e\u30a8\u30f3\u30c8\u30ea\u3092\u8fd4\u3059\u95a2\u6570\uff08\u30b9\u30e9\u30a4\u30b9\uff09\n// 4. \u3059\u3079\u3066\u306e\u30a8\u30f3\u30c8\u30ea\u306b\u63a5\u982d\u8f9e\u3092\u8ffd\u52a0\u3059\u308b\u95a2\u6570\uff08\u53ef\u5909\u501f\u7528\uff09\n\nfn main() {\n    let mut log = BattleLog::new();\n    log.add_entry(String::from(\\\"\u4e94\u6761\u609f\u304c\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\u3092\u4f7f\u7528\\\"));\n    log.add_entry(String::from(\\\"\u5bbf\u513a\u304c\u89e3\u3092\u767a\u52d5\\\"));\n    log.add_entry(String::from(\\\"\u4e94\u6761\u609f\u304c\u8853\u5f0f\u53cd\u8ee2\u300e\u8d6b\u300f\u3092\u4f7f\u7528\\\"));\n\n    // \u30c6\u30b9\u30c8\u7528\u30b3\u30fc\u30c9\n}\n</code></pre> \u89e3\u7b54\u3092\u898b\u308b <pre><code>struct BattleLog {\n    entries: Vec&lt;String&gt;,\n}\n\nimpl BattleLog {\n    fn new() -&gt; Self {\n        BattleLog {\n            entries: Vec::new(),\n        }\n    }\n\n    fn add_entry(&amp;mut self, entry: String) {\n        self.entries.push(entry);\n    }\n}\n\n// 1. \u30ed\u30b0\u306e\u7dcf\u6570\u3092\u8fd4\u3059\uff08\u4e0d\u5909\u501f\u7528\uff09\nfn count_entries(log: &amp;BattleLog) -&gt; usize {\n    log.entries.len()\n}\n\n// 2. \u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u542b\u3080\u30a8\u30f3\u30c8\u30ea\u6570\uff08\u4e0d\u5909\u501f\u7528\uff09\nfn count_entries_with_keyword(log: &amp;BattleLog, keyword: &amp;str) -&gt; usize {\n    log.entries.iter()\n        .filter(|entry| entry.contains(keyword))\n        .count()\n}\n\n// 3. \u6700\u5f8c\u306eN\u4ef6\u306e\u30a8\u30f3\u30c8\u30ea\uff08\u30b9\u30e9\u30a4\u30b9\uff09\nfn get_recent_entries(log: &amp;BattleLog, count: usize) -&gt; &amp;[String] {\n    let start = log.entries.len().saturating_sub(count);\n    &amp;log.entries[start..]\n}\n\n// 4. \u3059\u3079\u3066\u306e\u30a8\u30f3\u30c8\u30ea\u306b\u63a5\u982d\u8f9e\u3092\u8ffd\u52a0\uff08\u53ef\u5909\u501f\u7528\uff09\nfn add_prefix_to_all(log: &amp;mut BattleLog, prefix: &amp;str) {\n    for entry in &amp;mut log.entries {\n        *entry = format!(\\\"{}: {}\\\", prefix, entry);\n    }\n}\n\n// 5. \u7279\u5b9a\u306e\u6761\u4ef6\u306e\u30a8\u30f3\u30c8\u30ea\u3092\u53d6\u5f97\uff08\u4e0d\u5909\u501f\u7528\uff09\nfn find_entries_by_user&lt;'a&gt;(log: &amp;'a BattleLog, user: &amp;str) -&gt; Vec&lt;&amp;'a String&gt; {\n    log.entries.iter()\n        .filter(|entry| entry.contains(user))\n        .collect()\n}\n\nfn main() {\n    let mut log = BattleLog::new();\n    log.add_entry(String::from(\\\"\u4e94\u6761\u609f\u304c\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\u3092\u4f7f\u7528\\\"));\n    log.add_entry(String::from(\\\"\u5bbf\u513a\u304c\u89e3\u3092\u767a\u52d5\\\"));\n    log.add_entry(String::from(\\\"\u4e94\u6761\u609f\u304c\u8853\u5f0f\u53cd\u8ee2\u300e\u8d6b\u300f\u3092\u4f7f\u7528\\\"));\n    log.add_entry(String::from(\\\"\u864e\u6756\u60a0\u4ec1\u304c\u9ed2\u9583\u3092\u767a\u52d5\\\"));\n\n    println!(\\\"=== \u6226\u95d8\u30ed\u30b0\u5206\u6790 ===\\\");\n\n    // \u7d71\u8a08\u60c5\u5831\n    println!(\\\"\u7dcf\u30a8\u30f3\u30c8\u30ea\u6570: {}\\\", count_entries(&amp;log));\n    println!(\\\"\u4e94\u6761\u609f\u306e\u884c\u52d5: {}\u56de\\\", count_entries_with_keyword(&amp;log, \\\"\u4e94\u6761\u609f\\\"));\n    println!(\\\"\u8853\u5f0f\u4f7f\u7528: {}\u56de\\\", count_entries_with_keyword(&amp;log, \\\"\u8853\u5f0f\\\"));\n\n    // \u6700\u8fd1\u306e\u30a8\u30f3\u30c8\u30ea\n    let recent = get_recent_entries(&amp;log, 2);\n    println!(\\\"\\\\n\u6700\u8fd1\u306e2\u4ef6:\\\");\n    for (i, entry) in recent.iter().enumerate() {\n        println!(\\\"  {}. {}\\\", i + 1, entry);\n    }\n\n    // \u4e94\u6761\u609f\u306e\u884c\u52d5\u306e\u307f\n    let gojo_entries = find_entries_by_user(&amp;log, \\\"\u4e94\u6761\u609f\\\");\n    println!(\\\"\\\\n\u4e94\u6761\u609f\u306e\u884c\u52d5:\\\");\n    for entry in gojo_entries {\n        println!(\\\"  - {}\\\", entry);\n    }\n\n    // \u63a5\u982d\u8f9e\u8ffd\u52a0\n    add_prefix_to_all(&amp;mut log, \\\"[\u6226\u95d8\u8a18\u9332]\\\");\n    println!(\\\"\\\\n\u63a5\u982d\u8f9e\u8ffd\u52a0\u5f8c\u306e\u6700\u521d\u306e\u30a8\u30f3\u30c8\u30ea:\\\");\n    if let Some(first) = log.entries.first() {\n        println!(\\\"  {}\\\", first);\n    }\n}\n</code></pre>"},{"location":"chapter02/exercises/#4","title":"\u554f\u984c4: \u6587\u5b57\u5217\u30b9\u30e9\u30a4\u30b9\u64cd\u4f5c","text":"<p>\u6587\u5b57\u5217\u30b9\u30e9\u30a4\u30b9\u3092\u4f7f\u3063\u3066\u8853\u5f0f\u540d\u3092\u89e3\u6790\u3059\u308b\u95a2\u6570\u7fa4\u3092\u4f5c\u6210\u305b\u3088\u3002</p> <pre><code>// \u4ee5\u4e0b\u306e\u95a2\u6570\u3092\u5b9f\u88c5\u305b\u3088\uff1a\n// 1. \u8853\u5f0f\u540d\u304b\u3089\u7a2e\u985e\u3092\u62bd\u51fa\uff08\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\" \u2192 \\\"\u9806\u8ee2\\\"\uff09\n// 2. \u8853\u5f0f\u540d\u304b\u3089\u6280\u540d\u3092\u62bd\u51fa\uff08\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\" \u2192 \\\"\u84bc\\\"\uff09\n// 3. \u8907\u6570\u306e\u8853\u5f0f\u540d\u306e\u4e2d\u304b\u3089\u6700\u3082\u9577\u3044\u3082\u306e\u3092\u8fd4\u3059\n// 4. \u8853\u5f0f\u540d\u304c\u6709\u52b9\u304b\u30c1\u30a7\u30c3\u30af\uff08\u300c\u8853\u5f0f\u300d\u3068\u300c\u300e\u300f\u300d\u3092\u542b\u3080\uff09\n\nfn main() {\n    let techniques = [\n        \\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\",\n        \\\"\u8853\u5f0f\u53cd\u8ee2\u300e\u8d6b\u300f\\\",\n        \\\"\u865a\u5f0f\u300e\u8308\u300f\\\",\n        \\\"\u7121\u52b9\u306a\u6280\u540d\\\",\n        \\\"\u57fa\u672c\u653b\u6483\\\",\n    ];\n\n    // \u30c6\u30b9\u30c8\u7528\u30b3\u30fc\u30c9\n}\n</code></pre> \u89e3\u7b54\u3092\u898b\u308b <pre><code>// 1. \u8853\u5f0f\u306e\u7a2e\u985e\u3092\u62bd\u51fa\nfn extract_technique_type(technique: &amp;str) -&gt; Option&lt;&amp;str&gt; {\n    if let Some(start) = technique.find(\\\"\u8853\u5f0f\\\") {\n        let after_jutsu = &amp;technique[start + 6..]; // \\\"\u8853\u5f0f\\\"\u306e\u5f8c\n        if let Some(end) = after_jutsu.find(\\\"\u300e\\\") {\n            return Some(&amp;after_jutsu[..end]);\n        }\n    }\n    None\n}\n\n// 2. \u6280\u540d\u3092\u62bd\u51fa\nfn extract_technique_name(technique: &amp;str) -&gt; Option&lt;&amp;str&gt; {\n    if let Some(start) = technique.find(\\\"\u300e\\\") {\n        if let Some(end) = technique.find(\\\"\u300f\\\") {\n            if start &lt; end {\n                return Some(&amp;technique[start + 3..end]); // \u300e\u306e\u5f8c\u304b\u3089\u300f\u306e\u524d\u307e\u3067\n            }\n        }\n    }\n    None\n}\n\n// 3. \u6700\u3082\u9577\u3044\u8853\u5f0f\u540d\u3092\u8fd4\u3059\nfn find_longest_technique&lt;'a&gt;(techniques: &amp;[&amp;'a str]) -&gt; Option&lt;&amp;'a str&gt; {\n    techniques.iter()\n        .max_by_key(|tech| tech.len())\n        .copied()\n}\n\n// 4. \u8853\u5f0f\u540d\u306e\u6709\u52b9\u6027\u30c1\u30a7\u30c3\u30af\nfn is_valid_technique(technique: &amp;str) -&gt; bool {\n    technique.contains(\\\"\u8853\u5f0f\\\") &amp;&amp; technique.contains(\\\"\u300e\\\") &amp;&amp; technique.contains(\\\"\u300f\\\")\n}\n\n// 5. \u8853\u5f0f\u3092\u8a73\u7d30\u5206\u6790\nfn analyze_technique(technique: &amp;str) -&gt; String {\n    let mut analysis = String::new();\n\n    analysis.push_str(&amp;format!(\\\"\u6280\u540d: {}\\\\n\\\", technique));\n    analysis.push_str(&amp;format!(\\\"\u6587\u5b57\u6570: {}\\\\n\\\", technique.chars().count()));\n    analysis.push_str(&amp;format!(\\\"\u6709\u52b9: {}\\\\n\\\", is_valid_technique(technique)));\n\n    if let Some(tech_type) = extract_technique_type(technique) {\n        analysis.push_str(&amp;format!(\\\"\u7a2e\u985e: {}\\\\n\\\", tech_type));\n    }\n\n    if let Some(name) = extract_technique_name(technique) {\n        analysis.push_str(&amp;format!(\\\"\u6280\u540d: {}\\\\n\\\", name));\n    }\n\n    analysis\n}\n\n// 6. \u8907\u6570\u6280\u306e\u7d71\u8a08\nfn generate_technique_stats(techniques: &amp;[&amp;str]) -&gt; String {\n    let valid_count = techniques.iter()\n        .filter(|&amp;&amp;tech| is_valid_technique(tech))\n        .count();\n\n    let total_chars: usize = techniques.iter()\n        .map(|tech| tech.chars().count())\n        .sum();\n\n    let avg_length = if techniques.is_empty() {\n        0.0\n    } else {\n        total_chars as f64 / techniques.len() as f64\n    };\n\n    format!(\n        \\\"\u6280\u6570: {}\\\\n\u6709\u52b9\u6280\u6570: {}\\\\n\u5e73\u5747\u6587\u5b57\u6570: {:.1}\\\\n\u6700\u9577\u6280: {}\\\",\n        techniques.len(),\n        valid_count,\n        avg_length,\n        find_longest_technique(techniques).unwrap_or(\\\"\u306a\u3057\\\")\n    )\n}\n\nfn main() {\n    let techniques = [\n        \\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\",\n        \\\"\u8853\u5f0f\u53cd\u8ee2\u300e\u8d6b\u300f\\\",\n        \\\"\u865a\u5f0f\u300e\u8308\u300f\\\",\n        \\\"\u7121\u52b9\u306a\u6280\u540d\\\",\n        \\\"\u57fa\u672c\u653b\u6483\\\",\n        \\\"\u7121\u4e0b\u9650\u546a\u8853\u300e\u7d2b\u300f\\\",\n    ];\n\n    println!(\\\"=== \u8853\u5f0f\u5206\u6790\u30b7\u30b9\u30c6\u30e0 ===\\\");\n\n    // \u5404\u6280\u306e\u8a73\u7d30\u5206\u6790\n    for technique in &amp;techniques {\n        println!(\\\"\\\\n--- {} ---\\\", technique);\n\n        if let Some(tech_type) = extract_technique_type(technique) {\n            println!(\\\"\u7a2e\u985e: {}\\\", tech_type);\n        }\n\n        if let Some(name) = extract_technique_name(technique) {\n            println!(\\\"\u6280\u540d: {}\\\", name);\n        }\n\n        println!(\\\"\u6709\u52b9: {}\\\", is_valid_technique(technique));\n    }\n\n    // \u7d71\u8a08\u60c5\u5831\n    println!(\\\"\\\\n=== \u7d71\u8a08\u60c5\u5831 ===\\\");\n    println!(\\\"{}\\\", generate_technique_stats(&amp;techniques));\n\n    // \u6709\u52b9\u306a\u6280\u306e\u307f\u30d5\u30a3\u30eb\u30bf\n    let valid_techniques: Vec&lt;&amp;str&gt; = techniques.iter()\n        .filter(|&amp;&amp;tech| is_valid_technique(tech))\n        .copied()\n        .collect();\n\n    println!(\\\"\\\\n=== \u6709\u52b9\u306a\u8853\u5f0f\u4e00\u89a7 ===\\\");\n    for (i, technique) in valid_techniques.iter().enumerate() {\n        println!(\\\"{}. {}\\\", i + 1, technique);\n    }\n}\n</code></pre>"},{"location":"chapter02/exercises/#-_2","title":"\u4e0a\u7d1a\u7de8 - \u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u306e\u5b9f\u8df5","text":""},{"location":"chapter02/exercises/#5","title":"\u554f\u984c5: \u546a\u8853\u5e2b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9","text":"<p>\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u6ce8\u91c8\u3092\u4f7f\u3063\u3066\u3001\u546a\u8853\u5e2b\u306e\u60c5\u5831\u3092\u7ba1\u7406\u3059\u308b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u6210\u305b\u3088\u3002</p> <pre><code>// \u546a\u8853\u5e2b\u306e\u53c2\u7167\u3092\u4fdd\u6301\u3059\u308b\u69cb\u9020\u4f53\nstruct SorcererRef&lt;'a&gt; {\n    name: &amp;'a str,\n    grade: &amp;'a str,\n    techniques: Vec&lt;&amp;'a str&gt;,\n}\n\n// \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u69cb\u9020\u4f53\nstruct SorcererDatabase&lt;'a&gt; {\n    sorcerers: Vec&lt;SorcererRef&lt;'a&gt;&gt;,\n}\n\n// \u4ee5\u4e0b\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u305b\u3088\uff1a\n// 1. \u65b0\u3057\u3044\u546a\u8853\u5e2b\u3092\u8ffd\u52a0\n// 2. \u540d\u524d\u3067\u691c\u7d22\n// 3. \u7b49\u7d1a\u3067\u691c\u7d22\n// 4. \u7279\u5b9a\u306e\u6280\u3092\u4f7f\u3048\u308b\u546a\u8853\u5e2b\u3092\u691c\u7d22\n// 5. \u6700\u3082\u6280\u6570\u306e\u591a\u3044\u546a\u8853\u5e2b\u3092\u8fd4\u3059\n\nfn main() {\n    // \u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\n    let names = [\\\"\u4e94\u6761\u609f\\\", \\\"\u4e21\u9762\u5bbf\u513a\\\", \\\"\u864e\u6756\u60a0\u4ec1\\\"];\n    let grades = [\\\"\u7279\u7d1a\\\", \\\"\u7279\u7d1a\\\", \\\"1\u7d1a\\\"];\n    let techniques = [\n        vec![\\\"\u7121\u4e0b\u9650\u546a\u8853\\\", \\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\", \\\"\u8853\u5f0f\u53cd\u8ee2\u300e\u8d6b\u300f\\\"],\n        vec![\\\"\u89e3\\\", \\\"\u634c\\\", \\\"\u4f0f\u9b54\u5fa1\u5eda\u5b50\\\"],\n        vec![\\\"\u9ed2\u9583\\\", \\\"\u767a\u6563\\\"],\n    ];\n\n    // \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u306e\u30c6\u30b9\u30c8\n}\n</code></pre> \u89e3\u7b54\u3092\u898b\u308b <pre><code>#[derive(Debug)]\nstruct SorcererRef&lt;'a&gt; {\n    name: &amp;'a str,\n    grade: &amp;'a str,\n    techniques: Vec&lt;&amp;'a str&gt;,\n}\n\nimpl&lt;'a&gt; SorcererRef&lt;'a&gt; {\n    fn new(name: &amp;'a str, grade: &amp;'a str) -&gt; Self {\n        SorcererRef {\n            name,\n            grade,\n            techniques: Vec::new(),\n        }\n    }\n\n    fn add_technique(&amp;mut self, technique: &amp;'a str) {\n        self.techniques.push(technique);\n    }\n\n    fn has_technique(&amp;self, technique: &amp;str) -&gt; bool {\n        self.techniques.iter().any(|&amp;t| t == technique)\n    }\n\n    fn technique_count(&amp;self) -&gt; usize {\n        self.techniques.len()\n    }\n}\n\nstruct SorcererDatabase&lt;'a&gt; {\n    sorcerers: Vec&lt;SorcererRef&lt;'a&gt;&gt;,\n}\n\nimpl&lt;'a&gt; SorcererDatabase&lt;'a&gt; {\n    fn new() -&gt; Self {\n        SorcererDatabase {\n            sorcerers: Vec::new(),\n        }\n    }\n\n    // 1. \u65b0\u3057\u3044\u546a\u8853\u5e2b\u3092\u8ffd\u52a0\n    fn add_sorcerer(&amp;mut self, sorcerer: SorcererRef&lt;'a&gt;) {\n        self.sorcerers.push(sorcerer);\n    }\n\n    // 2. \u540d\u524d\u3067\u691c\u7d22\n    fn find_by_name(&amp;self, name: &amp;str) -&gt; Option&lt;&amp;SorcererRef&lt;'a&gt;&gt; {\n        self.sorcerers.iter()\n            .find(|sorcerer| sorcerer.name == name)\n    }\n\n    // 3. \u7b49\u7d1a\u3067\u691c\u7d22\n    fn find_by_grade(&amp;self, grade: &amp;str) -&gt; Vec&lt;&amp;SorcererRef&lt;'a&gt;&gt; {\n        self.sorcerers.iter()\n            .filter(|sorcerer| sorcerer.grade == grade)\n            .collect()\n    }\n\n    // 4. \u7279\u5b9a\u306e\u6280\u3092\u4f7f\u3048\u308b\u546a\u8853\u5e2b\u3092\u691c\u7d22\n    fn find_by_technique(&amp;self, technique: &amp;str) -&gt; Vec&lt;&amp;SorcererRef&lt;'a&gt;&gt; {\n        self.sorcerers.iter()\n            .filter(|sorcerer| sorcerer.has_technique(technique))\n            .collect()\n    }\n\n    // 5. \u6700\u3082\u6280\u6570\u306e\u591a\u3044\u546a\u8853\u5e2b\u3092\u8fd4\u3059\n    fn find_most_skilled(&amp;self) -&gt; Option&lt;&amp;SorcererRef&lt;'a&gt;&gt; {\n        self.sorcerers.iter()\n            .max_by_key(|sorcerer| sorcerer.technique_count())\n    }\n\n    // 6. \u7d71\u8a08\u60c5\u5831\u3092\u751f\u6210\n    fn generate_statistics(&amp;self) -&gt; DatabaseStats&lt;'a&gt; {\n        DatabaseStats {\n            database: self,\n        }\n    }\n}\n\nstruct DatabaseStats&lt;'a&gt; {\n    database: &amp;'a SorcererDatabase&lt;'a&gt;,\n}\n\nimpl&lt;'a&gt; DatabaseStats&lt;'a&gt; {\n    fn total_sorcerers(&amp;self) -&gt; usize {\n        self.database.sorcerers.len()\n    }\n\n    fn average_techniques(&amp;self) -&gt; f64 {\n        if self.database.sorcerers.is_empty() {\n            0.0\n        } else {\n            let total: usize = self.database.sorcerers.iter()\n                .map(|s| s.technique_count())\n                .sum();\n            total as f64 / self.database.sorcerers.len() as f64\n        }\n    }\n\n    fn grade_distribution(&amp;self) -&gt; std::collections::HashMap&lt;&amp;'a str, usize&gt; {\n        let mut distribution = std::collections::HashMap::new();\n        for sorcerer in &amp;self.database.sorcerers {\n            *distribution.entry(sorcerer.grade).or_insert(0) += 1;\n        }\n        distribution\n    }\n\n    fn generate_report(&amp;self) -&gt; String {\n        let mut report = String::new();\n\n        report.push_str(\\\"=== \u546a\u8853\u5e2b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u7d71\u8a08 ===\\\\n\\\");\n        report.push_str(&amp;format!(\\\"\u7dcf\u546a\u8853\u5e2b\u6570: {}\\\\n\\\", self.total_sorcerers()));\n        report.push_str(&amp;format!(\\\"\u5e73\u5747\u6280\u6570: {:.1}\\\\n\\\", self.average_techniques()));\n\n        if let Some(most_skilled) = self.database.find_most_skilled() {\n            report.push_str(&amp;format!(\\\"\u6700\u591a\u6280\u4fdd\u6709\u8005: {} ({}\u6280)\\\\n\\\",\n                most_skilled.name, most_skilled.technique_count()));\n        }\n\n        report.push_str(\\\"\\\\n\u7b49\u7d1a\u5206\u5e03:\\\\n\\\");\n        for (grade, count) in self.grade_distribution() {\n            report.push_str(&amp;format!(\\\"  {}: {}\u4eba\\\\n\\\", grade, count));\n        }\n\n        report\n    }\n}\n\nfn main() {\n    // \u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\n    let names = [\\\"\u4e94\u6761\u609f\\\", \\\"\u4e21\u9762\u5bbf\u513a\\\", \\\"\u864e\u6756\u60a0\u4ec1\\\", \\\"\u4f0f\u9ed2\u6075\\\", \\\"\u91d8\u5d0e\u91ce\u8594\u8587\\\"];\n    let grades = [\\\"\u7279\u7d1a\\\", \\\"\u7279\u7d1a\\\", \\\"1\u7d1a\\\", \\\"2\u7d1a\\\", \\\"3\u7d1a\\\"];\n\n    let mut database = SorcererDatabase::new();\n\n    // \u546a\u8853\u5e2b\u30c7\u30fc\u30bf\u306e\u8ffd\u52a0\n    let mut gojo = SorcererRef::new(names[0], grades[0]);\n    gojo.add_technique(\\\"\u7121\u4e0b\u9650\u546a\u8853\\\");\n    gojo.add_technique(\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\");\n    gojo.add_technique(\\\"\u8853\u5f0f\u53cd\u8ee2\u300e\u8d6b\u300f\\\");\n    gojo.add_technique(\\\"\u865a\u5f0f\u300e\u8308\u300f\\\");\n    database.add_sorcerer(gojo);\n\n    let mut sukuna = SorcererRef::new(names[1], grades[1]);\n    sukuna.add_technique(\\\"\u89e3\\\");\n    sukuna.add_technique(\\\"\u634c\\\");\n    sukuna.add_technique(\\\"\u4f0f\u9b54\u5fa1\u5eda\u5b50\\\");\n    database.add_sorcerer(sukuna);\n\n    let mut yuji = SorcererRef::new(names[2], grades[2]);\n    yuji.add_technique(\\\"\u9ed2\u9583\\\");\n    yuji.add_technique(\\\"\u767a\u6563\\\");\n    database.add_sorcerer(yuji);\n\n    let mut megumi = SorcererRef::new(names[3], grades[3]);\n    megumi.add_technique(\\\"\u5341\u7a2e\u5f71\u6cd5\u8853\\\");\n    megumi.add_technique(\\\"\u7389\u72ac\\\");\n    database.add_sorcerer(megumi);\n\n    let mut nobara = SorcererRef::new(names[4], grades[4]);\n    nobara.add_technique(\\\"\u82bb\u970a\u546a\u6cd5\\\");\n    database.add_sorcerer(nobara);\n\n    // \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u306e\u30c6\u30b9\u30c8\n    println!(\\\"=== \u546a\u8853\u5e2b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30c6\u30b9\u30c8 ===\\\");\n\n    // \u540d\u524d\u691c\u7d22\n    if let Some(gojo) = database.find_by_name(\\\"\u4e94\u6761\u609f\\\") {\n        println!(\\\"\\\\n\u4e94\u6761\u609f\u306e\u60c5\u5831:\\\");\n        println!(\\\"  \u7b49\u7d1a: {}\\\", gojo.grade);\n        println!(\\\"  \u6280\u6570: {}\\\", gojo.technique_count());\n        println!(\\\"  \u6280: {:?}\\\", gojo.techniques);\n    }\n\n    // \u7b49\u7d1a\u691c\u7d22\n    let special_grade = database.find_by_grade(\\\"\u7279\u7d1a\\\");\n    println!(\\\"\\\\n\u7279\u7d1a\u546a\u8853\u5e2b:\\\");\n    for sorcerer in special_grade {\n        println!(\\\"  {}\\\", sorcerer.name);\n    }\n\n    // \u6280\u691c\u7d22\n    let black_flash_users = database.find_by_technique(\\\"\u9ed2\u9583\\\");\n    println!(\\\"\\\\n\u9ed2\u9583\u4f7f\u3044:\\\");\n    for sorcerer in black_flash_users {\n        println!(\\\"  {}\\\", sorcerer.name);\n    }\n\n    // \u7d71\u8a08\u60c5\u5831\n    let stats = database.generate_statistics();\n    println!(\\\"\\\\n{}\\\", stats.generate_report());\n}\n</code></pre>"},{"location":"chapter02/exercises/#6","title":"\u554f\u984c6: \u8907\u96d1\u306a\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u95a2\u4fc2","text":"<p>\u8907\u6570\u306e\u69cb\u9020\u4f53\u9593\u3067\u53c2\u7167\u3092\u6301\u3064\u8907\u96d1\u306a\u30b7\u30b9\u30c6\u30e0\u3092\u5b9f\u88c5\u305b\u3088\u3002</p> <pre><code>// \u5b66\u6821\u3001\u30af\u30e9\u30b9\u3001\u751f\u5f92\u306e\u95a2\u4fc2\u3092\u8868\u73fe\n// \u5b66\u6821\u306f\u8907\u6570\u306e\u30af\u30e9\u30b9\u3092\u6301\u3064\n// \u30af\u30e9\u30b9\u306f\u8907\u6570\u306e\u751f\u5f92\u3092\u6301\u3064\n// \u751f\u5f92\u306f\u6240\u5c5e\u30af\u30e9\u30b9\u3078\u306e\u53c2\u7167\u3092\u6301\u3064\n\nstruct School&lt;'a&gt; {\n    name: &amp;'a str,\n    classes: Vec&lt;Class&lt;'a&gt;&gt;,\n}\n\nstruct Class&lt;'a&gt; {\n    name: &amp;'a str,\n    teacher: &amp;'a str,\n    students: Vec&lt;Student&lt;'a&gt;&gt;,\n}\n\nstruct Student&lt;'a&gt; {\n    name: &amp;'a str,\n    grade: i32,\n    class: Option&lt;&amp;'a str&gt;, // \u30af\u30e9\u30b9\u540d\u3078\u306e\u53c2\u7167\n}\n\n// \u5b66\u6821\u30b7\u30b9\u30c6\u30e0\u306e\u7ba1\u7406\u6a5f\u80fd\u3092\u5b9f\u88c5\u305b\u3088\n</code></pre> \u89e3\u7b54\u3092\u898b\u308b <pre><code>#[derive(Debug)]\nstruct School&lt;'a&gt; {\n    name: &amp;'a str,\n    classes: Vec&lt;Class&lt;'a&gt;&gt;,\n}\n\n#[derive(Debug)]\nstruct Class&lt;'a&gt; {\n    name: &amp;'a str,\n    teacher: &amp;'a str,\n    students: Vec&lt;Student&lt;'a&gt;&gt;,\n}\n\n#[derive(Debug)]\nstruct Student&lt;'a&gt; {\n    name: &amp;'a str,\n    grade: i32,\n    class: Option&lt;&amp;'a str&gt;,\n}\n\nimpl&lt;'a&gt; School&lt;'a&gt; {\n    fn new(name: &amp;'a str) -&gt; Self {\n        School {\n            name,\n            classes: Vec::new(),\n        }\n    }\n\n    fn add_class(&amp;mut self, class: Class&lt;'a&gt;) {\n        self.classes.push(class);\n    }\n\n    fn find_class(&amp;self, class_name: &amp;str) -&gt; Option&lt;&amp;Class&lt;'a&gt;&gt; {\n        self.classes.iter()\n            .find(|class| class.name == class_name)\n    }\n\n    fn find_class_mut(&amp;mut self, class_name: &amp;str) -&gt; Option&lt;&amp;mut Class&lt;'a&gt;&gt; {\n        self.classes.iter_mut()\n            .find(|class| class.name == class_name)\n    }\n\n    fn find_student(&amp;self, student_name: &amp;str) -&gt; Option&lt;(&amp;Class&lt;'a&gt;, &amp;Student&lt;'a&gt;)&gt; {\n        for class in &amp;self.classes {\n            if let Some(student) = class.find_student(student_name) {\n                return Some((class, student));\n            }\n        }\n        None\n    }\n\n    fn get_all_students(&amp;self) -&gt; Vec&lt;&amp;Student&lt;'a&gt;&gt; {\n        self.classes.iter()\n            .flat_map(|class| class.students.iter())\n            .collect()\n    }\n\n    fn get_top_students(&amp;self, min_grade: i32) -&gt; Vec&lt;&amp;Student&lt;'a&gt;&gt; {\n        self.get_all_students().into_iter()\n            .filter(|student| student.grade &gt;= min_grade)\n            .collect()\n    }\n\n    fn generate_school_report(&amp;self) -&gt; String {\n        let mut report = String::new();\n\n        report.push_str(&amp;format!(\\\"=== {} \u5b66\u6821\u30ec\u30dd\u30fc\u30c8 ===\\\\n\\\", self.name));\n        report.push_str(&amp;format!(\\\"\u30af\u30e9\u30b9\u6570: {}\\\\n\\\", self.classes.len()));\n\n        let total_students: usize = self.classes.iter()\n            .map(|class| class.students.len())\n            .sum();\n        report.push_str(&amp;format!(\\\"\u7dcf\u751f\u5f92\u6570: {}\\\\n\\\", total_students));\n\n        if total_students &gt; 0 {\n            let total_grade: i32 = self.get_all_students().iter()\n                .map(|student| student.grade)\n                .sum();\n            let avg_grade = total_grade as f64 / total_students as f64;\n            report.push_str(&amp;format!(\\\"\u5e73\u5747\u6210\u7e3e: {:.1}\\\\n\\\", avg_grade));\n        }\n\n        report.push_str(\\\"\\\\n\u30af\u30e9\u30b9\u5225\u8a73\u7d30:\\\\n\\\");\n        for class in &amp;self.classes {\n            report.push_str(&amp;class.generate_class_summary());\n        }\n\n        report\n    }\n}\n\nimpl&lt;'a&gt; Class&lt;'a&gt; {\n    fn new(name: &amp;'a str, teacher: &amp;'a str) -&gt; Self {\n        Class {\n            name,\n            teacher,\n            students: Vec::new(),\n        }\n    }\n\n    fn add_student(&amp;mut self, mut student: Student&lt;'a&gt;) {\n        student.class = Some(self.name);\n        self.students.push(student);\n    }\n\n    fn find_student(&amp;self, student_name: &amp;str) -&gt; Option&lt;&amp;Student&lt;'a&gt;&gt; {\n        self.students.iter()\n            .find(|student| student.name == student_name)\n    }\n\n    fn get_average_grade(&amp;self) -&gt; f64 {\n        if self.students.is_empty() {\n            0.0\n        } else {\n            let total: i32 = self.students.iter()\n                .map(|student| student.grade)\n                .sum();\n            total as f64 / self.students.len() as f64\n        }\n    }\n\n    fn get_top_student(&amp;self) -&gt; Option&lt;&amp;Student&lt;'a&gt;&gt; {\n        self.students.iter()\n            .max_by_key(|student| student.grade)\n    }\n\n    fn generate_class_summary(&amp;self) -&gt; String {\n        let mut summary = String::new();\n\n        summary.push_str(&amp;format!(\\\"  {} (\u62c5\u4efb: {})\\\\n\\\", self.name, self.teacher));\n        summary.push_str(&amp;format!(\\\"    \u751f\u5f92\u6570: {}\\\\n\\\", self.students.len()));\n        summary.push_str(&amp;format!(\\\"    \u5e73\u5747\u6210\u7e3e: {:.1}\\\\n\\\", self.get_average_grade()));\n\n        if let Some(top_student) = self.get_top_student() {\n            summary.push_str(&amp;format!(\\\"    \u30c8\u30c3\u30d7: {} ({}\u70b9)\\\\n\\\",\n                top_student.name, top_student.grade));\n        }\n\n        summary\n    }\n}\n\nimpl&lt;'a&gt; Student&lt;'a&gt; {\n    fn new(name: &amp;'a str, grade: i32) -&gt; Self {\n        Student {\n            name,\n            grade,\n            class: None,\n        }\n    }\n\n    fn get_class_name(&amp;self) -&gt; &amp;str {\n        self.class.unwrap_or(\\\"\u672a\u6240\u5c5e\\\")\n    }\n\n    fn get_grade_level(&amp;self) -&gt; &amp;str {\n        match self.grade {\n            90..=100 =&gt; \\\"\u512a\u79c0\\\",\n            80..=89 =&gt; \\\"\u826f\u597d\\\",\n            70..=79 =&gt; \\\"\u666e\u901a\\\",\n            60..=69 =&gt; \\\"\u8981\u52aa\u529b\\\",\n            _ =&gt; \\\"\u8981\u6307\u5c0e\\\",\n        }\n    }\n}\n\nfn main() {\n    // \u5b66\u6821\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\n    let mut jujutsu_school = School::new(\\\"\u6771\u4eac\u546a\u8853\u9ad8\u7b49\u5c02\u9580\u5b66\u6821\\\");\n\n    // 1\u5e74\u751f\u30af\u30e9\u30b9\n    let mut first_year = Class::new(\\\"1\u5e74A\u7d44\\\", \\\"\u4e94\u6761\u609f\\\");\n    first_year.add_student(Student::new(\\\"\u864e\u6756\u60a0\u4ec1\\\", 85));\n    first_year.add_student(Student::new(\\\"\u4f0f\u9ed2\u6075\\\", 92));\n    first_year.add_student(Student::new(\\\"\u91d8\u5d0e\u91ce\u8594\u8587\\\", 88));\n\n    // 2\u5e74\u751f\u30af\u30e9\u30b9\n    let mut second_year = Class::new(\\\"2\u5e74A\u7d44\\\", \\\"\u591c\u86fe\u6b63\u9053\\\");\n    second_year.add_student(Student::new(\\\"\u79aa\u9662\u771f\u5e0c\\\", 94));\n    second_year.add_student(Student::new(\\\"\u72d7\u5dfb\u68d8\\\", 90));\n    second_year.add_student(Student::new(\\\"\u30d1\u30f3\u30c0\\\", 78));\n\n    jujutsu_school.add_class(first_year);\n    jujutsu_school.add_class(second_year);\n\n    // \u5b66\u6821\u30b7\u30b9\u30c6\u30e0\u306e\u30c6\u30b9\u30c8\n    println!(\\\"=== \u546a\u8853\u9ad8\u5c02\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0 ===\\\");\n\n    // \u5b66\u6821\u30ec\u30dd\u30fc\u30c8\n    println!(\\\"{}\\\", jujutsu_school.generate_school_report());\n\n    // \u751f\u5f92\u691c\u7d22\n    if let Some((class, student)) = jujutsu_school.find_student(\\\"\u864e\u6756\u60a0\u4ec1\\\") {\n        println!(\\\"\\\\n\u751f\u5f92\u60c5\u5831:\\\");\n        println!(\\\"  \u540d\u524d: {}\\\", student.name);\n        println!(\\\"  \u6210\u7e3e: {} ({})\\\", student.grade, student.get_grade_level());\n        println!(\\\"  \u30af\u30e9\u30b9: {}\\\", class.name);\n        println!(\\\"  \u62c5\u4efb: {}\\\", class.teacher);\n    }\n\n    // \u512a\u79c0\u306a\u751f\u5f92\u4e00\u89a7\n    let top_students = jujutsu_school.get_top_students(90);\n    println!(\\\"\\\\n\u512a\u79c0\u306a\u751f\u5f92 (90\u70b9\u4ee5\u4e0a):\\\");\n    for student in top_students {\n        println!(\\\"  {} - {}\u70b9 ({})\\\",\n            student.name, student.grade, student.get_class_name());\n    }\n\n    // \u30af\u30e9\u30b9\u5225\u8a73\u7d30\n    println!(\\\"\\\\n=== \u30af\u30e9\u30b9\u5225\u8a73\u7d30 ===\\\");\n    for class in &amp;jujutsu_school.classes {\n        println!(\\\"{}:\\\", class.name);\n        for student in &amp;class.students {\n            println!(\\\"  {} - {}\u70b9 ({})\\\",\n                student.name, student.grade, student.get_grade_level());\n        }\n        println!();\n    }\n}\n</code></pre>"},{"location":"chapter02/exercises/#_2","title":"\u7dcf\u5408\u554f\u984c","text":""},{"location":"chapter02/exercises/#7","title":"\u554f\u984c7: \u546a\u8853\u6226\u95d8\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0","text":"<p>\u3053\u308c\u307e\u3067\u5b66\u3093\u3060\u6240\u6709\u6a29\u3001\u501f\u7528\u3001\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u306e\u3059\u3079\u3066\u3092\u4f7f\u3063\u3066\u3001\u8907\u96d1\u306a\u6226\u95d8\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0\u3092\u5b9f\u88c5\u305b\u3088\u3002</p> <p>\u8981\u4ef6:</p> <ul> <li>\u8907\u6570\u306e\u6226\u95d8\u540c\u6642\u7ba1\u7406</li> <li>\u6226\u95d8\u53c2\u52a0\u8005\u306e\u7ba1\u7406</li> <li>\u6280\u306e\u4f7f\u7528\u5c65\u6b74</li> <li>\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u7d71\u8a08</li> <li>\u30e1\u30e2\u30ea\u52b9\u7387\u7684\u306a\u8a2d\u8a08</li> </ul>   \u81ea\u7531\u306b\u8a2d\u8a08\u3057\u3066\u5b9f\u88c5\u3057\u3066\u307f\u3088\u3046\uff01\u6240\u6709\u6a29\u3001\u501f\u7528\u3001\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u3092\u9069\u5207\u306b\u4f7f\u3044\u5206\u3051\u308b\u3053\u3068\u3002   \u89e3\u7b54\u4f8b\u3092\u898b\u308b <pre><code>use std::collections::HashMap;\n\n// \u6226\u95d8\u53c2\u52a0\u8005\n#[derive(Debug, Clone)]\nstruct Combatant {\n    name: String,\n    hp: i32,\n    max_hp: i32,\n    power: i32,\n    techniques: Vec&lt;String&gt;,\n}\n\nimpl Combatant {\n    fn new(name: &amp;str, hp: i32, power: i32) -&gt; Self {\n        Combatant {\n            name: String::from(name),\n            hp,\n            max_hp: hp,\n            power,\n            techniques: Vec::new(),\n        }\n    }\n\n    fn add_technique(&amp;mut self, technique: String) {\n        self.techniques.push(technique);\n    }\n\n    fn is_alive(&amp;self) -&gt; bool {\n        self.hp &gt; 0\n    }\n\n    fn take_damage(&amp;mut self, damage: i32) {\n        self.hp = (self.hp - damage).max(0);\n    }\n\n    fn get_hp_percentage(&amp;self) -&gt; f64 {\n        (self.hp as f64 / self.max_hp as f64) * 100.0\n    }\n}\n\n// \u6226\u95d8\u30ed\u30b0\u30a8\u30f3\u30c8\u30ea\n#[derive(Debug, Clone)]\nstruct LogEntry {\n    round: u32,\n    action: String,\n    timestamp: u64,\n}\n\n// \u500b\u5225\u6226\u95d8\nstruct Battle&lt;'a&gt; {\n    id: u32,\n    name: String,\n    combatants: Vec&lt;&amp;'a mut Combatant&gt;,\n    log: Vec&lt;LogEntry&gt;,\n    current_round: u32,\n    is_active: bool,\n}\n\nimpl&lt;'a&gt; Battle&lt;'a&gt; {\n    fn new(id: u32, name: String) -&gt; Self {\n        Battle {\n            id,\n            name,\n            combatants: Vec::new(),\n            log: Vec::new(),\n            current_round: 1,\n            is_active: false,\n        }\n    }\n\n    fn add_combatant(&amp;mut self, combatant: &amp;'a mut Combatant) {\n        self.combatants.push(combatant);\n    }\n\n    fn start_battle(&amp;mut self) {\n        self.is_active = true;\n        self.log_action(format!(\\\"\u6226\u95d8\u958b\u59cb: {}\\\", self.name));\n    }\n\n    fn log_action(&amp;mut self, action: String) {\n        let entry = LogEntry {\n            round: self.current_round,\n            action,\n            timestamp: self.log.len() as u64,\n        };\n        self.log.push(entry);\n    }\n\n    fn execute_round(&amp;mut self) -&gt; bool {\n        if !self.is_active || self.combatants.len() &lt; 2 {\n            return false;\n        }\n\n        self.log_action(format!(\\\"--- \u30e9\u30a6\u30f3\u30c9 {} ---\\\", self.current_round));\n\n        // \u751f\u5b58\u8005\u306e\u307f\u3067\u6226\u95d8\n        let alive_combatants: Vec&lt;_&gt; = self.combatants.iter()\n            .filter(|c| c.is_alive())\n            .collect();\n\n        if alive_combatants.len() &lt; 2 {\n            self.end_battle();\n            return false;\n        }\n\n        // \u7c21\u6613\u7684\u306a\u6226\u95d8\u30ed\u30b8\u30c3\u30af\n        for i in 0..alive_combatants.len() {\n            if !alive_combatants[i].is_alive() {\n                continue;\n            }\n\n            // \u653b\u6483\u5bfe\u8c61\u3092\u9078\u629e\uff08\u6b21\u306e\u751f\u5b58\u8005\uff09\n            let target_idx = (i + 1) % alive_combatants.len();\n            if target_idx != i &amp;&amp; alive_combatants[target_idx].is_alive() {\n                let attacker_name = &amp;alive_combatants[i].name;\n                let target_name = &amp;alive_combatants[target_idx].name;\n                let damage = alive_combatants[i].power / 10;\n\n                // \u5b9f\u969b\u306e\u30c0\u30e1\u30fc\u30b8\u9069\u7528\u306f\u5143\u306e\u53c2\u7167\u3092\u901a\u3057\u3066\n                for combatant in &amp;mut self.combatants {\n                    if combatant.name == *target_name {\n                        combatant.take_damage(damage);\n                        break;\n                    }\n                }\n\n                self.log_action(format!(\\\"{} \u304c {} \u3092\u653b\u6483\uff01 {}\u30c0\u30e1\u30fc\u30b8\\\",\n                    attacker_name, target_name, damage));\n            }\n        }\n\n        self.current_round += 1;\n        true\n    }\n\n    fn end_battle(&amp;mut self) {\n        self.is_active = false;\n\n        let winner = self.combatants.iter()\n            .find(|c| c.is_alive())\n            .map(|c| c.name.clone());\n\n        if let Some(winner_name) = winner {\n            self.log_action(format!(\\\"{} \u306e\u52dd\u5229\uff01\\\", winner_name));\n        } else {\n            self.log_action(\\\"\u5f15\u304d\u5206\u3051\\\".to_string());\n        }\n    }\n\n    fn get_battle_status(&amp;self) -&gt; BattleStatus {\n        let alive_count = self.combatants.iter()\n            .filter(|c| c.is_alive())\n            .count();\n\n        BattleStatus {\n            battle_id: self.id,\n            name: &amp;self.name,\n            is_active: self.is_active,\n            current_round: self.current_round,\n            alive_combatants: alive_count,\n            total_combatants: self.combatants.len(),\n            log_entries: self.log.len(),\n        }\n    }\n}\n\n// \u6226\u95d8\u72b6\u614b\u306e\u8aad\u307f\u53d6\u308a\u5c02\u7528\u30d3\u30e5\u30fc\n#[derive(Debug)]\nstruct BattleStatus&lt;'a&gt; {\n    battle_id: u32,\n    name: &amp;'a str,\n    is_active: bool,\n    current_round: u32,\n    alive_combatants: usize,\n    total_combatants: usize,\n    log_entries: usize,\n}\n\n// \u6226\u95d8\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0\nstruct BattleManager {\n    combatants: HashMap&lt;String, Combatant&gt;,\n    next_battle_id: u32,\n}\n\nimpl BattleManager {\n    fn new() -&gt; Self {\n        BattleManager {\n            combatants: HashMap::new(),\n            next_battle_id: 1,\n        }\n    }\n\n    fn register_combatant(&amp;mut self, combatant: Combatant) {\n        self.combatants.insert(combatant.name.clone(), combatant);\n    }\n\n    fn create_battle(&amp;mut self, name: String, participant_names: Vec&lt;&amp;str&gt;) -&gt; Option&lt;Battle&gt; {\n        if participant_names.len() &lt; 2 {\n            return None;\n        }\n\n        let mut battle = Battle::new(self.next_battle_id, name);\n        self.next_battle_id += 1;\n\n        // \u53c2\u52a0\u8005\u306e\u8ffd\u52a0\uff08\u501f\u7528\u3067\uff09\n        for name in participant_names {\n            if let Some(combatant) = self.combatants.get_mut(name) {\n                // \u3053\u306e\u90e8\u5206\u306f\u5b9f\u969b\u306e\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u5236\u7d04\u306b\u3088\u308a\u8907\u96d1\u306b\u306a\u308b\n                // \u5b9f\u7528\u7684\u306b\u306f\u5225\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u304c\u5fc5\u8981\n            }\n        }\n\n        Some(battle)\n    }\n\n    fn get_combatant(&amp;self, name: &amp;str) -&gt; Option&lt;&amp;Combatant&gt; {\n        self.combatants.get(name)\n    }\n\n    fn get_combatant_mut(&amp;mut self, name: &amp;str) -&gt; Option&lt;&amp;mut Combatant&gt; {\n        self.combatants.get_mut(name)\n    }\n\n    fn generate_overall_stats(&amp;self) -&gt; String {\n        let mut stats = String::new();\n\n        stats.push_str(\\\"=== \u5168\u4f53\u7d71\u8a08 ===\\\\n\\\");\n        stats.push_str(&amp;format!(\\\"\u767b\u9332\u6226\u95d8\u8005\u6570: {}\\\\n\\\", self.combatants.len()));\n\n        let alive_count = self.combatants.values()\n            .filter(|c| c.is_alive())\n            .count();\n        stats.push_str(&amp;format!(\\\"\u751f\u5b58\u8005\u6570: {}\\\\n\\\", alive_count));\n\n        if let Some(strongest) = self.combatants.values()\n            .filter(|c| c.is_alive())\n            .max_by_key(|c| c.power) {\n            stats.push_str(&amp;format!(\\\"\u6700\u5f37\u6226\u95d8\u8005: {} (\u546a\u529b: {})\\\\n\\\",\n                strongest.name, strongest.power));\n        }\n\n        stats.push_str(\\\"\\\\n=== \u6226\u95d8\u8005\u4e00\u89a7 ===\\\\n\\\");\n        for combatant in self.combatants.values() {\n            let status = if combatant.is_alive() { \\\"\u751f\u5b58\\\" } else { \\\"\u6226\u95d8\u4e0d\u80fd\\\" };\n            stats.push_str(&amp;format!(\\\"{}: HP {}/{} ({}%) - {}\\\\n\\\",\n                combatant.name,\n                combatant.hp,\n                combatant.max_hp,\n                combatant.get_hp_percentage(),\n                status\n            ));\n        }\n\n        stats\n    }\n}\n\nfn main() {\n    println!(\\\"=== \u546a\u8853\u6226\u95d8\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0 ===\\\");\n\n    let mut manager = BattleManager::new();\n\n    // \u6226\u95d8\u8005\u306e\u767b\u9332\n    let mut gojo = Combatant::new(\\\"\u4e94\u6761\u609f\\\", 2000, 1800);\n    gojo.add_technique(\\\"\u7121\u4e0b\u9650\u546a\u8853\\\".to_string());\n    gojo.add_technique(\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\".to_string());\n\n    let mut sukuna = Combatant::new(\\\"\u4e21\u9762\u5bbf\u513a\\\", 1800, 1700);\n    sukuna.add_technique(\\\"\u89e3\\\".to_string());\n    sukuna.add_technique(\\\"\u634c\\\".to_string());\n\n    let mut yuji = Combatant::new(\\\"\u864e\u6756\u60a0\u4ec1\\\", 1200, 900);\n    yuji.add_technique(\\\"\u9ed2\u9583\\\".to_string());\n\n    let mut megumi = Combatant::new(\\\"\u4f0f\u9ed2\u6075\\\", 1000, 800);\n    megumi.add_technique(\\\"\u5341\u7a2e\u5f71\u6cd5\u8853\\\".to_string());\n\n    manager.register_combatant(gojo);\n    manager.register_combatant(sukuna);\n    manager.register_combatant(yuji);\n    manager.register_combatant(megumi);\n\n    // \u521d\u671f\u72b6\u614b\u8868\u793a\n    println!(\\\"{}\\\", manager.generate_overall_stats());\n\n    // \u6a21\u64ec\u6226\u95d8\uff08\u7c21\u6613\u7248\uff09\n    println!(\\\"\\\\n=== \u6a21\u64ec\u6226\u95d8\u5b9f\u884c ===\\\");\n\n    // \u4e94\u6761 vs \u5bbf\u513a\n    if let Some(gojo) = manager.get_combatant_mut(\\\"\u4e94\u6761\u609f\\\") {\n        gojo.take_damage(300);\n    }\n\n    if let Some(sukuna) = manager.get_combatant_mut(\\\"\u4e21\u9762\u5bbf\u513a\\\") {\n        sukuna.take_damage(400);\n    }\n\n    println!(\\\"\u6226\u95d8\u5f8c\u306e\u72b6\u614b:\\\");\n    if let Some(gojo) = manager.get_combatant(\\\"\u4e94\u6761\u609f\\\") {\n        println!(\\\"\u4e94\u6761\u609f: HP {}/2000 ({:.1}%)\\\",\n            gojo.hp, gojo.get_hp_percentage());\n    }\n\n    if let Some(sukuna) = manager.get_combatant(\\\"\u4e21\u9762\u5bbf\u513a\\\") {\n        println!(\\\"\u4e21\u9762\u5bbf\u513a: HP {}/1800 ({:.1}%)\\\",\n            sukuna.hp, sukuna.get_hp_percentage());\n    }\n\n    // \u6700\u7d42\u7d71\u8a08\n    println!(\\\"\\\\n{}\\\", manager.generate_overall_stats());\n}\n</code></pre>"},{"location":"chapter02/exercises/#_3","title":"\u7ae0\u672b\u7dcf\u62ec","text":"<p>\u7b2c2\u7ae0\u306e\u7df4\u7fd2\u554f\u984c\u3001\u304a\u75b2\u308c\u69d8\uff01\u6240\u6709\u6a29\u30fb\u501f\u7528\u30fb\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u3068\u3044\u3046\u4e09\u4f4d\u4e00\u4f53\u306e\u529b\u3092\u5b9f\u8df5\u3067\u78ba\u8a8d\u3067\u304d\u305f\u306a\u3002</p> <p>\u3053\u308c\u3089\u306e\u6982\u5ff5\u3092\u901a\u3057\u3066\u5b66\u3093\u3060\u3053\u3068\uff1a</p> <ul> <li>\u6240\u6709\u6a29 - \u30e1\u30e2\u30ea\u5b89\u5168\u6027\u306e\u57fa\u76e4</li> <li>\u501f\u7528 - \u52b9\u7387\u7684\u306a\u30c7\u30fc\u30bf\u5171\u6709</li> <li>\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0 - \u53c2\u7167\u306e\u751f\u5b58\u671f\u9593\u7ba1\u7406</li> <li>\u30b3\u30f3\u30d1\u30a4\u30e9\u3068\u306e\u5bfe\u8a71 - \u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304b\u3089\u5b66\u3076</li> </ul> <p>\u4e94\u6761\u5148\u751f\u306e\u6700\u7d42\u30e1\u30c3\u30bb\u30fc\u30b8</p> <p>Rust\u306e\u6240\u6709\u6a29\u30b7\u30b9\u30c6\u30e0\u306f\u6700\u521d\u306f\u8907\u96d1\u306b\u611f\u3058\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002\u3067\u3082\u4e00\u5ea6\u30de\u30b9\u30bf\u30fc\u3059\u308c\u3070\u3001\u4ed6\u306e\u8a00\u8a9e\u3067\u306f\u5473\u308f\u3048\u306a\u3044\u5b89\u5168\u6027\u3068\u6027\u80fd\u3092\u624b\u306b\u5165\u308c\u3089\u308c\u308b\u3002</p> <p>\u4ffa\u306e\u7121\u4e0b\u9650\u8853\u5f0f\u3068\u540c\u3058\u3067\u3001\u7406\u89e3\u3059\u308c\u3070\u7d76\u5bfe\u7684\u306a\u529b\u306b\u306a\u308b\u3002\u8ae6\u3081\u305a\u306b\u7df4\u7fd2\u3092\u7d9a\u3051\u308d\u3002</p> <p>\u6b21\u306f\u7b2c3\u7ae0\u300c\u53cd\u8ee2\u8853\u5f0f\u7de8\u300d\u3067\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u5b66\u307c\u3046\u3002\u30a8\u30e9\u30fc\u3092\u9006\u624b\u306b\u53d6\u308b\u6280\u8853\u3060\u3002</p> <p>\u300c\u6240\u6709\u6a29\u3092\u6975\u3081\u308c\u3070\u3001\u30e1\u30e2\u30ea\u306e\u652f\u914d\u8005\u306b\u306a\u308c\u308b\u300d</p>"},{"location":"chapter02/lifetime/","title":"\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0 - \u546a\u529b\u306e\u6301\u7d9a\u6642\u9593","text":""},{"location":"chapter02/lifetime/#-_1","title":"\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u3068\u306f - \u8853\u5f0f\u306e\u6709\u52b9\u671f\u9593","text":"<p>\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u306f\u53c2\u7167\u304c\u3044\u3064\u307e\u3067\u6709\u52b9\u306a\u306e\u304b\u3092\u793a\u3059\u3082\u306e\u3060\u3002\u4ffa\u306e\u8853\u5f0f\u306b\u3082\u767a\u52d5\u6642\u9593\u304c\u3042\u308b\u3088\u3046\u306b\u3001\u53c2\u7167\u306b\u3082\u300c\u751f\u304d\u3066\u3044\u308b\u671f\u9593\u300d\u304c\u3042\u308b\u3002</p> <p>\u5927\u62b5\u306e\u5834\u5408\u3001Rust\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u81ea\u52d5\u3067\u63a8\u8ad6\u3057\u3066\u304f\u308c\u308b\u304c\u3001\u6642\u306b\u306f\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u3053\u308c\u304c\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u6ce8\u91c8\u3060\u3002</p> <p>\u4e94\u6761\u5148\u751f\u306e\u89e3\u8aac</p> <p>\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u6ce8\u91c8\u306f <code>'a</code> \u306e\u3088\u3046\u306a\u5f62\u3067\u66f8\u304f\u3002\u3053\u308c\u306f\u300c\u3053\u306e\u53c2\u7167\u306f\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0'a\u306e\u9593\u6709\u52b9\u300d\u3068\u3044\u3046\u610f\u5473\u3060\u3002 \u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u30c0\u30f3\u30b0\u30ea\u30f3\u30b0\u30dd\u30a4\u30f3\u30bf\uff08\u7121\u52b9\u306a\u53c2\u7167\uff09\u3092\u9632\u3050\u305f\u3081\u306b\u4f7f\u3046\u3002</p>"},{"location":"chapter02/lifetime/#_1","title":"\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u306e\u57fa\u672c\u6982\u5ff5","text":""},{"location":"chapter02/lifetime/#_2","title":"\u57fa\u672c\u7684\u306a\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0","text":"<pre><code>fn main() {\n    let technique;               // -------+-- 'a\n                                //        |\n    {                           //        |\n        let temp = String::from(\"\u84bc\");  // -+-- 'b\n        technique = &amp;temp;      //        |  |\n    }                           // -------+  |\n                                //           |\n    // println!(\"{}\", technique); // \u30a8\u30e9\u30fc\uff01'b &lt; 'a\n}                               // ----------+\n</code></pre>"},{"location":"chapter02/lifetime/#_3","title":"\u6709\u52b9\u306a\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0","text":"<pre><code>fn main() {\n    let temp = String::from(\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\");  // ----+-- 'a\n    let technique = &amp;temp;                     //     |\n    println!(\"{}\", technique);                 //     |\n}                                              // ----+\n</code></pre>"},{"location":"chapter02/lifetime/#_4","title":"\u95a2\u6570\u306e\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u6ce8\u91c8","text":""},{"location":"chapter02/lifetime/#_5","title":"\u57fa\u672c\u7684\u306a\u6ce8\u91c8","text":"<pre><code>// \u5165\u529b\u3068\u51fa\u529b\u304c\u540c\u3058\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\nfn get_longer&lt;'a&gt;(x: &amp;'a str, y: &amp;'a str) -&gt; &amp;'a str {\n    if x.len() &gt; y.len() {\n        x\n    } else {\n        y\n    }\n}\n\nfn main() {\n    let technique1 = \"\u84bc\";\n    let technique2 = \"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\";\n\n    let longer = get_longer(technique1, technique2);\n    println!(\"\u9577\u3044\u65b9: {}\", longer);\n}\n</code></pre>"},{"location":"chapter02/lifetime/#_6","title":"\u8907\u6570\u306e\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0","text":"<pre><code>// \u7570\u306a\u308b\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u3092\u6301\u3064\u53c2\u7167\nfn combine_techniques&lt;'a, 'b&gt;(\n    primary: &amp;'a str,\n    secondary: &amp;'b str\n) -&gt; String {\n    format!(\"{} + {}\", primary, secondary)\n}\n\nfn main() {\n    let blue = \"\u84bc\";\n    let red = \"\u8d6b\";\n    let combo = combine_techniques(blue, red);\n    println!(\"\u30b3\u30f3\u30dc: {}\", combo);\n}\n</code></pre>"},{"location":"chapter02/lifetime/#_7","title":"\u69cb\u9020\u4f53\u306e\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0","text":""},{"location":"chapter02/lifetime/#_8","title":"\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u3092\u6301\u3064\u69cb\u9020\u4f53","text":"<pre><code>// \u53c2\u7167\u3092\u4fdd\u6301\u3059\u308b\u69cb\u9020\u4f53\nstruct TechniqueRef&lt;'a&gt; {\n    name: &amp;'a str,\n    power: i32,\n}\n\nimpl&lt;'a&gt; TechniqueRef&lt;'a&gt; {\n    fn new(name: &amp;'a str, power: i32) -&gt; Self {\n        TechniqueRef { name, power }\n    }\n\n    fn display(&amp;self) {\n        println!(\"{}: \u5a01\u529b {}\", self.name, self.power);\n    }\n\n    // \u30e1\u30bd\u30c3\u30c9\u306e\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\n    fn get_name(&amp;self) -&gt; &amp;'a str {\n        self.name\n    }\n}\n\nfn main() {\n    let technique_name = \"\u7121\u4e0b\u9650\u546a\u8853\";\n    let technique = TechniqueRef::new(technique_name, 9999);\n\n    technique.display();\n    println!(\"\u6280\u540d: {}\", technique.get_name());\n}\n</code></pre>"},{"location":"chapter02/lifetime/#_9","title":"\u8907\u96d1\u306a\u69cb\u9020\u4f53","text":"<pre><code>struct Sorcerer&lt;'a&gt; {\n    name: &amp;'a str,\n    techniques: Vec&lt;&amp;'a str&gt;,\n    power: i32,\n}\n\nimpl&lt;'a&gt; Sorcerer&lt;'a&gt; {\n    fn new(name: &amp;'a str) -&gt; Self {\n        Sorcerer {\n            name,\n            techniques: Vec::new(),\n            power: 1000,\n        }\n    }\n\n    fn add_technique(&amp;mut self, technique: &amp;'a str) {\n        self.techniques.push(technique);\n        self.power += 200;\n    }\n\n    // \u6700\u5f37\u306e\u6280\u3092\u8fd4\u3059\n    fn get_strongest_technique(&amp;self) -&gt; Option&lt;&amp;'a str&gt; {\n        // \u7c21\u6613\u7684\u306a\u5224\u5b9a\n        if self.techniques.iter().any(|&amp;t| t.contains(\"\u7d2b\")) {\n            self.techniques.iter().find(|&amp;&amp;t| t.contains(\"\u7d2b\")).copied()\n        } else if self.techniques.iter().any(|&amp;t| t.contains(\"\u8308\")) {\n            self.techniques.iter().find(|&amp;&amp;t| t.contains(\"\u8308\")).copied()\n        } else {\n            self.techniques.first().copied()\n        }\n    }\n\n    // \u6226\u95d8\u529b\u8a55\u4fa1\n    fn evaluate_combat_power(&amp;self) -&gt; String {\n        match self.techniques.len() {\n            0 =&gt; \"\u521d\u5fc3\u8005\".to_string(),\n            1..=2 =&gt; \"\u4e2d\u7d1a\u8005\".to_string(),\n            3..=4 =&gt; \"\u4e0a\u7d1a\u8005\".to_string(),\n            _ =&gt; \"\u6700\u5f37\u5019\u88dc\".to_string(),\n        }\n    }\n}\n\nfn main() {\n    // \u3059\u3079\u3066\u306e\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u306f'static\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\n    let mut gojo = Sorcerer::new(\"\u4e94\u6761\u609f\");\n\n    gojo.add_technique(\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\");\n    gojo.add_technique(\"\u8853\u5f0f\u53cd\u8ee2\u300e\u8d6b\u300f\");\n    gojo.add_technique(\"\u865a\u5f0f\u300e\u8308\u300f\");\n    gojo.add_technique(\"\u7121\u4e0b\u9650\u546a\u8853\u300e\u7d2b\u300f\");\n\n    println!(\"\u546a\u8853\u5e2b: {}\", gojo.name);\n    println!(\"\u546a\u529b: {}\", gojo.power);\n    println!(\"\u8a55\u4fa1: {}\", gojo.evaluate_combat_power());\n\n    if let Some(strongest) = gojo.get_strongest_technique() {\n        println!(\"\u6700\u5f37\u6280: {}\", strongest);\n    }\n}\n</code></pre>"},{"location":"chapter02/lifetime/#_10","title":"\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u7701\u7565\u898f\u5247","text":"<p>Rust\u306b\u306f3\u3064\u306e\u7701\u7565\u898f\u5247\u304c\u3042\u308b\uff1a</p>"},{"location":"chapter02/lifetime/#1","title":"\u898f\u52471: \u5404\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u72ec\u81ea\u306e\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0","text":"<pre><code>// \u3053\u308c\u306f...\nfn analyze(text: &amp;str) -&gt; usize {\n    text.len()\n}\n\n// \u5b9f\u969b\u306f\u3053\u3046\u89e3\u91c8\u3055\u308c\u308b\nfn analyze_explicit&lt;'a&gt;(text: &amp;'a str) -&gt; usize {\n    text.len()\n}\n</code></pre>"},{"location":"chapter02/lifetime/#2","title":"\u898f\u52472: \u5358\u4e00\u306e\u5165\u529b\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u304c\u51fa\u529b\u306b\u9069\u7528","text":"<pre><code>// \u3053\u308c\u306f...\nfn get_first_word(text: &amp;str) -&gt; &amp;str {\n    text.split_whitespace().next().unwrap_or(\"\")\n}\n\n// \u5b9f\u969b\u306f\u3053\u3046\u89e3\u91c8\u3055\u308c\u308b\nfn get_first_word_explicit&lt;'a&gt;(text: &amp;'a str) -&gt; &amp;'a str {\n    text.split_whitespace().next().unwrap_or(\"\")\n}\n</code></pre>"},{"location":"chapter02/lifetime/#3-self","title":"\u898f\u52473: &amp;self\u304c\u3042\u308b\u5834\u5408\u3001\u305d\u306e\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u304c\u51fa\u529b\u306b\u9069\u7528","text":"<pre><code>struct Technique {\n    name: String,\n}\n\nimpl Technique {\n    // \u3053\u308c\u306f...\n    fn get_name(&amp;self) -&gt; &amp;str {\n        &amp;self.name\n    }\n\n    // \u5b9f\u969b\u306f\u3053\u3046\u89e3\u91c8\u3055\u308c\u308b\n    fn get_name_explicit&lt;'a&gt;(&amp;'a self) -&gt; &amp;'a str {\n        &amp;self.name\n    }\n}\n</code></pre>"},{"location":"chapter02/lifetime/#_11","title":"\u9759\u7684\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0","text":""},{"location":"chapter02/lifetime/#static","title":"'static \u30e9\u30a4\u30d5\u30bf\u30a4\u30e0","text":"<pre><code>// \u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u306f'static\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\nfn get_default_technique() -&gt; &amp;'static str {\n    \"\u57fa\u672c\u8853\u5f0f\"  // \u30d7\u30ed\u30b0\u30e9\u30e0\u7d42\u4e86\u307e\u3067\u6709\u52b9\n}\n\n// \u9759\u7684\u5909\u6570\nstatic ULTIMATE_TECHNIQUE: &amp;str = \"\u7121\u4e0b\u9650\u546a\u8853\u300e\u7d2b\u300f\";\n\nfn main() {\n    let default = get_default_technique();\n    println!(\"\u30c7\u30d5\u30a9\u30eb\u30c8: {}\", default);\n    println!(\"\u7a76\u6975\u6280: {}\", ULTIMATE_TECHNIQUE);\n}\n</code></pre>"},{"location":"chapter02/lifetime/#box","title":"Box\u3068\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0 <pre><code>// \u30d2\u30fc\u30d7\u4e0a\u306e\u30c7\u30fc\u30bf\u306f\u6240\u6709\u6a29\u3067\u7ba1\u7406\nfn create_owned_technique() -&gt; Box&lt;str&gt; {\n    let technique = String::from(\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\");\n    technique.into_boxed_str()\n}\n\nfn main() {\n    let owned = create_owned_technique();\n    println!(\"\u6240\u6709\u3055\u308c\u305f\u6280: {}\", owned);\n}\n</code></pre>","text":""},{"location":"chapter02/lifetime/#-_2","title":"\u5b9f\u8df5\u4f8b - \u546a\u8853\u6226\u95d8\u8a18\u9332\u30b7\u30b9\u30c6\u30e0","text":"<pre><code>use std::collections::HashMap;\n\n// \u6226\u95d8\u8a18\u9332\nstruct BattleRecord&lt;'a&gt; {\n    combatants: Vec&lt;&amp;'a str&gt;,\n    techniques_used: Vec&lt;&amp;'a str&gt;,\n    winner: Option&lt;&amp;'a str&gt;,\n    duration: u32,\n}\n\nimpl&lt;'a&gt; BattleRecord&lt;'a&gt; {\n    fn new() -&gt; Self {\n        BattleRecord {\n            combatants: Vec::new(),\n            techniques_used: Vec::new(),\n            winner: None,\n            duration: 0,\n        }\n    }\n\n    fn add_combatant(&amp;mut self, name: &amp;'a str) {\n        self.combatants.push(name);\n    }\n\n    fn record_technique(&amp;mut self, technique: &amp;'a str) {\n        self.techniques_used.push(technique);\n    }\n\n    fn set_winner(&amp;mut self, winner: &amp;'a str) {\n        if self.combatants.contains(&amp;winner) {\n            self.winner = Some(winner);\n        }\n    }\n\n    fn set_duration(&amp;mut self, duration: u32) {\n        self.duration = duration;\n    }\n\n    // \u6226\u95d8\u7d71\u8a08\u3092\u8fd4\u3059\n    fn get_statistics(&amp;self) -&gt; BattleStats&lt;'a&gt; {\n        let mut technique_count = HashMap::new();\n        for &amp;technique in &amp;self.techniques_used {\n            *technique_count.entry(technique).or_insert(0) += 1;\n        }\n\n        BattleStats {\n            record: self,\n            technique_frequency: technique_count,\n        }\n    }\n}\n\n// \u6226\u95d8\u7d71\u8a08\uff08\u5143\u306e\u8a18\u9332\u3078\u306e\u53c2\u7167\u3092\u4fdd\u6301\uff09\nstruct BattleStats&lt;'a&gt; {\n    record: &amp;'a BattleRecord&lt;'a&gt;,\n    technique_frequency: HashMap&lt;&amp;'a str, i32&gt;,\n}\n\nimpl&lt;'a&gt; BattleStats&lt;'a&gt; {\n    fn most_used_technique(&amp;self) -&gt; Option&lt;&amp;'a str&gt; {\n        self.technique_frequency\n            .iter()\n            .max_by_key(|(_, &amp;count)| count)\n            .map(|(&amp;technique, _)| technique)\n    }\n\n    fn generate_report(&amp;self) -&gt; String {\n        let mut report = String::new();\n\n        report.push_str(\"=== \u6226\u95d8\u30ec\u30dd\u30fc\u30c8 ===\\n\");\n        report.push_str(&amp;format!(\"\u53c2\u52a0\u8005: {:?}\\n\", self.record.combatants));\n        report.push_str(&amp;format!(\"\u7d99\u7d9a\u6642\u9593: {}\u5206\\n\", self.record.duration));\n\n        if let Some(winner) = self.record.winner {\n            report.push_str(&amp;format!(\"\u52dd\u8005: {}\\n\", winner));\n        } else {\n            report.push_str(\"\u52dd\u8005: \u672a\u6c7a\u5b9a\\n\");\n        }\n\n        report.push_str(&amp;format!(\"\u4f7f\u7528\u6280\u6570: {}\\n\", self.record.techniques_used.len()));\n\n        if let Some(most_used) = self.most_used_technique() {\n            let count = self.technique_frequency[most_used];\n            report.push_str(&amp;format!(\"\u6700\u591a\u4f7f\u7528\u6280: {} ({}\u56de)\\n\", most_used, count));\n        }\n\n        report.push_str(\"\\n=== \u6280\u4f7f\u7528\u5c65\u6b74 ===\\n\");\n        for (i, technique) in self.record.techniques_used.iter().enumerate() {\n            report.push_str(&amp;format!(\"{}. {}\\n\", i + 1, technique));\n        }\n\n        report\n    }\n}\n\n// \u6226\u95d8\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u30fc\nstruct BattleSimulator;\n\nimpl BattleSimulator {\n    fn simulate_gojo_vs_sukuna&lt;'a&gt;() -&gt; BattleRecord&lt;'a&gt; {\n        let mut record = BattleRecord::new();\n\n        record.add_combatant(\"\u4e94\u6761\u609f\");\n        record.add_combatant(\"\u4e21\u9762\u5bbf\u513a\");\n\n        // \u6226\u95d8\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\n        record.record_technique(\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\");\n        record.record_technique(\"\u89e3\");\n        record.record_technique(\"\u8853\u5f0f\u53cd\u8ee2\u300e\u8d6b\u300f\");\n        record.record_technique(\"\u634c\");\n        record.record_technique(\"\u865a\u5f0f\u300e\u8308\u300f\");\n        record.record_technique(\"\u4f0f\u9b54\u5fa1\u5eda\u5b50\");\n        record.record_technique(\"\u7121\u4e0b\u9650\u546a\u8853\u300e\u7d2b\u300f\");\n        record.record_technique(\"\u9818\u57df\u5c55\u958b\u30fb\u7121\u91cf\u7a7a\u51e6\");\n\n        record.set_winner(\"\u4e94\u6761\u609f\");\n        record.set_duration(15);\n\n        record\n    }\n\n    fn simulate_student_battle&lt;'a&gt;(student1: &amp;'a str, student2: &amp;'a str) -&gt; BattleRecord&lt;'a&gt; {\n        let mut record = BattleRecord::new();\n\n        record.add_combatant(student1);\n        record.add_combatant(student2);\n\n        record.record_technique(\"\u57fa\u672c\u8853\u5f0f\");\n        record.record_technique(\"\u546a\u5177\u64cd\u4f5c\");\n        record.record_technique(\"\u5f37\u5316\u8853\u5f0f\");\n        record.record_technique(\"\u9632\u5fa1\u8853\u5f0f\");\n\n        // \u30e9\u30f3\u30c0\u30e0\u306a\u52dd\u8005\uff08\u7c21\u6613\u7248\uff09\n        record.set_winner(student1);\n        record.set_duration(8);\n\n        record\n    }\n}\n\nfn main() {\n    println!(\"=== \u546a\u8853\u6226\u95d8\u8a18\u9332\u30b7\u30b9\u30c6\u30e0 ===\\n\");\n\n    // \u6700\u5f37\u5bfe\u6c7a\n    let gojo_battle = BattleSimulator::simulate_gojo_vs_sukuna();\n    let stats = gojo_battle.get_statistics();\n    println!(\"{}\", stats.generate_report());\n\n    // \u5b66\u751f\u6226\u95d8\n    let student_battle = BattleSimulator::simulate_student_battle(\"\u864e\u6756\u60a0\u4ec1\", \"\u4f0f\u9ed2\u6075\");\n    let student_stats = student_battle.get_statistics();\n    println!(\"{}\", student_stats.generate_report());\n}\n</code></pre>"},{"location":"chapter02/lifetime/#_12","title":"\u9ad8\u5ea6\u306a\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0","text":""},{"location":"chapter02/lifetime/#_13","title":"\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u5883\u754c <pre><code>use std::fmt::Display;\n\n// \u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u5883\u754c\u4ed8\u304d\u306e\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u95a2\u6570\nfn display_longest&lt;'a, T&gt;(x: &amp;'a T, y: &amp;'a T) -&gt; &amp;'a T\nwhere\n    T: Display + PartialOrd,\n{\n    println!(\"\u6bd4\u8f03\u4e2d: {} vs {}\", x, y);\n    if x &gt; y { x } else { y }\n}\n\nfn main() {\n    let power1 = 1000;\n    let power2 = 1500;\n\n    let stronger = display_longest(&amp;power1, &amp;power2);\n    println!(\"\u3088\u308a\u5f37\u3044\u546a\u529b: {}\", stronger);\n}\n</code></pre>","text":""},{"location":"chapter02/lifetime/#_14","title":"\u9ad8\u968e\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u5883\u754c <pre><code>// \u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306e\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\nfn apply_to_technique&lt;'a, F&gt;(technique: &amp;'a str, func: F) -&gt; String\nwhere\n    F: Fn(&amp;str) -&gt; String,\n{\n    func(technique)\n}\n\nfn enhance_technique(technique: &amp;str) -&gt; String {\n    format!(\"\u5f37\u5316\u3055\u308c\u305f{}\", technique)\n}\n\nfn main() {\n    let technique = \"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\";\n    let result = apply_to_technique(technique, enhance_technique);\n    println!(\"{}\", result);\n}\n</code></pre>","text":""},{"location":"chapter02/lifetime/#_15","title":"\u307e\u3068\u3081","text":"<p>\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u306e\u7fd2\u5f97\u306f\u5b8c\u4e86\u3060\uff01\u91cd\u8981\u306a\u30dd\u30a4\u30f3\u30c8\uff1a</p> <ol> <li>\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u6ce8\u91c8 - <code>'a</code> \u3067\u53c2\u7167\u306e\u6709\u52b9\u671f\u9593\u3092\u660e\u793a</li> <li>\u7701\u7565\u898f\u5247 - \u591a\u304f\u306e\u5834\u5408\u306f\u81ea\u52d5\u63a8\u8ad6</li> <li>\u69cb\u9020\u4f53\u306e\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0 - \u53c2\u7167\u3092\u4fdd\u6301\u3059\u308b\u69cb\u9020\u4f53</li> <li>'static - \u30d7\u30ed\u30b0\u30e9\u30e0\u5168\u4f53\u3067\u6709\u52b9\u306a\u53c2\u7167</li> <li>\u501f\u7528\u30c1\u30a7\u30c3\u30ab\u30fc - \u30c0\u30f3\u30b0\u30ea\u30f3\u30b0\u30dd\u30a4\u30f3\u30bf\u3092\u9632\u6b62</li> </ol> <p>\u3053\u308c\u3067\u6240\u6709\u6a29\u3001\u501f\u7528\u3001\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u306e\u4e09\u4f4d\u4e00\u4f53\u3092\u30de\u30b9\u30bf\u30fc\u3057\u305f\u3002\u4ffa\u306e\u7121\u4e0b\u9650\u8853\u5f0f\u306e\u3088\u3046\u306b\u3001\u5b8c\u74a7\u306a\u5236\u5fa1\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306a\u3002</p> <p>\u300c\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u3092\u7406\u89e3\u3059\u308c\u3070\u3001\u53c2\u7167\u306e\u751f\u6b7b\u3092\u81ea\u5728\u306b\u64cd\u308c\u308b\u300d</p>"},{"location":"chapter02/ownership/","title":"\u7b2c2\u7ae0\uff1a\u546a\u529b\u64cd\u4f5c\u7de8 - \u6240\u6709\u6a29\u30b7\u30b9\u30c6\u30e0","text":""},{"location":"chapter02/ownership/#-","title":"\u6240\u6709\u6a29\u30b7\u30b9\u30c6\u30e0\u3068\u306f - \u546a\u529b\u306e\u7d76\u5bfe\u652f\u914d","text":"<p>\u3055\u3042\u3001\u3053\u3053\u304b\u3089\u304c\u672c\u5f53\u306eRust\u306e\u529b\u3060\u3002\u6240\u6709\u6a29\u30b7\u30b9\u30c6\u30e0\uff08Ownership System\uff09- \u3053\u308c\u306f\u4ffa\u306e\u7121\u4e0b\u9650\u8853\u5f0f\u3068\u540c\u3058\u304f\u3001\u7d76\u5bfe\u7684\u306a\u652f\u914d\u529b\u3092\u6301\u3064\u30b7\u30b9\u30c6\u30e0\u3060\u3002</p> <p>\u4ed6\u306e\u8a00\u8a9e\u3067\u306f\u3001\u30e1\u30e2\u30ea\u7ba1\u7406\u306f\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u306b\u4e38\u6295\u3052\u304b\u3001\u30ac\u30d9\u30fc\u30b8\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u983c\u3063\u3066\u3044\u308b\u3002\u3067\u3082Rust\u306f\u9055\u3046\u3002\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u546a\u529b\u306e\u6d41\u308c\u3092\u5b8c\u74a7\u306b\u7ba1\u7406\u3057\u3066\u304f\u308c\u308b\u3002</p> <p>\u4e94\u6761\u5148\u751f\u306e\u89e3\u8aac</p> <p>\u6240\u6709\u6a29\u30b7\u30b9\u30c6\u30e0\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u5b89\u5168\u306b\u30e1\u30e2\u30ea\u3092\u7ba1\u7406\u3059\u308b\u305f\u3081\u306eRust\u72ec\u81ea\u306e\u30b7\u30b9\u30c6\u30e0\u3060\u3002 \u3053\u308c\u306b\u3088\u308a\u3001\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u3084\u30c0\u30f3\u30b0\u30ea\u30f3\u30b0\u30dd\u30a4\u30f3\u30bf\u306a\u3069\u306e\u546a\u3044\u3092\u5b8c\u5168\u306b\u6392\u9664\u3067\u304d\u308b\u3002</p>"},{"location":"chapter02/ownership/#3","title":"\u6240\u6709\u6a29\u306e3\u3064\u306e\u6cd5\u5247","text":"<p>\u4ffa\u306e\u7121\u4e0b\u9650\u8853\u5f0f\u306b\u3082\u53b3\u683c\u306a\u30eb\u30fc\u30eb\u304c\u3042\u308b\u3088\u3046\u306b\u3001\u6240\u6709\u6a29\u306b\u30823\u3064\u306e\u7d76\u5bfe\u6cd5\u5247\u304c\u3042\u308b\uff1a</p>"},{"location":"chapter02/ownership/#1","title":"\u6cd5\u52471\uff1a\u5404\u5024\u306b\u306f\u6240\u6709\u8005\u304c\u5b58\u5728\u3059\u308b","text":"<pre><code>fn main() {\n    let technique = String::from(\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\");  // technique\u304c\u6240\u6709\u8005\n    // \u3053\u306e\u6642\u70b9\u3067\u3001technique\u304c\u6587\u5b57\u5217\u30c7\u30fc\u30bf\u306e\u552f\u4e00\u306e\u6240\u6709\u8005\n}\n</code></pre>"},{"location":"chapter02/ownership/#2","title":"\u6cd5\u52472\uff1a\u540c\u6642\u306b\u8907\u6570\u306e\u6240\u6709\u8005\u306f\u5b58\u5728\u3057\u306a\u3044","text":"<pre><code>fn main() {\n    let technique = String::from(\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\");\n    let other_technique = technique;  // \u6240\u6709\u6a29\u304cother_technique\u306b\u79fb\u52d5\n\n    // println!(\\\"{}\\\", technique);  // \u30a8\u30e9\u30fc\uff01\u3082\u3046\u4f7f\u3048\u306a\u3044\n    println!(\\\"{}\\\", other_technique);  // \u3053\u308c\u306fOK\n}\n</code></pre>"},{"location":"chapter02/ownership/#3_1","title":"\u6cd5\u52473\uff1a\u6240\u6709\u8005\u304c\u30b9\u30b3\u30fc\u30d7\u3092\u629c\u3051\u308b\u3068\u5024\u306f\u7834\u68c4\u3055\u308c\u308b","text":"<pre><code>fn main() {\n    {\n        let technique = String::from(\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\");\n        println!(\\\"{}\\\", technique);\n    }  // \u3053\u3053\u3067technique\u306f\u81ea\u52d5\u7684\u306b\u7834\u68c4\u3055\u308c\u308b\n\n    // println!(\\\"{}\\\", technique);  // \u30a8\u30e9\u30fc\uff01\u30b9\u30b3\u30fc\u30d7\u5916\n}\n</code></pre>"},{"location":"chapter02/ownership/#move-","title":"\u6240\u6709\u6a29\u306e\u79fb\u52d5\uff08Move\uff09- \u546a\u529b\u306e\u79fb\u8b72","text":""},{"location":"chapter02/ownership/#_1","title":"\u57fa\u672c\u7684\u306a\u79fb\u52d5","text":"<pre><code>fn main() {\n    let original = String::from(\\\"\u7121\u4e0b\u9650\u546a\u8853\\\");\n    let transferred = original;  // \u6240\u6709\u6a29\u304c\u79fb\u52d5\n\n    println!(\\\"\u79fb\u8b72\u5f8c: {}\\\", transferred);\n    // println!(\\\"{}\\\", original);  // \u30a8\u30e9\u30fc\uff01\u4f7f\u7528\u4e0d\u53ef\n}\n</code></pre>"},{"location":"chapter02/ownership/#_2","title":"\u95a2\u6570\u3078\u306e\u79fb\u52d5","text":"<pre><code>fn cast_technique(spell: String) {\n    println!(\\\"{}\u3092\u767a\u52d5\uff01\\\", spell);\n}  // \u3053\u3053\u3067spell\u304c\u7834\u68c4\u3055\u308c\u308b\n\nfn main() {\n    let my_technique = String::from(\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\");\n    cast_technique(my_technique);  // \u6240\u6709\u6a29\u304c\u95a2\u6570\u306b\u79fb\u52d5\n\n    // println!(\\\"{}\\\", my_technique);  // \u30a8\u30e9\u30fc\uff01\u3082\u3046\u4f7f\u3048\u306a\u3044\n}\n</code></pre>"},{"location":"chapter02/ownership/#_3","title":"\u95a2\u6570\u304b\u3089\u306e\u623b\u308a\u5024","text":"<pre><code>fn create_technique() -&gt; String {\n    let technique = String::from(\\\"\u865a\u5f0f\u300e\u8308\u300f\\\");\n    technique  // \u6240\u6709\u6a29\u3092\u547c\u3073\u51fa\u3057\u5143\u306b\u79fb\u52d5\n}\n\nfn main() {\n    let my_technique = create_technique();  // \u6240\u6709\u6a29\u3092\u53d7\u3051\u53d6\u308b\n    println!(\\\"\u7fd2\u5f97\u3057\u305f\u6280: {}\\\", my_technique);\n}\n</code></pre>"},{"location":"chapter02/ownership/#-_1","title":"\u30b3\u30d4\u30fc\u53ef\u80fd\u306a\u578b - \u57fa\u672c\u8853\u5f0f\u306e\u8907\u88fd","text":"<p>\u4e00\u90e8\u306e\u578b\u306f<code>Copy</code>\u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3057\u3066\u304a\u308a\u3001\u6240\u6709\u6a29\u306e\u79fb\u52d5\u3067\u306f\u306a\u304f\u5024\u306e\u30b3\u30d4\u30fc\u304c\u767a\u751f\u3059\u308b\uff1a</p> <pre><code>fn main() {\n    // \u57fa\u672c\u578b\u306fCopy\u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\n    let power = 1000;\n    let copied_power = power;  // \u30b3\u30d4\u30fc\u304c\u767a\u751f\n\n    println!(\\\"\u5143\u306e\u546a\u529b: {}\\\", power);         // \u4f7f\u3048\u308b\uff01\n    println!(\\\"\u30b3\u30d4\u30fc\u3057\u305f\u546a\u529b: {}\\\", copied_power);  // \u3053\u308c\u3082\u4f7f\u3048\u308b\uff01\n\n    // \u30bf\u30d7\u30eb\u3082\u8981\u7d20\u304c\u3059\u3079\u3066Copy\u306a\u3089Copy\n    let coordinates = (10, 20);\n    let copied_coords = coordinates;\n\n    println!(\\\"\u5143\u306e\u5ea7\u6a19: {:?}\\\", coordinates);\n    println!(\\\"\u30b3\u30d4\u30fc\u3057\u305f\u5ea7\u6a19: {:?}\\\", copied_coords);\n}\n</code></pre>"},{"location":"chapter02/ownership/#copy-vs-clone","title":"Copy vs Clone","text":"<pre><code>fn main() {\n    // Copy - \u6697\u9ed9\u7684\u306a\u8907\u88fd\uff08\u30b9\u30bf\u30c3\u30af\u4e0a\u306e\u5024\uff09\n    let x = 5;\n    let y = x;  // \u81ea\u52d5\u7684\u306b\u30b3\u30d4\u30fc\n\n    // Clone - \u660e\u793a\u7684\u306a\u8907\u88fd\uff08\u30d2\u30fc\u30d7\u4e0a\u306e\u5024\u3082\u53ef\u80fd\uff09\n    let technique = String::from(\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\");\n    let cloned_technique = technique.clone();  // \u660e\u793a\u7684\u306b\u30af\u30ed\u30fc\u30f3\n\n    println!(\\\"\u5143\u306e\u6280: {}\\\", technique);\n    println!(\\\"\u30af\u30ed\u30fc\u30f3\u3057\u305f\u6280: {}\\\", cloned_technique);\n}\n</code></pre>"},{"location":"chapter02/ownership/#-_2","title":"\u5b9f\u8df5\u4f8b - \u546a\u8853\u5e2b\u306e\u6280\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0","text":"<pre><code>struct Sorcerer {\n    name: String,\n    techniques: Vec&lt;String&gt;,\n    power: i32,\n}\n\nimpl Sorcerer {\n    // \u65b0\u3057\u3044\u546a\u8853\u5e2b\u3092\u4f5c\u6210\uff08\u6240\u6709\u6a29\u3092\u53d7\u3051\u53d6\u308b\uff09\n    fn new(name: String) -&gt; Self {\n        Sorcerer {\n            name,\n            techniques: Vec::new(),\n            power: 1000,\n        }\n    }\n\n    // \u6280\u3092\u7fd2\u5f97\uff08\u6240\u6709\u6a29\u3092\u53d7\u3051\u53d6\u308b\uff09\n    fn learn_technique(&amp;mut self, technique: String) {\n        println!(\\\"{} \u304c {} \u3092\u7fd2\u5f97\uff01\\\", self.name, technique);\n        self.techniques.push(technique);\n        self.power += 200;\n    }\n\n    // \u6280\u3092\u4f7f\u7528\uff08\u6240\u6709\u6a29\u306f\u79fb\u52d5\u3057\u306a\u3044\uff09\n    fn use_technique(&amp;self, index: usize) -&gt; Option&lt;&amp;String&gt; {\n        self.techniques.get(index)\n    }\n\n    // \u6280\u3092\u5fd8\u308c\u308b\uff08\u6240\u6709\u6a29\u3092\u8fd4\u3059\uff09\n    fn forget_technique(&amp;mut self, index: usize) -&gt; Option&lt;String&gt; {\n        if index &lt; self.techniques.len() {\n            Some(self.techniques.remove(index))\n        } else {\n            None\n        }\n    }\n\n    // \u6280\u3092\u4ed6\u306e\u546a\u8853\u5e2b\u306b\u79fb\u8b72\n    fn transfer_technique(&amp;mut self, other: &amp;mut Sorcerer, index: usize) {\n        if let Some(technique) = self.forget_technique(index) {\n            println!(\\\"{} \u304c {} \u306b {} \u3092\u79fb\u8b72\\\",\n                     self.name, other.name, technique);\n            other.learn_technique(technique);\n        }\n    }\n}\n\nfn main() {\n    // \u546a\u8853\u5e2b\u4f5c\u6210\n    let mut gojo = Sorcerer::new(String::from(\\\"\u4e94\u6761\u609f\\\"));\n    let mut megumi = Sorcerer::new(String::from(\\\"\u4f0f\u9ed2\u6075\\\"));\n\n    // \u6280\u306e\u7fd2\u5f97\n    gojo.learn_technique(String::from(\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\"));\n    gojo.learn_technique(String::from(\\\"\u8853\u5f0f\u53cd\u8ee2\u300e\u8d6b\u300f\\\"));\n    gojo.learn_technique(String::from(\\\"\u865a\u5f0f\u300e\u8308\u300f\\\"));\n\n    megumi.learn_technique(String::from(\\\"\u7389\u72ac\\\"));\n    megumi.learn_technique(String::from(\\\"\u5927\u86c7\\\"));\n\n    // \u6280\u306e\u4f7f\u7528\n    if let Some(technique) = gojo.use_technique(0) {\n        println!(\\\"{} \u304c {} \u3092\u4f7f\u7528\uff01\\\", gojo.name, technique);\n    }\n\n    // \u6280\u306e\u79fb\u8b72\uff08\u57fa\u672c\u8853\u5f0f\u3092\u6559\u3048\u308b\uff09\n    gojo.transfer_technique(&amp;mut megumi, 0);  // \u84bc\u3092\u79fb\u8b72\n\n    println!(\\\"\\\\n=== \u6700\u7d42\u72b6\u614b ===\\\");\n    println!(\\\"{}: \u546a\u529b {}, \u6280\u6570 {}\\\", gojo.name, gojo.power, gojo.techniques.len());\n    println!(\\\"{}: \u546a\u529b {}, \u6280\u6570 {}\\\", megumi.name, megumi.power, megumi.techniques.len());\n}\n</code></pre>"},{"location":"chapter02/ownership/#_4","title":"\u6240\u6709\u6a29\u306e\u8a2d\u8a08\u30d1\u30bf\u30fc\u30f3","text":""},{"location":"chapter02/ownership/#1_1","title":"\u30d1\u30bf\u30fc\u30f31: \u6240\u6709\u6a29\u3092\u79fb\u52d5\u3055\u305b\u308b\u95a2\u6570","text":"<pre><code>// \u6587\u5b57\u5217\u3092\u53d7\u3051\u53d6\u3063\u3066\u52a0\u5de5\u3057\u3001\u65b0\u3057\u3044\u6587\u5b57\u5217\u3092\u8fd4\u3059\nfn enhance_technique(mut technique: String) -&gt; String {\n    technique.push_str(\\\" - \u5f37\u5316\u7248\\\");\n    technique\n}\n\nfn main() {\n    let basic = String::from(\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\");\n    let enhanced = enhance_technique(basic);  // \u6240\u6709\u6a29\u79fb\u52d5\n\n    println!(\\\"{}\\\", enhanced);\n    // basic\u306f\u3082\u3046\u4f7f\u3048\u306a\u3044\n}\n</code></pre>"},{"location":"chapter02/ownership/#2_1","title":"\u30d1\u30bf\u30fc\u30f32: \u8907\u6570\u306e\u623b\u308a\u5024\u3067\u6240\u6709\u6a29\u3092\u8fd4\u3059","text":"<pre><code>fn analyze_and_return(technique: String) -&gt; (String, usize) {\n    let length = technique.len();\n    (technique, length)  // \u6240\u6709\u6a29\u3092\u623b\u3059\n}\n\nfn main() {\n    let technique = String::from(\\\"\u7121\u4e0b\u9650\u546a\u8853\\\");\n    let (returned_technique, length) = analyze_and_return(technique);\n\n    println!(\\\"{} \u306e\u6587\u5b57\u6570: {}\\\", returned_technique, length);\n}\n</code></pre>"},{"location":"chapter02/ownership/#3_2","title":"\u30d1\u30bf\u30fc\u30f33: \u6240\u6709\u6a29\u3092\u4e00\u6642\u7684\u306b\u501f\u7528","text":"<pre><code>// \u6b21\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u8a73\u3057\u304f\u8aac\u660e\u3059\u308b\u304c\u3001\u53c2\u7167\u3092\u4f7f\u7528\nfn get_technique_info(technique: &amp;String) -&gt; usize {\n    technique.len()  // \u6240\u6709\u6a29\u3092\u53d6\u3089\u305a\u306b\u60c5\u5831\u3092\u53d6\u5f97\n}\n\nfn main() {\n    let technique = String::from(\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\");\n    let info = get_technique_info(&amp;technique);  // \u501f\u7528\n\n    println!(\\\"{} \u306e\u60c5\u5831: {}\\\", technique, info);  // \u307e\u3060\u4f7f\u3048\u308b\uff01\n}\n</code></pre>"},{"location":"chapter02/ownership/#_5","title":"\u6240\u6709\u6a29\u3068\u30c7\u30fc\u30bf\u7af6\u5408","text":"<p>Rust\u306e\u6240\u6709\u6a29\u30b7\u30b9\u30c6\u30e0\u306f\u3001\u30c7\u30fc\u30bf\u7af6\u5408\u3092\u9632\u3050\uff1a</p> <pre><code>use std::thread;\n\nfn main() {\n    let technique = String::from(\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\");\n\n    // \u8907\u6570\u306e\u30b9\u30ec\u30c3\u30c9\u3067\u540c\u3058\u30c7\u30fc\u30bf\u3092\u4f7f\u3046\u3068\u30a8\u30e9\u30fc\n    /*\n    let handle1 = thread::spawn(|| {\n        println!(\\\"\u30b9\u30ec\u30c3\u30c91: {}\\\", technique);  // \u30a8\u30e9\u30fc\uff01\n    });\n\n    let handle2 = thread::spawn(|| {\n        println!(\\\"\u30b9\u30ec\u30c3\u30c92: {}\\\", technique);  // \u30a8\u30e9\u30fc\uff01\n    });\n    */\n\n    // \u6b63\u3057\u3044\u65b9\u6cd5\u306f\u6b21\u7ae0\u3067\u5b66\u3076\uff08Clone\u3001Arc\u3001Mutex\u306a\u3069\uff09\n    println!(\\\"\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9: {}\\\", technique);\n}\n</code></pre>"},{"location":"chapter02/ownership/#_6","title":"\u7df4\u7fd2\u554f\u984c","text":"### \u554f\u984c1: \u546a\u529b\u306e\u79fb\u8b72  \u6587\u5b57\u5217\u3092\u53d7\u3051\u53d6\u3063\u3066\u5148\u982d\u306b\u300c\u6700\u5f37\u306e\u300d\u3092\u8ffd\u52a0\u3059\u308b\u95a2\u6570\u3092\u4f5c\u6210\u3057\u3001\u6240\u6709\u6a29\u306e\u79fb\u52d5\u3092\u78ba\u8a8d\u305b\u3088\u3002   \u89e3\u7b54\u3092\u898b\u308b <pre><code>fn make_strongest(mut technique: String) -&gt; String {\n    technique.insert_str(0, \\\"\u6700\u5f37\u306e\\\");\n    technique\n}\n\nfn main() {\n    let basic_technique = String::from(\\\"\u546a\u8853\u5e2b\\\");\n    println!(\\\"\u5143: {}\\\", basic_technique);\n\n    let strongest = make_strongest(basic_technique);\n    println!(\\\"\u5909\u63db\u5f8c: {}\\\", strongest);\n\n    // println!(\\\"{}\\\", basic_technique);  // \u30a8\u30e9\u30fc\uff01\u6240\u6709\u6a29\u304c\u79fb\u52d5\u3057\u305f\n}\n</code></pre>   ### \u554f\u984c2: \u6280\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u7ba1\u7406  \u30d9\u30af\u30bf\u30fc\u306e\u6240\u6709\u6a29\u3092\u64cd\u4f5c\u3057\u3066\u3001\u6280\u306e\u30ea\u30b9\u30c8\u3092\u7ba1\u7406\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u305b\u3088\u3002   \u89e3\u7b54\u3092\u898b\u308b <pre><code>fn add_technique(mut techniques: Vec&lt;String&gt;, new_technique: String) -&gt; Vec&lt;String&gt; {\n    techniques.push(new_technique);\n    techniques\n}\n\nfn combine_techniques(mut tech1: Vec&lt;String&gt;, mut tech2: Vec&lt;String&gt;) -&gt; Vec&lt;String&gt; {\n    tech1.append(&amp;mut tech2);  // tech2\u306e\u5185\u5bb9\u3092tech1\u306b\u79fb\u52d5\n    tech1\n}\n\nfn main() {\n    let gojo_techniques = vec![\n        String::from(\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\"),\n        String::from(\\\"\u8853\u5f0f\u53cd\u8ee2\u300e\u8d6b\u300f\\\")\n    ];\n\n    let megumi_techniques = vec![\n        String::from(\\\"\u7389\u72ac\\\"),\n        String::from(\\\"\u5927\u86c7\\\")\n    ];\n\n    let enhanced_gojo = add_technique(gojo_techniques, String::from(\\\"\u865a\u5f0f\u300e\u8308\u300f\\\"));\n    let all_techniques = combine_techniques(enhanced_gojo, megumi_techniques);\n\n    println!(\\\"\u5168\u6280\u8853: {:?}\\\", all_techniques);\n    println!(\\\"\u6280\u6570: {}\\\", all_techniques.len());\n}\n</code></pre>"},{"location":"chapter02/ownership/#_7","title":"\u307e\u3068\u3081","text":"<p>\u6240\u6709\u6a29\u30b7\u30b9\u30c6\u30e0\u306e\u57fa\u672c\u306f\u7406\u89e3\u3067\u304d\u305f\u304b\uff1f\u91cd\u8981\u306a\u30dd\u30a4\u30f3\u30c8\uff1a</p> <ol> <li>\u552f\u4e00\u306e\u6240\u6709\u8005 - \u5404\u5024\u306b\u306f\u5fc5\u305a1\u4eba\u306e\u6240\u6709\u8005</li> <li>\u79fb\u52d5\uff08Move\uff09 - \u6240\u6709\u6a29\u306f\u79fb\u52d5\u3059\u308b</li> <li>\u81ea\u52d5\u89e3\u653e - \u30b9\u30b3\u30fc\u30d7\u7d42\u4e86\u3067\u81ea\u52d5\u7684\u306b\u30e1\u30e2\u30ea\u89e3\u653e</li> <li>Copy vs Clone - \u30b9\u30bf\u30c3\u30af vs \u30d2\u30fc\u30d7\u306e\u30c7\u30fc\u30bf</li> <li>\u5b89\u5168\u6027 - \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u30e1\u30e2\u30ea\u5b89\u5168\u6027\u3092\u4fdd\u8a3c</li> </ol> <p>\u3053\u308c\u306f\u4ffa\u306e\u7121\u4e0b\u9650\u8853\u5f0f\u3068\u540c\u3058\u3067\u3001\u4e00\u5ea6\u7406\u89e3\u3059\u308c\u3070\u7d76\u5bfe\u7684\u306a\u529b\u306b\u306a\u308b\u3002\u3067\u3082\u6700\u521d\u306f\u6238\u60d1\u3046\u304b\u3082\u3057\u308c\u306a\u3044\u3002\u305d\u308c\u304c\u666e\u901a\u3060\u3002</p> <p>\u6b21\u306f\u501f\u7528\uff08Borrowing\uff09\u306b\u3064\u3044\u3066\u5b66\u307c\u3046\u3002\u6240\u6709\u6a29\u3092\u79fb\u52d5\u3055\u305b\u305a\u306b\u30c7\u30fc\u30bf\u3092\u4f7f\u3046\u6280\u8853\u3060\u3002</p> <p>\u300c\u6240\u6709\u6a29\u3092\u7406\u89e3\u3059\u308c\u3070\u3001\u30e1\u30e2\u30ea\u306e\u546a\u3044\u304b\u3089\u89e3\u653e\u3055\u308c\u308b\u300d</p>"},{"location":"chapter03/error_handling/","title":"\u9ad8\u5ea6\u306a\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0 - \u53cd\u8ee2\u8853\u5f0f\u306e\u5965\u7fa9","text":""},{"location":"chapter03/error_handling/#-_1","title":"\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306e\u9032\u5316 - \u8907\u96d1\u306a\u8853\u5f0f\u306e\u5236\u5fa1","text":"<p>\u57fa\u672c\u7684\u306aOption\u578b\u3068Result\u578b\u3092\u30de\u30b9\u30bf\u30fc\u3057\u305f\u304c\u3001\u5b9f\u969b\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f\u3088\u308a\u8907\u96d1\u306a\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u304c\u5fc5\u8981\u306b\u306a\u308b\u3002\u8907\u6570\u306e\u30a8\u30e9\u30fc\u578b\u3092\u7d71\u5408\u3057\u3001\u30ab\u30b9\u30bf\u30e0\u30a8\u30e9\u30fc\u3092\u4f5c\u6210\u3057\u3001\u30a8\u30e9\u30fc\u306e\u9023\u9396\u3092\u7f8e\u3057\u304f\u51e6\u7406\u3059\u308b\u3002\u3053\u308c\u304c\u53cd\u8ee2\u8853\u5f0f\u306e\u5965\u7fa9\u3060\u3002</p> <p>\u4e94\u6761\u5148\u751f\u306e\u89e3\u8aac</p> <p>\u5927\u898f\u6a21\u306a\u30b7\u30b9\u30c6\u30e0\u3067\u306f\u3001\u69d8\u3005\u306a\u7a2e\u985e\u306e\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3059\u308b\u3002\u30d5\u30a1\u30a4\u30ebI/O\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3001\u30d1\u30fc\u30b9\u3001\u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af... \u3053\u308c\u3089\u3092\u7d71\u4e00\u7684\u306b\u6271\u3046\u305f\u3081\u306e\u9ad8\u5ea6\u306a\u30c6\u30af\u30cb\u30c3\u30af\u3092\u7fd2\u5f97\u3057\u3088\u3046\u3002</p>"},{"location":"chapter03/error_handling/#_1","title":"\u30ab\u30b9\u30bf\u30e0\u30a8\u30e9\u30fc\u578b\u306e\u8a2d\u8a08","text":""},{"location":"chapter03/error_handling/#_2","title":"\u57fa\u672c\u7684\u306a\u30ab\u30b9\u30bf\u30e0\u30a8\u30e9\u30fc","text":"<pre><code>use std::fmt;\n\n#[derive(Debug)]\nenum SorceryError {\n    InsufficientPower { required: i32, current: i32 },\n    TechniqueNotFound(String),\n    InvalidTarget(String),\n    SystemError(String),\n}\n\nimpl fmt::Display for SorceryError {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        match self {\n            SorceryError::InsufficientPower { required, current } =&gt; {\n                write!(f, \\\"\u546a\u529b\u4e0d\u8db3: {}\u5fc5\u8981, {}\u3057\u304b\u3042\u308a\u307e\u305b\u3093\\\", required, current)\n            },\n            SorceryError::TechniqueNotFound(name) =&gt; {\n                write!(f, \\\"\u8853\u5f0f'{}'\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\\\", name)\n            },\n            SorceryError::InvalidTarget(reason) =&gt; {\n                write!(f, \\\"\u7121\u52b9\u306a\u5bfe\u8c61: {}\\\", reason)\n            },\n            SorceryError::SystemError(msg) =&gt; {\n                write!(f, \\\"\u30b7\u30b9\u30c6\u30e0\u30a8\u30e9\u30fc: {}\\\", msg)\n            },\n        }\n    }\n}\n\nimpl std::error::Error for SorceryError {}\n\n// \u30ab\u30b9\u30bf\u30e0\u30a8\u30e9\u30fc\u3092\u4f7f\u3063\u305f\u95a2\u6570\nfn cast_advanced_technique(\n    power: i32,\n    technique: &amp;str,\n    target: &amp;str\n) -&gt; Result&lt;String, SorceryError&gt; {\n\n    // \u546a\u529b\u30c1\u30a7\u30c3\u30af\n    let required_power = match technique {\n        \\\"\u84bc\\\" =&gt; 500,\n        \\\"\u8d6b\\\" =&gt; 800,\n        \\\"\u8308\\\" =&gt; 1500,\n        \\\"\u7d2b\\\" =&gt; 3000,\n        _ =&gt; return Err(SorceryError::TechniqueNotFound(technique.to_string())),\n    };\n\n    if power &lt; required_power {\n        return Err(SorceryError::InsufficientPower {\n            required: required_power,\n            current: power\n        });\n    }\n\n    // \u5bfe\u8c61\u30c1\u30a7\u30c3\u30af\n    if target.is_empty() {\n        return Err(SorceryError::InvalidTarget(\\\"\u5bfe\u8c61\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u307e\u305b\u3093\\\".to_string()));\n    }\n\n    Ok(format!(\\\"{} \u3092 {} \u306b\u5411\u3051\u3066\u767a\u52d5\uff01\\\", technique, target))\n}\n\nfn main() {\n    let test_cases = [\n        (2000, \\\"\u84bc\\\", \\\"\u546a\u970aA\\\"),\n        (300, \\\"\u8d6b\\\", \\\"\u546a\u970aB\\\"),\n        (1000, \\\"\u672a\u77e5\u306e\u8853\u5f0f\\\", \\\"\u546a\u970aC\\\"),\n        (2000, \\\"\u8308\\\", \\\"\\\"),\n    ];\n\n    for (power, technique, target) in test_cases.iter() {\n        match cast_advanced_technique(*power, technique, target) {\n            Ok(result) =&gt; println!(\\\"\u2713 {}\\\", result),\n            Err(error) =&gt; println!(\\\"\u2717 {}\\\", error),\n        }\n    }\n}\n</code></pre>"},{"location":"chapter03/error_handling/#_3","title":"\u30a8\u30e9\u30fc\u306e\u968e\u5c64\u5316","text":"<pre><code>#[derive(Debug)]\nenum DatabaseError {\n    ConnectionFailed,\n    QueryFailed(String),\n    DataCorrupted,\n}\n\n#[derive(Debug)]\nenum NetworkError {\n    Timeout,\n    ConnectionRefused,\n    InvalidResponse(String),\n}\n\n#[derive(Debug)]\nenum ApplicationError {\n    Database(DatabaseError),\n    Network(NetworkError),\n    Sorcery(SorceryError),\n    ValidationError(String),\n}\n\nimpl fmt::Display for DatabaseError {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        match self {\n            DatabaseError::ConnectionFailed =&gt; write!(f, \\\"\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u63a5\u7d9a\u5931\u6557\\\"),\n            DatabaseError::QueryFailed(query) =&gt; write!(f, \\\"\u30af\u30a8\u30ea\u5931\u6557: {}\\\", query),\n            DatabaseError::DataCorrupted =&gt; write!(f, \\\"\u30c7\u30fc\u30bf\u304c\u7834\u640d\u3057\u3066\u3044\u307e\u3059\\\"),\n        }\n    }\n}\n\nimpl fmt::Display for NetworkError {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        match self {\n            NetworkError::Timeout =&gt; write!(f, \\\"\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\\\"),\n            NetworkError::ConnectionRefused =&gt; write!(f, \\\"\u63a5\u7d9a\u304c\u62d2\u5426\u3055\u308c\u307e\u3057\u305f\\\"),\n            NetworkError::InvalidResponse(msg) =&gt; write!(f, \\\"\u7121\u52b9\u306a\u30ec\u30b9\u30dd\u30f3\u30b9: {}\\\", msg),\n        }\n    }\n}\n\nimpl fmt::Display for ApplicationError {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        match self {\n            ApplicationError::Database(err) =&gt; write!(f, \\\"DB: {}\\\", err),\n            ApplicationError::Network(err) =&gt; write!(f, \\\"Network: {}\\\", err),\n            ApplicationError::Sorcery(err) =&gt; write!(f, \\\"Sorcery: {}\\\", err),\n            ApplicationError::ValidationError(msg) =&gt; write!(f, \\\"Validation: {}\\\", msg),\n        }\n    }\n}\n\nimpl std::error::Error for DatabaseError {}\nimpl std::error::Error for NetworkError {}\nimpl std::error::Error for ApplicationError {}\n\n// \u30a8\u30e9\u30fc\u578b\u306e\u5909\u63db\nimpl From&lt;DatabaseError&gt; for ApplicationError {\n    fn from(err: DatabaseError) -&gt; Self {\n        ApplicationError::Database(err)\n    }\n}\n\nimpl From&lt;NetworkError&gt; for ApplicationError {\n    fn from(err: NetworkError) -&gt; Self {\n        ApplicationError::Network(err)\n    }\n}\n\nimpl From&lt;SorceryError&gt; for ApplicationError {\n    fn from(err: SorceryError) -&gt; Self {\n        ApplicationError::Sorcery(err)\n    }\n}\n</code></pre>"},{"location":"chapter03/error_handling/#_4","title":"\u5916\u90e8\u30af\u30ec\u30fc\u30c8\u306e\u30a8\u30e9\u30fc\u3068\u306e\u7d71\u5408","text":"<pre><code>use std::fs;\nuse std::io;\nuse std::num::ParseIntError;\n\n#[derive(Debug)]\nenum ConfigError {\n    IoError(io::Error),\n    ParseError(ParseIntError),\n    ValidationError(String),\n    MissingField(String),\n}\n\nimpl fmt::Display for ConfigError {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        match self {\n            ConfigError::IoError(err) =&gt; write!(f, \\\"I/O \u30a8\u30e9\u30fc: {}\\\", err),\n            ConfigError::ParseError(err) =&gt; write!(f, \\\"\u30d1\u30fc\u30b9\u30a8\u30e9\u30fc: {}\\\", err),\n            ConfigError::ValidationError(msg) =&gt; write!(f, \\\"\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30a8\u30e9\u30fc: {}\\\", msg),\n            ConfigError::MissingField(field) =&gt; write!(f, \\\"\u5fc5\u9808\u30d5\u30a3\u30fc\u30eb\u30c9 '{}'\u304c\u3042\u308a\u307e\u305b\u3093\\\", field),\n        }\n    }\n}\n\nimpl std::error::Error for ConfigError {}\n\n// \u5916\u90e8\u30af\u30ec\u30fc\u30c8\u306e\u30a8\u30e9\u30fc\u304b\u3089\u306e\u5909\u63db\nimpl From&lt;io::Error&gt; for ConfigError {\n    fn from(err: io::Error) -&gt; Self {\n        ConfigError::IoError(err)\n    }\n}\n\nimpl From&lt;ParseIntError&gt; for ConfigError {\n    fn from(err: ParseIntError) -&gt; Self {\n        ConfigError::ParseError(err)\n    }\n}\n\n#[derive(Debug)]\nstruct SorcererConfig {\n    name: String,\n    power: i32,\n    grade: String,\n}\n\nimpl SorcererConfig {\n    fn load_from_file(filename: &amp;str) -&gt; Result&lt;Self, ConfigError&gt; {\n        let content = fs::read_to_string(filename)?;  // ?\u3067io::Error\u3092\u81ea\u52d5\u5909\u63db\n\n        let lines: Vec&lt;&amp;str&gt; = content.lines().collect();\n\n        if lines.len() &lt; 3 {\n            return Err(ConfigError::ValidationError(\n                \\\"\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u884c\u6570\u304c\u4e0d\u8db3\u3057\u3066\u3044\u307e\u3059\\\".to_string()\n            ));\n        }\n\n        let name = lines[0].trim();\n        if name.is_empty() {\n            return Err(ConfigError::MissingField(\\\"name\\\".to_string()));\n        }\n\n        let power: i32 = lines[1].trim().parse()?;  // ?\u3067ParseIntError\u3092\u81ea\u52d5\u5909\u63db\n\n        if power &lt; 0 {\n            return Err(ConfigError::ValidationError(\n                \\\"\u546a\u529b\u306f0\u4ee5\u4e0a\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\\\".to_string()\n            ));\n        }\n\n        let grade = lines[2].trim();\n        if grade.is_empty() {\n            return Err(ConfigError::MissingField(\\\"grade\\\".to_string()));\n        }\n\n        Ok(SorcererConfig {\n            name: name.to_string(),\n            power,\n            grade: grade.to_string(),\n        })\n    }\n\n    fn validate(&amp;self) -&gt; Result&lt;(), ConfigError&gt; {\n        if self.name.len() &lt; 2 {\n            return Err(ConfigError::ValidationError(\n                \\\"\u540d\u524d\u306f2\u6587\u5b57\u4ee5\u4e0a\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\\\".to_string()\n            ));\n        }\n\n        let valid_grades = [\\\"\u7279\u7d1a\\\", \\\"1\u7d1a\\\", \\\"2\u7d1a\\\", \\\"3\u7d1a\\\", \\\"4\u7d1a\\\"];\n        if !valid_grades.contains(&amp;self.grade.as_str()) {\n            return Err(ConfigError::ValidationError(\n                format!(\\\"\u7121\u52b9\u306a\u7b49\u7d1a: {}\\\", self.grade)\n            ));\n        }\n\n        Ok(())\n    }\n}\n\nfn load_and_validate_config(filename: &amp;str) -&gt; Result&lt;SorcererConfig, ConfigError&gt; {\n    let config = SorcererConfig::load_from_file(filename)?;\n    config.validate()?;\n    Ok(config)\n}\n\nfn main() {\n    // \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\uff08\u30c6\u30b9\u30c8\u7528\uff09\n    let test_config = \\\"\u4e94\u6761\u609f\\\\n3000\\\\n\u7279\u7d1a\\\";\n    if let Err(e) = fs::write(\\\"test_config.txt\\\", test_config) {\n        println!(\\\"\u30c6\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u4f5c\u6210\u30a8\u30e9\u30fc: {}\\\", e);\n        return;\n    }\n\n    // \u6b63\u5e38\u30b1\u30fc\u30b9\n    match load_and_validate_config(\\\"test_config.txt\\\") {\n        Ok(config) =&gt; println!(\\\"\u2713 \u8a2d\u5b9a\u8aad\u307f\u8fbc\u307f\u6210\u529f: {:?}\\\", config),\n        Err(error) =&gt; println!(\\\"\u2717 \u8a2d\u5b9a\u8aad\u307f\u8fbc\u307f\u5931\u6557: {}\\\", error),\n    }\n\n    // \u30a8\u30e9\u30fc\u30b1\u30fc\u30b9\uff08\u5b58\u5728\u3057\u306a\u3044\u30d5\u30a1\u30a4\u30eb\uff09\n    match load_and_validate_config(\\\"nonexistent.txt\\\") {\n        Ok(config) =&gt; println!(\\\"\u2713 \u8a2d\u5b9a\u8aad\u307f\u8fbc\u307f\u6210\u529f: {:?}\\\", config),\n        Err(error) =&gt; println!(\\\"\u2717 \u8a2d\u5b9a\u8aad\u307f\u8fbc\u307f\u5931\u6557: {}\\\", error),\n    }\n\n    // \u7121\u52b9\u306a\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\n    let invalid_config = \\\"\\\\ninvalid_power\\\\n\u7121\u52b9\u7b49\u7d1a\\\";\n    if let Err(e) = fs::write(\\\"invalid_config.txt\\\", invalid_config) {\n        println!(\\\"\u30c6\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u4f5c\u6210\u30a8\u30e9\u30fc: {}\\\", e);\n        return;\n    }\n\n    match load_and_validate_config(\\\"invalid_config.txt\\\") {\n        Ok(config) =&gt; println!(\\\"\u2713 \u8a2d\u5b9a\u8aad\u307f\u8fbc\u307f\u6210\u529f: {:?}\\\", config),\n        Err(error) =&gt; println!(\\\"\u2717 \u8a2d\u5b9a\u8aad\u307f\u8fbc\u307f\u5931\u6557: {}\\\", error),\n    }\n}\n</code></pre>"},{"location":"chapter03/error_handling/#anyhowthiserror","title":"anyhow\u3068thiserror\u30af\u30ec\u30fc\u30c8","text":"<p>\u5b9f\u969b\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f\u3001<code>anyhow</code>\u3068<code>thiserror</code>\u30af\u30ec\u30fc\u30c8\u304c\u3088\u304f\u4f7f\u308f\u308c\u308b\uff1a</p> <pre><code>// Cargo.toml\u306b\u8ffd\u52a0:\n// [dependencies]\n// anyhow = \\\"1.0\\\"\n// thiserror = \\\"1.0\\\"\n\nuse thiserror::Error;\nuse anyhow::{Context, Result as AnyhowResult};\n\n#[derive(Error, Debug)]\nenum AdvancedSorceryError {\n    #[error(\\\"\u546a\u529b\u4e0d\u8db3: {required}\u5fc5\u8981, {current}\u3057\u304b\u3042\u308a\u307e\u305b\u3093\\\")]\n    InsufficientPower { required: i32, current: i32 },\n\n    #[error(\\\"\u8853\u5f0f'{name}'\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\\\")]\n    TechniqueNotFound { name: String },\n\n    #[error(\\\"IO \u30a8\u30e9\u30fc\\\")]\n    Io(#[from] std::io::Error),\n\n    #[error(\\\"\u30d1\u30fc\u30b9\u30a8\u30e9\u30fc\\\")]\n    Parse(#[from] std::num::ParseIntError),\n\n    #[error(\\\"\u8a2d\u5b9a\u30a8\u30e9\u30fc: {message}\\\")]\n    Config { message: String },\n}\n\n// anyhow\u3092\u4f7f\u3063\u305f\u7c21\u5358\u306a\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\nfn complex_operation() -&gt; AnyhowResult&lt;String&gt; {\n    let content = std::fs::read_to_string(\\\"config.txt\\\")\n        .context(\\\"\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3057\u307e\u3057\u305f\\\")?;\n\n    let power: i32 = content.trim().parse()\n        .context(\\\"\u546a\u529b\u306e\u5024\u3092\u30d1\u30fc\u30b9\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\\\")?;\n\n    if power &lt; 1000 {\n        anyhow::bail!(\\\"\u546a\u529b\u304c\u4f4e\u3059\u304e\u307e\u3059: {}\\\", power);\n    }\n\n    Ok(format!(\\\"\u546a\u529b{}\u3067\u521d\u671f\u5316\u5b8c\u4e86\\\", power))\n}\n\nfn main() {\n    match complex_operation() {\n        Ok(result) =&gt; println!(\\\"\u2713 {}\\\", result),\n        Err(error) =&gt; {\n            println!(\\\"\u2717 \u30a8\u30e9\u30fc: {}\\\", error);\n\n            // \u30a8\u30e9\u30fc\u30c1\u30a7\u30fc\u30f3\u306e\u8868\u793a\n            for cause in error.chain() {\n                println!(\\\"  \u539f\u56e0: {}\\\", cause);\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"chapter03/error_handling/#-_2","title":"\u5b9f\u8df5\u4f8b - \u546a\u8853\u5e2b\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0","text":"<pre><code>use std::collections::HashMap;\nuse std::fs;\nuse std::io;\n\n#[derive(Debug)]\nenum SystemError {\n    FileError(io::Error),\n    ParseError(String),\n    ValidationError(String),\n    NotFound(String),\n    PermissionDenied(String),\n    DatabaseCorrupted,\n}\n\nimpl fmt::Display for SystemError {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        match self {\n            SystemError::FileError(err) =&gt; write!(f, \\\"\u30d5\u30a1\u30a4\u30eb\u30a8\u30e9\u30fc: {}\\\", err),\n            SystemError::ParseError(msg) =&gt; write!(f, \\\"\u30d1\u30fc\u30b9\u30a8\u30e9\u30fc: {}\\\", msg),\n            SystemError::ValidationError(msg) =&gt; write!(f, \\\"\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30a8\u30e9\u30fc: {}\\\", msg),\n            SystemError::NotFound(item) =&gt; write!(f, \\\"{}\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\\\", item),\n            SystemError::PermissionDenied(action) =&gt; write!(f, \\\"{}\u306e\u6a29\u9650\u304c\u3042\u308a\u307e\u305b\u3093\\\", action),\n            SystemError::DatabaseCorrupted =&gt; write!(f, \\\"\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304c\u7834\u640d\u3057\u3066\u3044\u307e\u3059\\\"),\n        }\n    }\n}\n\nimpl std::error::Error for SystemError {}\n\nimpl From&lt;io::Error&gt; for SystemError {\n    fn from(err: io::Error) -&gt; Self {\n        SystemError::FileError(err)\n    }\n}\n\n#[derive(Debug, Clone)]\nstruct Sorcerer {\n    id: u32,\n    name: String,\n    power: i32,\n    grade: String,\n    techniques: Vec&lt;String&gt;,\n    active: bool,\n}\n\nimpl Sorcerer {\n    fn new(id: u32, name: String, power: i32, grade: String) -&gt; Result&lt;Self, SystemError&gt; {\n        if name.is_empty() {\n            return Err(SystemError::ValidationError(\\\"\u540d\u524d\u304c\u7a7a\u3067\u3059\\\".to_string()));\n        }\n\n        if power &lt; 0 {\n            return Err(SystemError::ValidationError(\\\"\u546a\u529b\u306f0\u4ee5\u4e0a\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\\\".to_string()));\n        }\n\n        let valid_grades = [\\\"\u7279\u7d1a\\\", \\\"1\u7d1a\\\", \\\"2\u7d1a\\\", \\\"3\u7d1a\\\", \\\"4\u7d1a\\\"];\n        if !valid_grades.contains(&amp;grade.as_str()) {\n            return Err(SystemError::ValidationError(format!(\\\"\u7121\u52b9\u306a\u7b49\u7d1a: {}\\\", grade)));\n        }\n\n        Ok(Sorcerer {\n            id,\n            name,\n            power,\n            grade,\n            techniques: Vec::new(),\n            active: true,\n        })\n    }\n\n    fn add_technique(&amp;mut self, technique: String) -&gt; Result&lt;(), SystemError&gt; {\n        if technique.is_empty() {\n            return Err(SystemError::ValidationError(\\\"\u8853\u5f0f\u540d\u304c\u7a7a\u3067\u3059\\\".to_string()));\n        }\n\n        if self.techniques.contains(&amp;technique) {\n            return Err(SystemError::ValidationError(\n                format!(\\\"\u8853\u5f0f'{}'\u306f\u65e2\u306b\u7fd2\u5f97\u6e08\u307f\u3067\u3059\\\", technique)\n            ));\n        }\n\n        self.techniques.push(technique);\n        Ok(())\n    }\n\n    fn to_string(&amp;self) -&gt; String {\n        format!(\\\"{}|{}|{}|{}|{}|{}\\\",\n                self.id, self.name, self.power, self.grade,\n                self.techniques.join(\\\",\\\"), self.active)\n    }\n\n    fn from_string(line: &amp;str) -&gt; Result&lt;Self, SystemError&gt; {\n        let parts: Vec&lt;&amp;str&gt; = line.split('|').collect();\n\n        if parts.len() != 6 {\n            return Err(SystemError::ParseError(\n                format!(\\\"\u7121\u52b9\u306a\u30d5\u30a9\u30fc\u30de\u30c3\u30c8: {}\\\", line)\n            ));\n        }\n\n        let id: u32 = parts[0].parse()\n            .map_err(|_| SystemError::ParseError(\\\"ID\u306e\u30d1\u30fc\u30b9\u306b\u5931\u6557\\\".to_string()))?;\n\n        let power: i32 = parts[2].parse()\n            .map_err(|_| SystemError::ParseError(\\\"\u546a\u529b\u306e\u30d1\u30fc\u30b9\u306b\u5931\u6557\\\".to_string()))?;\n\n        let active: bool = parts[5].parse()\n            .map_err(|_| SystemError::ParseError(\\\"\u30a2\u30af\u30c6\u30a3\u30d6\u72b6\u614b\u306e\u30d1\u30fc\u30b9\u306b\u5931\u6557\\\".to_string()))?;\n\n        let techniques = if parts[4].is_empty() {\n            Vec::new()\n        } else {\n            parts[4].split(',').map(|s| s.to_string()).collect()\n        };\n\n        Ok(Sorcerer {\n            id,\n            name: parts[1].to_string(),\n            power,\n            grade: parts[3].to_string(),\n            techniques,\n            active,\n        })\n    }\n}\n\nstruct SorcererManager {\n    sorcerers: HashMap&lt;u32, Sorcerer&gt;,\n    next_id: u32,\n    filename: String,\n}\n\nimpl SorcererManager {\n    fn new(filename: &amp;str) -&gt; Self {\n        SorcererManager {\n            sorcerers: HashMap::new(),\n            next_id: 1,\n            filename: filename.to_string(),\n        }\n    }\n\n    fn load_from_file(&amp;mut self) -&gt; Result&lt;(), SystemError&gt; {\n        match fs::read_to_string(&amp;self.filename) {\n            Ok(content) =&gt; {\n                for line in content.lines() {\n                    if line.trim().is_empty() {\n                        continue;\n                    }\n\n                    let sorcerer = Sorcerer::from_string(line)?;\n                    self.next_id = self.next_id.max(sorcerer.id + 1);\n                    self.sorcerers.insert(sorcerer.id, sorcerer);\n                }\n                Ok(())\n            },\n            Err(err) if err.kind() == io::ErrorKind::NotFound =&gt; {\n                // \u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u7a7a\u306e\u72b6\u614b\u304b\u3089\u958b\u59cb\n                Ok(())\n            },\n            Err(err) =&gt; Err(SystemError::from(err)),\n        }\n    }\n\n    fn save_to_file(&amp;self) -&gt; Result&lt;(), SystemError&gt; {\n        let mut content = String::new();\n\n        for sorcerer in self.sorcerers.values() {\n            content.push_str(&amp;sorcerer.to_string());\n            content.push('\\\\n');\n        }\n\n        fs::write(&amp;self.filename, content)?;\n        Ok(())\n    }\n\n    fn add_sorcerer(&amp;mut self, name: String, power: i32, grade: String)\n        -&gt; Result&lt;u32, SystemError&gt; {\n        let id = self.next_id;\n        let sorcerer = Sorcerer::new(id, name, power, grade)?;\n\n        self.sorcerers.insert(id, sorcerer);\n        self.next_id += 1;\n\n        self.save_to_file()?;\n        Ok(id)\n    }\n\n    fn get_sorcerer(&amp;self, id: u32) -&gt; Result&lt;&amp;Sorcerer, SystemError&gt; {\n        self.sorcerers.get(&amp;id)\n            .ok_or_else(|| SystemError::NotFound(format!(\\\"\u546a\u8853\u5e2bID: {}\\\", id)))\n    }\n\n    fn get_sorcerer_mut(&amp;mut self, id: u32) -&gt; Result&lt;&amp;mut Sorcerer, SystemError&gt; {\n        self.sorcerers.get_mut(&amp;id)\n            .ok_or_else(|| SystemError::NotFound(format!(\\\"\u546a\u8853\u5e2bID: {}\\\", id)))\n    }\n\n    fn add_technique_to_sorcerer(&amp;mut self, id: u32, technique: String)\n        -&gt; Result&lt;(), SystemError&gt; {\n        let sorcerer = self.get_sorcerer_mut(id)?;\n        sorcerer.add_technique(technique)?;\n        self.save_to_file()?;\n        Ok(())\n    }\n\n    fn deactivate_sorcerer(&amp;mut self, id: u32) -&gt; Result&lt;(), SystemError&gt; {\n        let sorcerer = self.get_sorcerer_mut(id)?;\n\n        if !sorcerer.active {\n            return Err(SystemError::ValidationError(\n                \\\"\u546a\u8853\u5e2b\u306f\u65e2\u306b\u975e\u30a2\u30af\u30c6\u30a3\u30d6\u3067\u3059\\\".to_string()\n            ));\n        }\n\n        sorcerer.active = false;\n        self.save_to_file()?;\n        Ok(())\n    }\n\n    fn search_by_name(&amp;self, name: &amp;str) -&gt; Vec&lt;&amp;Sorcerer&gt; {\n        self.sorcerers.values()\n            .filter(|s| s.name.contains(name) &amp;&amp; s.active)\n            .collect()\n    }\n\n    fn get_by_grade(&amp;self, grade: &amp;str) -&gt; Vec&lt;&amp;Sorcerer&gt; {\n        self.sorcerers.values()\n            .filter(|s| s.grade == grade &amp;&amp; s.active)\n            .collect()\n    }\n\n    fn backup_database(&amp;self, backup_filename: &amp;str) -&gt; Result&lt;(), SystemError&gt; {\n        let content = fs::read_to_string(&amp;self.filename)?;\n        fs::write(backup_filename, content)?;\n        Ok(())\n    }\n\n    fn restore_from_backup(&amp;mut self, backup_filename: &amp;str) -&gt; Result&lt;(), SystemError&gt; {\n        let content = fs::read_to_string(backup_filename)?;\n        fs::write(&amp;self.filename, content)?;\n\n        // \u30e1\u30e2\u30ea\u4e0a\u306e\u30c7\u30fc\u30bf\u3092\u30ea\u30ed\u30fc\u30c9\n        self.sorcerers.clear();\n        self.next_id = 1;\n        self.load_from_file()?;\n\n        Ok(())\n    }\n\n    fn get_statistics(&amp;self) -&gt; HashMap&lt;String, i32&gt; {\n        let mut stats = HashMap::new();\n\n        let active_count = self.sorcerers.values()\n            .filter(|s| s.active)\n            .count() as i32;\n\n        stats.insert(\\\"total_sorcerers\\\".to_string(), self.sorcerers.len() as i32);\n        stats.insert(\\\"active_sorcerers\\\".to_string(), active_count);\n\n        for grade in [\\\"\u7279\u7d1a\\\", \\\"1\u7d1a\\\", \\\"2\u7d1a\\\", \\\"3\u7d1a\\\", \\\"4\u7d1a\\\"].iter() {\n            let count = self.get_by_grade(grade).len() as i32;\n            stats.insert(format!(\\\"{}_count\\\", grade), count);\n        }\n\n        if active_count &gt; 0 {\n            let total_power: i32 = self.sorcerers.values()\n                .filter(|s| s.active)\n                .map(|s| s.power)\n                .sum();\n            stats.insert(\\\"average_power\\\".to_string(), total_power / active_count);\n        }\n\n        stats\n    }\n}\n\nfn run_sorcerer_management_system() -&gt; Result&lt;(), SystemError&gt; {\n    let mut manager = SorcererManager::new(\\\"sorcerers.db\\\");\n\n    // \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u8aad\u307f\u8fbc\u307f\n    manager.load_from_file()\n        .or_else(|err| {\n            println!(\\\"\u8b66\u544a: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u8aad\u307f\u8fbc\u307f\u5931\u6557: {}\\\", err);\n            println!(\\\"\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\\\");\n            Ok(())\n        })?;\n\n    println!(\\\"=== \u546a\u8853\u5e2b\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0 ===\\\");\n\n    // \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u8ffd\u52a0\n    let gojo_id = manager.add_sorcerer(\n        \\\"\u4e94\u6761\u609f\\\".to_string(),\n        3000,\n        \\\"\u7279\u7d1a\\\".to_string()\n    )?;\n\n    let yuji_id = manager.add_sorcerer(\n        \\\"\u864e\u6756\u60a0\u4ec1\\\".to_string(),\n        1200,\n        \\\"1\u7d1a\\\".to_string()\n    )?;\n\n    let megumi_id = manager.add_sorcerer(\n        \\\"\u4f0f\u9ed2\u6075\\\".to_string(),\n        1000,\n        \\\"2\u7d1a\\\".to_string()\n    )?;\n\n    // \u8853\u5f0f\u306e\u8ffd\u52a0\n    manager.add_technique_to_sorcerer(gojo_id, \\\"\u7121\u4e0b\u9650\u546a\u8853\\\".to_string())?;\n    manager.add_technique_to_sorcerer(gojo_id, \\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\".to_string())?;\n    manager.add_technique_to_sorcerer(yuji_id, \\\"\u9ed2\u9583\\\".to_string())?;\n    manager.add_technique_to_sorcerer(megumi_id, \\\"\u5341\u7a2e\u5f71\u6cd5\u8853\\\".to_string())?;\n\n    // \u30c7\u30fc\u30bf\u306e\u691c\u7d22\u3068\u8868\u793a\n    println!(\\\"\\\\n=== \u546a\u8853\u5e2b\u4e00\u89a7 ===\\\");\n    for id in [gojo_id, yuji_id, megumi_id].iter() {\n        let sorcerer = manager.get_sorcerer(*id)?;\n        println!(\\\"ID {}: {} - \u546a\u529b:{} \u7b49\u7d1a:{} \u8853\u5f0f\u6570:{}\\\",\n                 sorcerer.id, sorcerer.name, sorcerer.power,\n                 sorcerer.grade, sorcerer.techniques.len());\n    }\n\n    // \u7d71\u8a08\u60c5\u5831\n    println!(\\\"\\\\n=== \u7d71\u8a08\u60c5\u5831 ===\\\");\n    let stats = manager.get_statistics();\n    for (key, value) in stats {\n        println!(\\\"{}: {}\\\", key, value);\n    }\n\n    // \u30d0\u30c3\u30af\u30a2\u30c3\u30d7\u306e\u4f5c\u6210\n    manager.backup_database(\\\"sorcerers_backup.db\\\")?;\n    println!(\\\"\\\\n\u30d0\u30c3\u30af\u30a2\u30c3\u30d7\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\\\");\n\n    Ok(())\n}\n\nfn main() {\n    match run_sorcerer_management_system() {\n        Ok(_) =&gt; println!(\\\"\\\\n\u2713 \u30b7\u30b9\u30c6\u30e0\u7d42\u4e86\\\"),\n        Err(error) =&gt; {\n            println!(\\\"\\\\n\u2717 \u30b7\u30b9\u30c6\u30e0\u30a8\u30e9\u30fc: {}\\\", error);\n            std::process::exit(1);\n        }\n    }\n}\n</code></pre>"},{"location":"chapter03/error_handling/#_5","title":"\u307e\u3068\u3081","text":"<p>\u9ad8\u5ea6\u306a\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306e\u7fd2\u5f97\u306f\u5b8c\u4e86\u3060\uff01\u91cd\u8981\u306a\u30dd\u30a4\u30f3\u30c8\uff1a</p> <ol> <li>\u30ab\u30b9\u30bf\u30e0\u30a8\u30e9\u30fc\u578b - \u30c9\u30e1\u30a4\u30f3\u56fa\u6709\u306e\u30a8\u30e9\u30fc\u8868\u73fe</li> <li>\u30a8\u30e9\u30fc\u306e\u968e\u5c64\u5316 - \u8907\u6570\u306e\u30a8\u30e9\u30fc\u578b\u306e\u7d71\u5408</li> <li>\u5916\u90e8\u30a8\u30e9\u30fc\u3068\u306e\u7d71\u5408 - From trait\u306b\u3088\u308b\u81ea\u52d5\u5909\u63db</li> <li>\u30a8\u30e9\u30fc\u30c1\u30a7\u30fc\u30f3 - \u6839\u672c\u539f\u56e0\u306e\u8ffd\u8de1</li> <li>\u5b9f\u7528\u7684\u306a\u30d1\u30bf\u30fc\u30f3 - anyhow/thiserror\u306e\u6d3b\u7528</li> </ol> <p>\u3053\u308c\u3067\u53cd\u8ee2\u8853\u5f0f\u306e\u5965\u7fa9\u3092\u30de\u30b9\u30bf\u30fc\u3057\u305f\u3002\u30a8\u30e9\u30fc\u3068\u3044\u3046\u8ca0\u306e\u8981\u7d20\u3092\u3001\u578b\u5b89\u5168\u3067\u8868\u73fe\u529b\u8c4a\u304b\u306a\u529b\u306b\u5909\u63db\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306a\u3002</p> <p>\u6b21\u306f\u7b2c4\u7ae0\u3067\u9818\u57df\u5c55\u958b\u7de8\u3001\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3068\u30c8\u30ec\u30a4\u30c8\u306e\u4e16\u754c\u306b\u9032\u3082\u3046\u3002\u3088\u308a\u62bd\u8c61\u7684\u3067\u5f37\u529b\u306a\u6982\u5ff5\u3092\u7fd2\u5f97\u3059\u308b\u6642\u3060\u3002</p> <p>\u300c\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u6975\u3081\u308c\u3070\u3001\u3069\u3093\u306a\u5931\u6557\u3082\u6210\u9577\u306e\u7ce7\u3068\u306a\u308b\u300d</p>"},{"location":"chapter03/exercises/","title":"\u7b2c3\u7ae0 \u7df4\u7fd2\u554f\u984c - \u53cd\u8ee2\u8853\u5f0f\u306e\u8a66\u7df4","text":""},{"location":"chapter03/exercises/#optionresult","title":"Option\u578b\u30fbResult\u578b\u30fb\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306e\u7dcf\u5408\u6f14\u7fd2","text":"<p>\u7b2c3\u7ae0\u3067\u5b66\u3093\u3060\u53cd\u8ee2\u8853\u5f0f\u7de8\u306e\u5185\u5bb9\u3092\u5b9f\u8df5\u3067\u78ba\u8a8d\u3057\u3088\u3046\u3002Option\u578b\u3001Result\u578b\u3001\u9ad8\u5ea6\u306a\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0 - \u3053\u308c\u3089\u306f\u4ffa\u306e\u53cd\u8ee2\u8853\u5f0f\u306e\u3088\u3046\u306b\u3001\u4e00\u898b\u30cd\u30ac\u30c6\u30a3\u30d6\u306a\u72b6\u6cc1\u3092\u5f37\u529b\u306a\u529b\u306b\u5909\u3048\u308b\u6280\u8853\u3060\u3002</p> <p>\u4e94\u6761\u5148\u751f\u304b\u3089\u306e\u30a2\u30c9\u30d0\u30a4\u30b9</p> <p>\u3053\u306e\u7ae0\u306e\u554f\u984c\u306f\u3001\u5b9f\u969b\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u3088\u304f\u906d\u9047\u3059\u308b\u30d1\u30bf\u30fc\u30f3\u3070\u304b\u308a\u3060\u3002 \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306f\u6700\u521d\u306f\u9762\u5012\u306b\u611f\u3058\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u3001\u4e00\u5ea6\u6163\u308c\u308c\u3070\u7d76\u5bfe\u7684\u306a\u5b89\u5168\u6027\u3092\u63d0\u4f9b\u3057\u3066\u304f\u308c\u308b\u3002</p>"},{"location":"chapter03/exercises/#-option","title":"\u521d\u7d1a\u7de8 - Option\u578b\u306e\u57fa\u672c\u64cd\u4f5c","text":""},{"location":"chapter03/exercises/#1","title":"\u554f\u984c1: \u546a\u8853\u5e2b\u691c\u7d22\u30b7\u30b9\u30c6\u30e0","text":"<p>\u546a\u8853\u5e2b\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089Option\u578b\u3092\u4f7f\u3063\u3066\u5b89\u5168\u306b\u691c\u7d22\u3059\u308b\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u6210\u305b\u3088\u3002</p> <pre><code>#[derive(Debug, Clone)]\nstruct Sorcerer {\n    name: String,\n    power: i32,\n    grade: String,\n}\n\nstruct SorcererDatabase {\n    sorcerers: Vec&lt;Sorcerer&gt;,\n}\n\nimpl SorcererDatabase {\n    fn new() -&gt; Self {\n        // \u3053\u3053\u306b\u5b9f\u88c5\n    }\n\n    fn add_sorcerer(&amp;mut self, sorcerer: Sorcerer) {\n        // \u3053\u3053\u306b\u5b9f\u88c5\n    }\n\n    // \u4ee5\u4e0b\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u305b\u3088\uff1a\n    // 1. \u540d\u524d\u3067\u691c\u7d22 (\u5b8c\u5168\u4e00\u81f4)\n    // 2. \u540d\u524d\u3067\u691c\u7d22 (\u90e8\u5206\u4e00\u81f4)\n    // 3. \u6700\u3082\u5f37\u3044\u546a\u8853\u5e2b\u3092\u53d6\u5f97\n    // 4. \u7279\u5b9a\u306e\u546a\u529b\u4ee5\u4e0a\u306e\u546a\u8853\u5e2b\u3092\u691c\u7d22\n    // 5. \u7279\u5b9a\u306e\u7b49\u7d1a\u306e\u546a\u8853\u5e2b\u3092\u691c\u7d22\n}\n\nfn main() {\n    // \u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\n    let sorcerers = vec![\n        Sorcerer { name: \\\"\u4e94\u6761\u609f\\\".to_string(), power: 3000, grade: \\\"\u7279\u7d1a\\\".to_string() },\n        Sorcerer { name: \\\"\u4e21\u9762\u5bbf\u513a\\\".to_string(), power: 2800, grade: \\\"\u7279\u7d1a\\\".to_string() },\n        Sorcerer { name: \\\"\u864e\u6756\u60a0\u4ec1\\\".to_string(), power: 1200, grade: \\\"1\u7d1a\\\".to_string() },\n    ];\n\n    // \u30b7\u30b9\u30c6\u30e0\u306e\u30c6\u30b9\u30c8\n}\n</code></pre> \u89e3\u7b54\u3092\u898b\u308b <pre><code>#[derive(Debug, Clone)]\nstruct Sorcerer {\n    name: String,\n    power: i32,\n    grade: String,\n}\n\nstruct SorcererDatabase {\n    sorcerers: Vec&lt;Sorcerer&gt;,\n}\n\nimpl SorcererDatabase {\n    fn new() -&gt; Self {\n        SorcererDatabase {\n            sorcerers: Vec::new(),\n        }\n    }\n\n    fn add_sorcerer(&amp;mut self, sorcerer: Sorcerer) {\n        self.sorcerers.push(sorcerer);\n    }\n\n    // 1. \u540d\u524d\u3067\u691c\u7d22 (\u5b8c\u5168\u4e00\u81f4)\n    fn find_by_name(&amp;self, name: &amp;str) -&gt; Option&lt;&amp;Sorcerer&gt; {\n        self.sorcerers.iter()\n            .find(|sorcerer| sorcerer.name == name)\n    }\n\n    // 2. \u540d\u524d\u3067\u691c\u7d22 (\u90e8\u5206\u4e00\u81f4)\n    fn find_by_partial_name(&amp;self, partial_name: &amp;str) -&gt; Option&lt;&amp;Sorcerer&gt; {\n        self.sorcerers.iter()\n            .find(|sorcerer| sorcerer.name.contains(partial_name))\n    }\n\n    // 3. \u6700\u3082\u5f37\u3044\u546a\u8853\u5e2b\u3092\u53d6\u5f97\n    fn find_strongest(&amp;self) -&gt; Option&lt;&amp;Sorcerer&gt; {\n        self.sorcerers.iter()\n            .max_by_key(|sorcerer| sorcerer.power)\n    }\n\n    // 4. \u7279\u5b9a\u306e\u546a\u529b\u4ee5\u4e0a\u306e\u546a\u8853\u5e2b\u3092\u691c\u7d22\n    fn find_by_min_power(&amp;self, min_power: i32) -&gt; Option&lt;Vec&lt;&amp;Sorcerer&gt;&gt; {\n        let filtered: Vec&lt;&amp;Sorcerer&gt; = self.sorcerers.iter()\n            .filter(|sorcerer| sorcerer.power &gt;= min_power)\n            .collect();\n\n        if filtered.is_empty() {\n            None\n        } else {\n            Some(filtered)\n        }\n    }\n\n    // 5. \u7279\u5b9a\u306e\u7b49\u7d1a\u306e\u546a\u8853\u5e2b\u3092\u691c\u7d22\n    fn find_by_grade(&amp;self, grade: &amp;str) -&gt; Option&lt;Vec&lt;&amp;Sorcerer&gt;&gt; {\n        let filtered: Vec&lt;&amp;Sorcerer&gt; = self.sorcerers.iter()\n            .filter(|sorcerer| sorcerer.grade == grade)\n            .collect();\n\n        if filtered.is_empty() {\n            None\n        } else {\n            Some(filtered)\n        }\n    }\n\n    // \u30dc\u30fc\u30ca\u30b9: \u8907\u5408\u691c\u7d22\n    fn find_by_criteria(&amp;self, min_power: Option&lt;i32&gt;, grade: Option&lt;&amp;str&gt;) -&gt; Vec&lt;&amp;Sorcerer&gt; {\n        self.sorcerers.iter()\n            .filter(|sorcerer| {\n                let power_ok = min_power.map_or(true, |p| sorcerer.power &gt;= p);\n                let grade_ok = grade.map_or(true, |g| sorcerer.grade == g);\n                power_ok &amp;&amp; grade_ok\n            })\n            .collect()\n    }\n}\n\nfn main() {\n    let mut db = SorcererDatabase::new();\n\n    // \u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\n    let sorcerers = vec![\n        Sorcerer { name: \\\"\u4e94\u6761\u609f\\\".to_string(), power: 3000, grade: \\\"\u7279\u7d1a\\\".to_string() },\n        Sorcerer { name: \\\"\u4e21\u9762\u5bbf\u513a\\\".to_string(), power: 2800, grade: \\\"\u7279\u7d1a\\\".to_string() },\n        Sorcerer { name: \\\"\u864e\u6756\u60a0\u4ec1\\\".to_string(), power: 1200, grade: \\\"1\u7d1a\\\".to_string() },\n        Sorcerer { name: \\\"\u4f0f\u9ed2\u6075\\\".to_string(), power: 1000, grade: \\\"2\u7d1a\\\".to_string() },\n        Sorcerer { name: \\\"\u91d8\u5d0e\u91ce\u8594\u8587\\\".to_string(), power: 900, grade: \\\"3\u7d1a\\\".to_string() },\n    ];\n\n    for sorcerer in sorcerers {\n        db.add_sorcerer(sorcerer);\n    }\n\n    println!(\\\"=== \u546a\u8853\u5e2b\u691c\u7d22\u30b7\u30b9\u30c6\u30e0 ===\\\");\n\n    // 1. \u5b8c\u5168\u4e00\u81f4\u691c\u7d22\n    match db.find_by_name(\\\"\u4e94\u6761\u609f\\\") {\n        Some(sorcerer) =&gt; println!(\\\"\u2713 \u898b\u3064\u304b\u308a\u307e\u3057\u305f: {} (\u546a\u529b: {})\\\", sorcerer.name, sorcerer.power),\n        None =&gt; println!(\\\"\u2717 \u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\\\"),\n    }\n\n    // 2. \u90e8\u5206\u4e00\u81f4\u691c\u7d22\n    match db.find_by_partial_name(\\\"\u864e\u6756\\\") {\n        Some(sorcerer) =&gt; println!(\\\"\u2713 \u90e8\u5206\u4e00\u81f4: {} (\u546a\u529b: {})\\\", sorcerer.name, sorcerer.power),\n        None =&gt; println!(\\\"\u2717 \u90e8\u5206\u4e00\u81f4\u306a\u3057\\\"),\n    }\n\n    // 3. \u6700\u5f37\u691c\u7d22\n    if let Some(strongest) = db.find_strongest() {\n        println!(\\\"\u2713 \u6700\u5f37: {} (\u546a\u529b: {})\\\", strongest.name, strongest.power);\n    }\n\n    // 4. \u546a\u529b\u30d5\u30a3\u30eb\u30bf\n    match db.find_by_min_power(2000) {\n        Some(powerful) =&gt; {\n            println!(\\\"\u2713 \u546a\u529b2000\u4ee5\u4e0a:\\\");\n            for sorcerer in powerful {\n                println!(\\\"  {} (\u546a\u529b: {})\\\", sorcerer.name, sorcerer.power);\n            }\n        },\n        None =&gt; println!(\\\"\u2717 \u8a72\u5f53\u8005\u306a\u3057\\\"),\n    }\n\n    // 5. \u7b49\u7d1a\u691c\u7d22\n    match db.find_by_grade(\\\"\u7279\u7d1a\\\") {\n        Some(special_grade) =&gt; {\n            println!(\\\"\u2713 \u7279\u7d1a\u546a\u8853\u5e2b:\\\");\n            for sorcerer in special_grade {\n                println!(\\\"  {} (\u546a\u529b: {})\\\", sorcerer.name, sorcerer.power);\n            }\n        },\n        None =&gt; println!(\\\"\u2717 \u7279\u7d1a\u546a\u8853\u5e2b\u306a\u3057\\\"),\n    }\n\n    // \u30dc\u30fc\u30ca\u30b9: \u8907\u5408\u691c\u7d22\n    let criteria_result = db.find_by_criteria(Some(1000), Some(\\\"\u7279\u7d1a\\\"));\n    println!(\\\"\\\\n\u8907\u5408\u691c\u7d22\uff08\u546a\u529b1000\u4ee5\u4e0a \u304b\u3064 \u7279\u7d1a\uff09:\\\");\n    for sorcerer in criteria_result {\n        println!(\\\"  {} (\u546a\u529b: {}, \u7b49\u7d1a: {})\\\", sorcerer.name, sorcerer.power, sorcerer.grade);\n    }\n}\n</code></pre>"},{"location":"chapter03/exercises/#2-option","title":"\u554f\u984c2: Option\u578b\u306e\u30c1\u30a7\u30fc\u30f3\u64cd\u4f5c","text":"<p>\u8907\u6570\u306eOption\u578b\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\u5b89\u5168\u306b\u30c7\u30fc\u30bf\u3092\u51e6\u7406\u3059\u308b\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u6210\u305b\u3088\u3002</p> <pre><code>#[derive(Debug)]\nstruct TechniqueInfo {\n    name: String,\n    power: i32,\n    element: String,\n}\n\nstruct TechniqueDatabase {\n    techniques: Vec&lt;TechniqueInfo&gt;,\n}\n\n// \u4ee5\u4e0b\u306e\u95a2\u6570\u3092\u5b9f\u88c5\u305b\u3088\uff1a\n// 1. \u8853\u5f0f\u540d\u304b\u3089\u5a01\u529b\u3092\u53d6\u5f97\n// 2. \u5a01\u529b\u304b\u3089\u63a8\u5968\u30ec\u30d9\u30eb\u3092\u8a08\u7b97\n// 3. \u8907\u6570\u306e\u8853\u5f0f\u306e\u5408\u8a08\u5a01\u529b\u3092\u8a08\u7b97\n// 4. \u8853\u5f0f\u306e\u7d44\u307f\u5408\u308f\u305b\u52b9\u679c\u3092\u8a08\u7b97\n\nfn main() {\n    let techniques = vec![\n        TechniqueInfo { name: \\\"\u84bc\\\".to_string(), power: 1000, element: \\\"\u7121\u4e0b\u9650\\\".to_string() },\n        TechniqueInfo { name: \\\"\u8d6b\\\".to_string(), power: 1500, element: \\\"\u7121\u4e0b\u9650\\\".to_string() },\n        TechniqueInfo { name: \\\"\u8308\\\".to_string(), power: 3000, element: \\\"\u7121\u4e0b\u9650\\\".to_string() },\n    ];\n\n    // \u30c1\u30a7\u30fc\u30f3\u64cd\u4f5c\u306e\u30c6\u30b9\u30c8\n}\n</code></pre> \u89e3\u7b54\u3092\u898b\u308b <pre><code>#[derive(Debug)]\nstruct TechniqueInfo {\n    name: String,\n    power: i32,\n    element: String,\n}\n\nstruct TechniqueDatabase {\n    techniques: Vec&lt;TechniqueInfo&gt;,\n}\n\nimpl TechniqueDatabase {\n    fn new(techniques: Vec&lt;TechniqueInfo&gt;) -&gt; Self {\n        TechniqueDatabase { techniques }\n    }\n\n    // 1. \u8853\u5f0f\u540d\u304b\u3089\u5a01\u529b\u3092\u53d6\u5f97\n    fn get_power(&amp;self, name: &amp;str) -&gt; Option&lt;i32&gt; {\n        self.techniques.iter()\n            .find(|tech| tech.name == name)\n            .map(|tech| tech.power)\n    }\n\n    // 2. \u5a01\u529b\u304b\u3089\u63a8\u5968\u30ec\u30d9\u30eb\u3092\u8a08\u7b97\n    fn calculate_recommended_level(&amp;self, power: i32) -&gt; Option&lt;String&gt; {\n        if power &lt;= 0 {\n            return None;\n        }\n\n        let level = match power {\n            1..=500 =&gt; \\\"\u521d\u5fc3\u8005\\\",\n            501..=1000 =&gt; \\\"\u4e2d\u7d1a\u8005\\\",\n            1001..=2000 =&gt; \\\"\u4e0a\u7d1a\u8005\\\",\n            2001..=3000 =&gt; \\\"\u7279\u7d1a\\\",\n            _ =&gt; \\\"\u6700\u5f37\u7d1a\\\",\n        };\n\n        Some(level.to_string())\n    }\n\n    // 3. \u8907\u6570\u306e\u8853\u5f0f\u306e\u5408\u8a08\u5a01\u529b\u3092\u8a08\u7b97\n    fn calculate_total_power(&amp;self, technique_names: &amp;[&amp;str]) -&gt; Option&lt;i32&gt; {\n        let mut total = 0;\n\n        for name in technique_names {\n            let power = self.get_power(name)?;  // 1\u3064\u3067\u3082\u898b\u3064\u304b\u3089\u306a\u3051\u308c\u3070None\n            total += power;\n        }\n\n        Some(total)\n    }\n\n    // 4. \u8853\u5f0f\u306e\u7d44\u307f\u5408\u308f\u305b\u52b9\u679c\u3092\u8a08\u7b97\n    fn calculate_combo_effect(&amp;self, tech1: &amp;str, tech2: &amp;str) -&gt; Option&lt;(i32, String)&gt; {\n        let power1 = self.get_power(tech1)?;\n        let power2 = self.get_power(tech2)?;\n\n        let (combo_power, combo_name) = match (tech1, tech2) {\n            (\\\"\u84bc\\\", \\\"\u8d6b\\\") | (\\\"\u8d6b\\\", \\\"\u84bc\\\") =&gt; {\n                (power1 + power2 + 500, \\\"\u865a\u5f0f\u300e\u8308\u300f\\\".to_string())\n            },\n            (a, b) if a == b =&gt; {\n                (power1 * 2, format!(\\\"\u5f37\u5316\u300e{}\u300f\\\", a))\n            },\n            (a, b) =&gt; {\n                let base_power = power1 + power2;\n                (base_power + (base_power / 10), format!(\\\"{}\u00d7{}\u30b3\u30f3\u30dc\\\", a, b))\n            },\n        };\n\n        Some((combo_power, combo_name))\n    }\n\n    // \u30dc\u30fc\u30ca\u30b9: \u30c1\u30a7\u30fc\u30f3\u64cd\u4f5c\u306e\u5b9f\u4f8b\n    fn get_technique_analysis(&amp;self, name: &amp;str) -&gt; Option&lt;String&gt; {\n        self.get_power(name)\n            .and_then(|power| self.calculate_recommended_level(power))\n            .map(|level| format!(\\\"{}\u306f{}\u5411\u3051\u306e\u8853\u5f0f\u3067\u3059\\\", name, level))\n    }\n\n    // \u8907\u96d1\u306a\u30c1\u30a7\u30fc\u30f3\u64cd\u4f5c\n    fn analyze_combo_viability(&amp;self, tech1: &amp;str, tech2: &amp;str, user_level: i32) -&gt; Option&lt;String&gt; {\n        self.calculate_combo_effect(tech1, tech2)\n            .and_then(|(power, name)| {\n                if power &lt;= user_level * 10 {\n                    Some(format!(\\\"{}\uff08\u5a01\u529b: {}\uff09\u306f\u5b9f\u884c\u53ef\u80fd\u3067\u3059\\\", name, power))\n                } else {\n                    Some(format!(\\\"{}\uff08\u5a01\u529b: {}\uff09\u306f\u5b9f\u884c\u306b\u306f\u5371\u967a\u3059\u304e\u307e\u3059\\\", name, power))\n                }\n            })\n    }\n}\n\nfn main() {\n    let techniques = vec![\n        TechniqueInfo { name: \\\"\u84bc\\\".to_string(), power: 1000, element: \\\"\u7121\u4e0b\u9650\\\".to_string() },\n        TechniqueInfo { name: \\\"\u8d6b\\\".to_string(), power: 1500, element: \\\"\u7121\u4e0b\u9650\\\".to_string() },\n        TechniqueInfo { name: \\\"\u8308\\\".to_string(), power: 3000, element: \\\"\u7121\u4e0b\u9650\\\".to_string() },\n        TechniqueInfo { name: \\\"\u9ed2\u9583\\\".to_string(), power: 800, element: \\\"\u7269\u7406\\\".to_string() },\n    ];\n\n    let db = TechniqueDatabase::new(techniques);\n\n    println!(\\\"=== Option\u578b\u30c1\u30a7\u30fc\u30f3\u64cd\u4f5c\u30b7\u30b9\u30c6\u30e0 ===\\\");\n\n    // 1. \u57fa\u672c\u7684\u306a\u5a01\u529b\u53d6\u5f97\n    let techniques_to_test = [\\\"\u84bc\\\", \\\"\u8d6b\\\", \\\"\u5b58\u5728\u3057\u306a\u3044\u8853\u5f0f\\\"];\n    for tech in techniques_to_test.iter() {\n        match db.get_power(tech) {\n            Some(power) =&gt; println!(\\\"\u2713 {}: \u5a01\u529b {}\\\", tech, power),\n            None =&gt; println!(\\\"\u2717 {}: \u898b\u3064\u304b\u308a\u307e\u305b\u3093\\\", tech),\n        }\n    }\n\n    // 2. \u63a8\u5968\u30ec\u30d9\u30eb\u8a08\u7b97\u306e\u30c1\u30a7\u30fc\u30f3\n    println!(\\\"\\\\n=== \u8853\u5f0f\u5206\u6790 ===\\\");\n    for tech in [\\\"\u84bc\\\", \\\"\u8308\\\", \\\"\u9ed2\u9583\\\"].iter() {\n        match db.get_technique_analysis(tech) {\n            Some(analysis) =&gt; println!(\\\"\u2713 {}\\\", analysis),\n            None =&gt; println!(\\\"\u2717 {}\u306e\u5206\u6790\u306b\u5931\u6557\\\", tech),\n        }\n    }\n\n    // 3. \u5408\u8a08\u5a01\u529b\u8a08\u7b97\n    println!(\\\"\\\\n=== \u5408\u8a08\u5a01\u529b\u8a08\u7b97 ===\\\");\n    let combos = vec![\n        vec![\\\"\u84bc\\\", \\\"\u8d6b\\\"],\n        vec![\\\"\u84bc\\\", \\\"\u8d6b\\\", \\\"\u8308\\\"],\n        vec![\\\"\u84bc\\\", \\\"\u5b58\u5728\u3057\u306a\u3044\u8853\u5f0f\\\"],\n    ];\n\n    for combo in combos {\n        match db.calculate_total_power(&amp;combo) {\n            Some(total) =&gt; {\n                let level = db.calculate_recommended_level(total)\n                    .unwrap_or(\\\"\u4e0d\u660e\\\".to_string());\n                println!(\\\"\u2713 {:?}: \u5408\u8a08\u5a01\u529b {} ({}\u30ec\u30d9\u30eb)\\\", combo, total, level);\n            },\n            None =&gt; println!(\\\"\u2717 {:?}: \u8a08\u7b97\u5931\u6557\uff08\u5b58\u5728\u3057\u306a\u3044\u8853\u5f0f\u3092\u542b\u3080\uff09\\\", combo),\n        }\n    }\n\n    // 4. \u30b3\u30f3\u30dc\u52b9\u679c\u8a08\u7b97\n    println!(\\\"\\\\n=== \u30b3\u30f3\u30dc\u52b9\u679c\u5206\u6790 ===\\\");\n    let combo_pairs = vec![\n        (\\\"\u84bc\\\", \\\"\u8d6b\\\"),\n        (\\\"\u84bc\\\", \\\"\u84bc\\\"),\n        (\\\"\u8308\\\", \\\"\u9ed2\u9583\\\"),\n    ];\n\n    for (tech1, tech2) in combo_pairs {\n        match db.calculate_combo_effect(tech1, tech2) {\n            Some((power, name)) =&gt; {\n                println!(\\\"\u2713 {} + {} = {} (\u5a01\u529b: {})\\\", tech1, tech2, name, power);\n            },\n            None =&gt; println!(\\\"\u2717 {} + {}: \u30b3\u30f3\u30dc\u8a08\u7b97\u5931\u6557\\\", tech1, tech2),\n        }\n    }\n\n    // 5. \u8907\u96d1\u306a\u30c1\u30a7\u30fc\u30f3\u64cd\u4f5c\n    println!(\\\"\\\\n=== \u30b3\u30f3\u30dc\u5b9f\u884c\u53ef\u80fd\u6027\u5206\u6790 ===\\\");\n    let user_levels = [100, 200, 300];\n\n    for level in user_levels.iter() {\n        println!(\\\"\\\\n\u30e6\u30fc\u30b6\u30fc\u30ec\u30d9\u30eb: {}\\\", level);\n        for (tech1, tech2) in [(\\\"\u84bc\\\", \\\"\u8d6b\\\"), (\\\"\u8308\\\", \\\"\u9ed2\u9583\\\")].iter() {\n            match db.analyze_combo_viability(tech1, tech2, *level) {\n                Some(analysis) =&gt; println!(\\\"  {}\\\", analysis),\n                None =&gt; println!(\\\"  {}/{}: \u5206\u6790\u5931\u6557\\\", tech1, tech2),\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"chapter03/exercises/#-result","title":"\u4e2d\u7d1a\u7de8 - Result\u578b\u3068\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0","text":""},{"location":"chapter03/exercises/#3","title":"\u554f\u984c3: \u546a\u8853\u5e2b\u767b\u9332\u30b7\u30b9\u30c6\u30e0","text":"<p>\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u6a5f\u80fd\u4ed8\u304d\u306e\u546a\u8853\u5e2b\u767b\u9332\u30b7\u30b9\u30c6\u30e0\u3092Result\u578b\u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u305b\u3088\u3002</p> <pre><code>#[derive(Debug)]\nenum RegistrationError {\n    InvalidName(String),\n    InvalidPower(String),\n    InvalidGrade(String),\n    DuplicateEntry(String),\n    SystemError(String),\n}\n\n#[derive(Debug, Clone)]\nstruct Sorcerer {\n    name: String,\n    power: i32,\n    grade: String,\n    techniques: Vec&lt;String&gt;,\n}\n\nstruct RegistrationSystem {\n    sorcerers: Vec&lt;Sorcerer&gt;,\n}\n\nimpl RegistrationSystem {\n    fn new() -&gt; Self {\n        // \u5b9f\u88c5\n    }\n\n    // \u4ee5\u4e0b\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u305b\u3088\uff1a\n    // 1. \u540d\u524d\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\n    // 2. \u546a\u529b\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\n    // 3. \u7b49\u7d1a\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\n    // 4. \u91cd\u8907\u30c1\u30a7\u30c3\u30af\n    // 5. \u546a\u8853\u5e2b\u306e\u767b\u9332\n    // 6. \u8853\u5f0f\u306e\u8ffd\u52a0\n}\n\nfn main() {\n    // \u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\n}\n</code></pre> \u89e3\u7b54\u3092\u898b\u308b <pre><code>use std::fmt;\n\n#[derive(Debug)]\nenum RegistrationError {\n    InvalidName(String),\n    InvalidPower(String),\n    InvalidGrade(String),\n    DuplicateEntry(String),\n    SystemError(String),\n}\n\nimpl fmt::Display for RegistrationError {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        match self {\n            RegistrationError::InvalidName(msg) =&gt; write!(f, \\\"\u540d\u524d\u30a8\u30e9\u30fc: {}\\\", msg),\n            RegistrationError::InvalidPower(msg) =&gt; write!(f, \\\"\u546a\u529b\u30a8\u30e9\u30fc: {}\\\", msg),\n            RegistrationError::InvalidGrade(msg) =&gt; write!(f, \\\"\u7b49\u7d1a\u30a8\u30e9\u30fc: {}\\\", msg),\n            RegistrationError::DuplicateEntry(name) =&gt; write!(f, \\\"\u91cd\u8907\u30a8\u30e9\u30fc: {}\u306f\u65e2\u306b\u767b\u9332\u6e08\u307f\u3067\u3059\\\", name),\n            RegistrationError::SystemError(msg) =&gt; write!(f, \\\"\u30b7\u30b9\u30c6\u30e0\u30a8\u30e9\u30fc: {}\\\", msg),\n        }\n    }\n}\n\nimpl std::error::Error for RegistrationError {}\n\n#[derive(Debug, Clone)]\nstruct Sorcerer {\n    name: String,\n    power: i32,\n    grade: String,\n    techniques: Vec&lt;String&gt;,\n}\n\nimpl Sorcerer {\n    fn new(name: String, power: i32, grade: String) -&gt; Self {\n        Sorcerer {\n            name,\n            power,\n            grade,\n            techniques: Vec::new(),\n        }\n    }\n}\n\nstruct RegistrationSystem {\n    sorcerers: Vec&lt;Sorcerer&gt;,\n}\n\nimpl RegistrationSystem {\n    fn new() -&gt; Self {\n        RegistrationSystem {\n            sorcerers: Vec::new(),\n        }\n    }\n\n    // 1. \u540d\u524d\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\n    fn validate_name(&amp;self, name: &amp;str) -&gt; Result&lt;(), RegistrationError&gt; {\n        if name.is_empty() {\n            return Err(RegistrationError::InvalidName(\\\"\u540d\u524d\u304c\u7a7a\u3067\u3059\\\".to_string()));\n        }\n\n        if name.len() &lt; 2 {\n            return Err(RegistrationError::InvalidName(\\\"\u540d\u524d\u306f2\u6587\u5b57\u4ee5\u4e0a\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\\\".to_string()));\n        }\n\n        if name.len() &gt; 50 {\n            return Err(RegistrationError::InvalidName(\\\"\u540d\u524d\u306f50\u6587\u5b57\u4ee5\u4e0b\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\\\".to_string()));\n        }\n\n        // \u7279\u6b8a\u6587\u5b57\u30c1\u30a7\u30c3\u30af\n        if name.chars().any(|c| c.is_ascii_digit()) {\n            return Err(RegistrationError::InvalidName(\\\"\u540d\u524d\u306b\u6570\u5b57\u3092\u542b\u3081\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\\\".to_string()));\n        }\n\n        Ok(())\n    }\n\n    // 2. \u546a\u529b\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\n    fn validate_power(&amp;self, power: i32) -&gt; Result&lt;(), RegistrationError&gt; {\n        if power &lt; 0 {\n            return Err(RegistrationError::InvalidPower(\\\"\u546a\u529b\u306f0\u4ee5\u4e0a\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\\\".to_string()));\n        }\n\n        if power &gt; 10000 {\n            return Err(RegistrationError::InvalidPower(\\\"\u546a\u529b\u306f10000\u4ee5\u4e0b\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\\\".to_string()));\n        }\n\n        Ok(())\n    }\n\n    // 3. \u7b49\u7d1a\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\n    fn validate_grade(&amp;self, grade: &amp;str) -&gt; Result&lt;(), RegistrationError&gt; {\n        let valid_grades = [\\\"\u7279\u7d1a\\\", \\\"1\u7d1a\\\", \\\"2\u7d1a\\\", \\\"3\u7d1a\\\", \\\"4\u7d1a\\\"];\n\n        if !valid_grades.contains(&amp;grade) {\n            return Err(RegistrationError::InvalidGrade(\n                format!(\\\"\u7121\u52b9\u306a\u7b49\u7d1a: {}\u3002\u6709\u52b9\u306a\u7b49\u7d1a: {:?}\\\", grade, valid_grades)\n            ));\n        }\n\n        Ok(())\n    }\n\n    // 4. \u91cd\u8907\u30c1\u30a7\u30c3\u30af\n    fn check_duplicate(&amp;self, name: &amp;str) -&gt; Result&lt;(), RegistrationError&gt; {\n        if self.sorcerers.iter().any(|s| s.name == name) {\n            return Err(RegistrationError::DuplicateEntry(name.to_string()));\n        }\n\n        Ok(())\n    }\n\n    // 5. \u546a\u8853\u5e2b\u306e\u767b\u9332\n    fn register_sorcerer(&amp;mut self, name: String, power: i32, grade: String)\n        -&gt; Result&lt;usize, RegistrationError&gt; {\n\n        // \u3059\u3079\u3066\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\n        self.validate_name(&amp;name)?;\n        self.validate_power(power)?;\n        self.validate_grade(&amp;grade)?;\n        self.check_duplicate(&amp;name)?;\n\n        // \u7b49\u7d1a\u3068\u546a\u529b\u306e\u6574\u5408\u6027\u30c1\u30a7\u30c3\u30af\n        let min_power = match grade.as_str() {\n            \\\"\u7279\u7d1a\\\" =&gt; 2000,\n            \\\"1\u7d1a\\\" =&gt; 1000,\n            \\\"2\u7d1a\\\" =&gt; 500,\n            \\\"3\u7d1a\\\" =&gt; 200,\n            \\\"4\u7d1a\\\" =&gt; 0,\n            _ =&gt; return Err(RegistrationError::SystemError(\\\"\u60f3\u5b9a\u5916\u306e\u7b49\u7d1a\\\".to_string())),\n        };\n\n        if power &lt; min_power {\n            return Err(RegistrationError::InvalidPower(\n                format!(\\\"{}\u7b49\u7d1a\u306b\u306f\u6700\u4f4e{}\u306e\u546a\u529b\u304c\u5fc5\u8981\u3067\u3059\\\", grade, min_power)\n            ));\n        }\n\n        // \u767b\u9332\u5b9f\u884c\n        let sorcerer = Sorcerer::new(name, power, grade);\n        self.sorcerers.push(sorcerer);\n\n        Ok(self.sorcerers.len() - 1)  // \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8fd4\u3059\n    }\n\n    // 6. \u8853\u5f0f\u306e\u8ffd\u52a0\n    fn add_technique(&amp;mut self, sorcerer_index: usize, technique: String)\n        -&gt; Result&lt;(), RegistrationError&gt; {\n\n        if technique.is_empty() {\n            return Err(RegistrationError::SystemError(\\\"\u8853\u5f0f\u540d\u304c\u7a7a\u3067\u3059\\\".to_string()));\n        }\n\n        let sorcerer = self.sorcerers.get_mut(sorcerer_index)\n            .ok_or_else(|| RegistrationError::SystemError(\\\"\u7121\u52b9\u306a\u546a\u8853\u5e2b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\\\".to_string()))?;\n\n        if sorcerer.techniques.contains(&amp;technique) {\n            return Err(RegistrationError::SystemError(\n                format!(\\\"{}\u306f\u65e2\u306b{}\u3092\u7fd2\u5f97\u6e08\u307f\u3067\u3059\\\", sorcerer.name, technique)\n            ));\n        }\n\n        // \u7b49\u7d1a\u306b\u3088\u308b\u6280\u6570\u5236\u9650\n        let max_techniques = match sorcerer.grade.as_str() {\n            \\\"\u7279\u7d1a\\\" =&gt; 10,\n            \\\"1\u7d1a\\\" =&gt; 5,\n            \\\"2\u7d1a\\\" =&gt; 3,\n            \\\"3\u7d1a\\\" =&gt; 2,\n            \\\"4\u7d1a\\\" =&gt; 1,\n            _ =&gt; return Err(RegistrationError::SystemError(\\\"\u60f3\u5b9a\u5916\u306e\u7b49\u7d1a\\\".to_string())),\n        };\n\n        if sorcerer.techniques.len() &gt;= max_techniques {\n            return Err(RegistrationError::SystemError(\n                format!(\\\"{}\u7b49\u7d1a\u306f\u6700\u5927{}\u500b\u306e\u8853\u5f0f\u3057\u304b\u7fd2\u5f97\u3067\u304d\u307e\u305b\u3093\\\",\n                        sorcerer.grade, max_techniques)\n            ));\n        }\n\n        sorcerer.techniques.push(technique);\n        Ok(())\n    }\n\n    // \u30dc\u30fc\u30ca\u30b9: \u4e00\u62ec\u767b\u9332\n    fn batch_register(&amp;mut self, registrations: Vec&lt;(String, i32, String)&gt;)\n        -&gt; Vec&lt;Result&lt;usize, RegistrationError&gt;&gt; {\n\n        registrations.into_iter()\n            .map(|(name, power, grade)| self.register_sorcerer(name, power, grade))\n            .collect()\n    }\n\n    // \u546a\u8853\u5e2b\u60c5\u5831\u306e\u53d6\u5f97\n    fn get_sorcerer(&amp;self, index: usize) -&gt; Result&lt;&amp;Sorcerer, RegistrationError&gt; {\n        self.sorcerers.get(index)\n            .ok_or_else(|| RegistrationError::SystemError(\\\"\u7121\u52b9\u306a\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\\\".to_string()))\n    }\n\n    // \u7d71\u8a08\u60c5\u5831\n    fn get_statistics(&amp;self) -&gt; Result&lt;String, RegistrationError&gt; {\n        if self.sorcerers.is_empty() {\n            return Err(RegistrationError::SystemError(\\\"\u767b\u9332\u3055\u308c\u305f\u546a\u8853\u5e2b\u304c\u3044\u307e\u305b\u3093\\\".to_string()));\n        }\n\n        let total = self.sorcerers.len();\n        let avg_power = self.sorcerers.iter().map(|s| s.power).sum::&lt;i32&gt;() / total as i32;\n\n        let mut grade_counts = std::collections::HashMap::new();\n        for sorcerer in &amp;self.sorcerers {\n            *grade_counts.entry(&amp;sorcerer.grade).or_insert(0) += 1;\n        }\n\n        let mut stats = format!(\\\"\u767b\u9332\u546a\u8853\u5e2b\u6570: {}\\\\n\u5e73\u5747\u546a\u529b: {}\\\\n\\\\n\u7b49\u7d1a\u5206\u5e03:\\\\n\\\", total, avg_power);\n        for (grade, count) in grade_counts {\n            stats.push_str(&amp;format!(\\\"{}: {}\u4eba\\\\n\\\", grade, count));\n        }\n\n        Ok(stats)\n    }\n}\n\nfn main() {\n    let mut system = RegistrationSystem::new();\n\n    println!(\\\"=== \u546a\u8853\u5e2b\u767b\u9332\u30b7\u30b9\u30c6\u30e0 ===\\\");\n\n    // \u6b63\u5e38\u30b1\u30fc\u30b9\n    let valid_registrations = vec![\n        (\\\"\u4e94\u6761\u609f\\\".to_string(), 3000, \\\"\u7279\u7d1a\\\".to_string()),\n        (\\\"\u864e\u6756\u60a0\u4ec1\\\".to_string(), 1200, \\\"1\u7d1a\\\".to_string()),\n        (\\\"\u4f0f\u9ed2\u6075\\\".to_string(), 800, \\\"2\u7d1a\\\".to_string()),\n    ];\n\n    for (name, power, grade) in valid_registrations {\n        match system.register_sorcerer(name.clone(), power, grade) {\n            Ok(index) =&gt; {\n                println!(\\\"\u2713 {}\u3092\u767b\u9332\u3057\u307e\u3057\u305f (ID: {})\\\", name, index);\n\n                // \u8853\u5f0f\u306e\u8ffd\u52a0\u30c6\u30b9\u30c8\n                let techniques = match name.as_str() {\n                    \\\"\u4e94\u6761\u609f\\\" =&gt; vec![\\\"\u7121\u4e0b\u9650\u546a\u8853\\\", \\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\"],\n                    \\\"\u864e\u6756\u60a0\u4ec1\\\" =&gt; vec![\\\"\u9ed2\u9583\\\"],\n                    \\\"\u4f0f\u9ed2\u6075\\\" =&gt; vec![\\\"\u5341\u7a2e\u5f71\u6cd5\u8853\\\"],\n                    _ =&gt; vec![],\n                };\n\n                for technique in techniques {\n                    match system.add_technique(index, technique.to_string()) {\n                        Ok(_) =&gt; println!(\\\"  \u2713 {}\u3092\u7fd2\u5f97\\\", technique),\n                        Err(e) =&gt; println!(\\\"  \u2717 \u8853\u5f0f\u8ffd\u52a0\u30a8\u30e9\u30fc: {}\\\", e),\n                    }\n                }\n            },\n            Err(error) =&gt; println!(\\\"\u2717 {}\u306e\u767b\u9332\u5931\u6557: {}\\\", name, error),\n        }\n    }\n\n    // \u30a8\u30e9\u30fc\u30b1\u30fc\u30b9\n    println!(\\\"\\\\n=== \u30a8\u30e9\u30fc\u30b1\u30fc\u30b9\u30c6\u30b9\u30c8 ===\\\");\n\n    let error_cases = vec![\n        (\\\"\\\".to_string(), 1000, \\\"1\u7d1a\\\".to_string()),           // \u7a7a\u306e\u540d\u524d\n        (\\\"\u30c6\u30b9\u30c81\\\".to_string(), 1000, \\\"1\u7d1a\\\".to_string()),      // \u6570\u5b57\u3092\u542b\u3080\u540d\u524d\n        (\\\"\u30c6\u30b9\u30c8\\\".to_string(), -100, \\\"1\u7d1a\\\".to_string()),       // \u8ca0\u306e\u546a\u529b\n        (\\\"\u30c6\u30b9\u30c8\\\".to_string(), 1000, \\\"\u7121\u52b9\u7b49\u7d1a\\\".to_string()),   // \u7121\u52b9\u306a\u7b49\u7d1a\n        (\\\"\u4e94\u6761\u609f\\\".to_string(), 2000, \\\"\u7279\u7d1a\\\".to_string()),      // \u91cd\u8907\u767b\u9332\n        (\\\"\u5f31\u3044\u7279\u7d1a\\\".to_string(), 500, \\\"\u7279\u7d1a\\\".to_string()),     // \u7b49\u7d1a\u3068\u546a\u529b\u306e\u4e0d\u6574\u5408\n    ];\n\n    for (name, power, grade) in error_cases {\n        match system.register_sorcerer(name.clone(), power, grade.clone()) {\n            Ok(index) =&gt; println!(\\\"\u2713 {}\u3092\u767b\u9332\u3057\u307e\u3057\u305f (ID: {})\\\", name, index),\n            Err(error) =&gt; println!(\\\"\u2717 \u4e88\u671f\u3055\u308c\u305f\u30a8\u30e9\u30fc: {}\\\", error),\n        }\n    }\n\n    // \u4e00\u62ec\u767b\u9332\u30c6\u30b9\u30c8\n    println!(\\\"\\\\n=== \u4e00\u62ec\u767b\u9332\u30c6\u30b9\u30c8 ===\\\");\n    let batch_registrations = vec![\n        (\\\"\u65b0\u4ebaA\\\".to_string(), 300, \\\"3\u7d1a\\\".to_string()),\n        (\\\"\u65b0\u4ebaB\\\".to_string(), 600, \\\"2\u7d1a\\\".to_string()),\n        (\\\"\\\".to_string(), 1000, \\\"1\u7d1a\\\".to_string()),  // \u30a8\u30e9\u30fc\u30b1\u30fc\u30b9\n    ];\n\n    let results = system.batch_register(batch_registrations);\n    for (i, result) in results.iter().enumerate() {\n        match result {\n            Ok(index) =&gt; println!(\\\"\u2713 \u4e00\u62ec\u767b\u9332 {}: \u6210\u529f (ID: {})\\\", i, index),\n            Err(error) =&gt; println!(\\\"\u2717 \u4e00\u62ec\u767b\u9332 {}: {}\\\", i, error),\n        }\n    }\n\n    // \u7d71\u8a08\u60c5\u5831\n    println!(\\\"\\\\n=== \u7d71\u8a08\u60c5\u5831 ===\\\");\n    match system.get_statistics() {\n        Ok(stats) =&gt; println!(\\\"{}\\\", stats),\n        Err(error) =&gt; println!(\\\"\u7d71\u8a08\u30a8\u30e9\u30fc: {}\\\", error),\n    }\n}\n</code></pre>"},{"location":"chapter03/exercises/#4-io","title":"\u554f\u984c4: \u30d5\u30a1\u30a4\u30ebI/O\u3068\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0","text":"<p>\u546a\u8853\u5e2b\u30c7\u30fc\u30bf\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u30fb\u8aad\u307f\u8fbc\u307f\u3059\u308b\u30b7\u30b9\u30c6\u30e0\u3092\u5b9f\u88c5\u305b\u3088\u3002\u8907\u6570\u306e\u30a8\u30e9\u30fc\u578b\u3092\u7d71\u5408\u3057\u305f\u30ab\u30b9\u30bf\u30e0\u30a8\u30e9\u30fc\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3002</p> <pre><code>use std::fs;\nuse std::io;\n\n// \u30ab\u30b9\u30bf\u30e0\u30a8\u30e9\u30fc\u578b\u3092\u5b9a\u7fa9\u3057\u3001\u4ee5\u4e0b\u306e\u6a5f\u80fd\u3092\u5b9f\u88c5\u305b\u3088\uff1a\n// 1. \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u306e\u546a\u8853\u5e2b\u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f\n// 2. \u30d5\u30a1\u30a4\u30eb\u3078\u306e\u546a\u8853\u5e2b\u30c7\u30fc\u30bf\u4fdd\u5b58\n// 3. \u30d0\u30c3\u30af\u30a2\u30c3\u30d7\u6a5f\u80fd\n// 4. \u30c7\u30fc\u30bf\u306e\u6574\u5408\u6027\u30c1\u30a7\u30c3\u30af\n// 5. \u8907\u6570\u30d5\u30a1\u30a4\u30eb\u306e\u4e00\u62ec\u51e6\u7406\n\nfn main() {\n    // \u30c6\u30b9\u30c8\u7528\u30b3\u30fc\u30c9\n}\n</code></pre> \u89e3\u7b54\u3092\u898b\u308b <pre><code>use std::fmt;\nuse std::fs;\nuse std::io;\n\n#[derive(Debug)]\nenum FileSystemError {\n    IoError(io::Error),\n    ParseError(String),\n    ValidationError(String),\n    CorruptedData(String),\n    BackupError(String),\n}\n\nimpl fmt::Display for FileSystemError {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        match self {\n            FileSystemError::IoError(err) =&gt; write!(f, \\\"I/O\u30a8\u30e9\u30fc: {}\\\", err),\n            FileSystemError::ParseError(msg) =&gt; write!(f, \\\"\u30d1\u30fc\u30b9\u30a8\u30e9\u30fc: {}\\\", msg),\n            FileSystemError::ValidationError(msg) =&gt; write!(f, \\\"\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30a8\u30e9\u30fc: {}\\\", msg),\n            FileSystemError::CorruptedData(msg) =&gt; write!(f, \\\"\u30c7\u30fc\u30bf\u7834\u640d: {}\\\", msg),\n            FileSystemError::BackupError(msg) =&gt; write!(f, \\\"\u30d0\u30c3\u30af\u30a2\u30c3\u30d7\u30a8\u30e9\u30fc: {}\\\", msg),\n        }\n    }\n}\n\nimpl std::error::Error for FileSystemError {}\n\nimpl From&lt;io::Error&gt; for FileSystemError {\n    fn from(err: io::Error) -&gt; Self {\n        FileSystemError::IoError(err)\n    }\n}\n\n#[derive(Debug, Clone)]\nstruct Sorcerer {\n    id: u32,\n    name: String,\n    power: i32,\n    grade: String,\n    techniques: Vec&lt;String&gt;,\n}\n\nimpl Sorcerer {\n    fn new(id: u32, name: String, power: i32, grade: String) -&gt; Self {\n        Sorcerer {\n            id,\n            name,\n            power,\n            grade,\n            techniques: Vec::new(),\n        }\n    }\n\n    // CSV\u5f62\u5f0f\u3067\u306e\u6587\u5b57\u5217\u5316\n    fn to_csv_line(&amp;self) -&gt; String {\n        format!(\\\"{},{},{},{},{}\\\",\n                self.id,\n                self.name,\n                self.power,\n                self.grade,\n                self.techniques.join(\\\";\\\"))\n    }\n\n    // CSV\u884c\u304b\u3089\u306e\u5fa9\u5143\n    fn from_csv_line(line: &amp;str) -&gt; Result&lt;Self, FileSystemError&gt; {\n        let parts: Vec&lt;&amp;str&gt; = line.split(',').collect();\n\n        if parts.len() != 5 {\n            return Err(FileSystemError::ParseError(\n                format!(\\\"\u7121\u52b9\u306aCSV\u5f62\u5f0f: {}\\\", line)\n            ));\n        }\n\n        let id: u32 = parts[0].parse()\n            .map_err(|_| FileSystemError::ParseError(\\\"ID\u306e\u30d1\u30fc\u30b9\u306b\u5931\u6557\\\".to_string()))?;\n\n        let power: i32 = parts[2].parse()\n            .map_err(|_| FileSystemError::ParseError(\\\"\u546a\u529b\u306e\u30d1\u30fc\u30b9\u306b\u5931\u6557\\\".to_string()))?;\n\n        let techniques = if parts[4].is_empty() {\n            Vec::new()\n        } else {\n            parts[4].split(';').map(|s| s.to_string()).collect()\n        };\n\n        let mut sorcerer = Sorcerer::new(id, parts[1].to_string(), power, parts[3].to_string());\n        sorcerer.techniques = techniques;\n\n        Ok(sorcerer)\n    }\n\n    // \u30c7\u30fc\u30bf\u306e\u6574\u5408\u6027\u30c1\u30a7\u30c3\u30af\n    fn validate(&amp;self) -&gt; Result&lt;(), FileSystemError&gt; {\n        if self.name.is_empty() {\n            return Err(FileSystemError::ValidationError(\\\"\u540d\u524d\u304c\u7a7a\u3067\u3059\\\".to_string()));\n        }\n\n        if self.power &lt; 0 {\n            return Err(FileSystemError::ValidationError(\\\"\u546a\u529b\u304c\u8ca0\u306e\u5024\u3067\u3059\\\".to_string()));\n        }\n\n        let valid_grades = [\\\"\u7279\u7d1a\\\", \\\"1\u7d1a\\\", \\\"2\u7d1a\\\", \\\"3\u7d1a\\\", \\\"4\u7d1a\\\"];\n        if !valid_grades.contains(&amp;self.grade.as_str()) {\n            return Err(FileSystemError::ValidationError(\n                format!(\\\"\u7121\u52b9\u306a\u7b49\u7d1a: {}\\\", self.grade)\n            ));\n        }\n\n        Ok(())\n    }\n}\n\nstruct SorcererFileManager {\n    filename: String,\n    backup_dir: String,\n}\n\nimpl SorcererFileManager {\n    fn new(filename: &amp;str, backup_dir: &amp;str) -&gt; Self {\n        SorcererFileManager {\n            filename: filename.to_string(),\n            backup_dir: backup_dir.to_string(),\n        }\n    }\n\n    // 1. \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u306e\u8aad\u307f\u8fbc\u307f\n    fn load_sorcerers(&amp;self) -&gt; Result&lt;Vec&lt;Sorcerer&gt;, FileSystemError&gt; {\n        let content = fs::read_to_string(&amp;self.filename)?;\n\n        let mut sorcerers = Vec::new();\n        let mut line_number = 0;\n\n        for line in content.lines() {\n            line_number += 1;\n\n            if line.trim().is_empty() {\n                continue;\n            }\n\n            let sorcerer = Sorcerer::from_csv_line(line)\n                .map_err(|e| FileSystemError::ParseError(\n                    format!(\\\"\u884c{}: {}\\\", line_number, e)\n                ))?;\n\n            sorcerer.validate()\n                .map_err(|e| FileSystemError::CorruptedData(\n                    format!(\\\"\u884c{}\u306e\u30c7\u30fc\u30bf\u304c\u7121\u52b9: {}\\\", line_number, e)\n                ))?;\n\n            sorcerers.push(sorcerer);\n        }\n\n        // \u91cd\u8907ID\u30c1\u30a7\u30c3\u30af\n        self.check_duplicate_ids(&amp;sorcerers)?;\n\n        Ok(sorcerers)\n    }\n\n    // 2. \u30d5\u30a1\u30a4\u30eb\u3078\u306e\u4fdd\u5b58\n    fn save_sorcerers(&amp;self, sorcerers: &amp;[Sorcerer]) -&gt; Result&lt;(), FileSystemError&gt; {\n        // \u4fdd\u5b58\u524d\u306b\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\n        for sorcerer in sorcerers {\n            sorcerer.validate()?;\n        }\n\n        self.check_duplicate_ids(sorcerers)?;\n\n        // CSV\u5f62\u5f0f\u3067\u4fdd\u5b58\n        let mut content = String::new();\n        content.push_str(\\\"# \u546a\u8853\u5e2b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\\\\n\\\");\n        content.push_str(\\\"# ID,\u540d\u524d,\u546a\u529b,\u7b49\u7d1a,\u8853\u5f0f(;\u533a\u5207\u308a)\\\\n\\\");\n\n        for sorcerer in sorcerers {\n            content.push_str(&amp;sorcerer.to_csv_line());\n            content.push('\\\\n');\n        }\n\n        fs::write(&amp;self.filename, content)?;\n        Ok(())\n    }\n\n    // 3. \u30d0\u30c3\u30af\u30a2\u30c3\u30d7\u6a5f\u80fd\n    fn create_backup(&amp;self) -&gt; Result&lt;String, FileSystemError&gt; {\n        // \u30d0\u30c3\u30af\u30a2\u30c3\u30d7\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4f5c\u6210\n        fs::create_dir_all(&amp;self.backup_dir)\n            .map_err(|e| FileSystemError::BackupError(format!(\\\"\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4f5c\u6210\u5931\u6557: {}\\\", e)))?;\n\n        // \u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u4ed8\u304d\u30d0\u30c3\u30af\u30a2\u30c3\u30d7\u30d5\u30a1\u30a4\u30eb\u540d\n        let timestamp = std::time::SystemTime::now()\n            .duration_since(std::time::UNIX_EPOCH)\n            .map_err(|e| FileSystemError::BackupError(format!(\\\"\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u53d6\u5f97\u5931\u6557: {}\\\", e)))?\n            .as_secs();\n\n        let backup_filename = format!(\\\"{}/sorcerers_backup_{}.csv\\\", self.backup_dir, timestamp);\n\n        // \u30d5\u30a1\u30a4\u30eb\u3092\u30d0\u30c3\u30af\u30a2\u30c3\u30d7\n        let content = fs::read_to_string(&amp;self.filename)\n            .map_err(|e| FileSystemError::BackupError(format!(\\\"\u5143\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\u5931\u6557: {}\\\", e)))?;\n\n        fs::write(&amp;backup_filename, content)\n            .map_err(|e| FileSystemError::BackupError(format!(\\\"\u30d0\u30c3\u30af\u30a2\u30c3\u30d7\u66f8\u304d\u8fbc\u307f\u5931\u6557: {}\\\", e)))?;\n\n        Ok(backup_filename)\n    }\n\n    fn restore_from_backup(&amp;self, backup_filename: &amp;str) -&gt; Result&lt;(), FileSystemError&gt; {\n        let content = fs::read_to_string(backup_filename)\n            .map_err(|e| FileSystemError::BackupError(format!(\\\"\u30d0\u30c3\u30af\u30a2\u30c3\u30d7\u8aad\u307f\u8fbc\u307f\u5931\u6557: {}\\\", e)))?;\n\n        // \u30d0\u30c3\u30af\u30a2\u30c3\u30d7\u30c7\u30fc\u30bf\u306e\u691c\u8a3c\n        let _sorcerers = self.parse_content(&amp;content)?;\n\n        fs::write(&amp;self.filename, content)\n            .map_err(|e| FileSystemError::BackupError(format!(\\\"\u5fa9\u5143\u66f8\u304d\u8fbc\u307f\u5931\u6557: {}\\\", e)))?;\n\n        Ok(())\n    }\n\n    // 4. \u30c7\u30fc\u30bf\u306e\u6574\u5408\u6027\u30c1\u30a7\u30c3\u30af\n    fn verify_data_integrity(&amp;self) -&gt; Result&lt;String, FileSystemError&gt; {\n        let sorcerers = self.load_sorcerers()?;\n\n        let mut report = String::new();\n        report.push_str(\\\"=== \u30c7\u30fc\u30bf\u6574\u5408\u6027\u30ec\u30dd\u30fc\u30c8 ===\\\\n\\\");\n        report.push_str(&amp;format!(\\\"\u7dcf\u30ec\u30b3\u30fc\u30c9\u6570: {}\\\\n\\\", sorcerers.len()));\n\n        // \u7b49\u7d1a\u5206\u5e03\n        let mut grade_counts = std::collections::HashMap::new();\n        for sorcerer in &amp;sorcerers {\n            *grade_counts.entry(&amp;sorcerer.grade).or_insert(0) += 1;\n        }\n\n        report.push_str(\\\"\\\\n\u7b49\u7d1a\u5206\u5e03:\\\\n\\\");\n        for (grade, count) in grade_counts {\n            report.push_str(&amp;format!(\\\"  {}: {}\u4eba\\\\n\\\", grade, count));\n        }\n\n        // \u546a\u529b\u7d71\u8a08\n        let powers: Vec&lt;i32&gt; = sorcerers.iter().map(|s| s.power).collect();\n        let avg_power = powers.iter().sum::&lt;i32&gt;() / powers.len() as i32;\n        let max_power = powers.iter().max().unwrap_or(&amp;0);\n        let min_power = powers.iter().min().unwrap_or(&amp;0);\n\n        report.push_str(&amp;format!(\\\"\\\\n\u546a\u529b\u7d71\u8a08:\\\\n\\\"));\n        report.push_str(&amp;format!(\\\"  \u5e73\u5747: {}\\\\n\\\", avg_power));\n        report.push_str(&amp;format!(\\\"  \u6700\u5927: {}\\\\n\\\", max_power));\n        report.push_str(&amp;format!(\\\"  \u6700\u5c0f: {}\\\\n\\\", min_power));\n\n        // \u7570\u5e38\u30c7\u30fc\u30bf\u306e\u30c1\u30a7\u30c3\u30af\n        let mut anomalies = Vec::new();\n        for sorcerer in &amp;sorcerers {\n            let expected_min_power = match sorcerer.grade.as_str() {\n                \\\"\u7279\u7d1a\\\" =&gt; 2000,\n                \\\"1\u7d1a\\\" =&gt; 1000,\n                \\\"2\u7d1a\\\" =&gt; 500,\n                \\\"3\u7d1a\\\" =&gt; 200,\n                \\\"4\u7d1a\\\" =&gt; 0,\n                _ =&gt; 0,\n            };\n\n            if sorcerer.power &lt; expected_min_power {\n                anomalies.push(format!(\\\"{}(ID:{}): {}\u7b49\u7d1a\u306a\u306e\u306b\u546a\u529b\u304c{}\u3057\u304b\u306a\u3044\\\",\n                    sorcerer.name, sorcerer.id, sorcerer.grade, sorcerer.power));\n            }\n        }\n\n        if !anomalies.is_empty() {\n            report.push_str(\\\"\\\\n\u26a0\ufe0f \u7570\u5e38\u30c7\u30fc\u30bf:\\\\n\\\");\n            for anomaly in anomalies {\n                report.push_str(&amp;format!(\\\"  {}\\\", anomaly));\n            }\n        } else {\n            report.push_str(\\\"\\\\n\u2705 \u7570\u5e38\u30c7\u30fc\u30bf\u306f\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\\\\n\\\");\n        }\n\n        Ok(report)\n    }\n\n    // 5. \u8907\u6570\u30d5\u30a1\u30a4\u30eb\u306e\u4e00\u62ec\u51e6\u7406\n    fn batch_process_files(&amp;self, file_patterns: &amp;[&amp;str]) -&gt; Result&lt;Vec&lt;String&gt;, FileSystemError&gt; {\n        let mut results = Vec::new();\n\n        for pattern in file_patterns {\n            let files = glob::glob(pattern)\n                .map_err(|e| FileSystemError::IoError(\n                    io::Error::new(io::ErrorKind::InvalidInput, format!(\\\"Glob\u30d1\u30bf\u30fc\u30f3\u30a8\u30e9\u30fc: {}\\\", e))\n                ))?;\n\n            for file_result in files {\n                let file_path = file_result\n                    .map_err(|e| FileSystemError::IoError(\n                        io::Error::new(io::ErrorKind::NotFound, format!(\\\"\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u30a8\u30e9\u30fc: {}\\\", e))\n                    ))?;\n\n                let temp_manager = SorcererFileManager::new(\n                    file_path.to_str().unwrap_or(\\\"unknown\\\"),\n                    &amp;self.backup_dir\n                );\n\n                match temp_manager.verify_data_integrity() {\n                    Ok(report) =&gt; {\n                        results.push(format!(\\\"\u2705 {}: \u6574\u5408\u6027\u30c1\u30a7\u30c3\u30af\u5b8c\u4e86\\\",\n                                           file_path.display()));\n                    },\n                    Err(e) =&gt; {\n                        results.push(format!(\\\"\u274c {}: {}\\\",\n                                           file_path.display(), e));\n                    }\n                }\n            }\n        }\n\n        Ok(results)\n    }\n\n    // \u30d8\u30eb\u30d1\u30fc\u30e1\u30bd\u30c3\u30c9\n    fn check_duplicate_ids(&amp;self, sorcerers: &amp;[Sorcerer]) -&gt; Result&lt;(), FileSystemError&gt; {\n        let mut seen_ids = std::collections::HashSet::new();\n\n        for sorcerer in sorcerers {\n            if !seen_ids.insert(sorcerer.id) {\n                return Err(FileSystemError::CorruptedData(\n                    format!(\\\"\u91cd\u8907\u3057\u305fID: {}\\\", sorcerer.id)\n                ));\n            }\n        }\n\n        Ok(())\n    }\n\n    fn parse_content(&amp;self, content: &amp;str) -&gt; Result&lt;Vec&lt;Sorcerer&gt;, FileSystemError&gt; {\n        let mut sorcerers = Vec::new();\n\n        for line in content.lines() {\n            if line.trim().is_empty() || line.starts_with('#') {\n                continue;\n            }\n\n            let sorcerer = Sorcerer::from_csv_line(line)?;\n            sorcerer.validate()?;\n            sorcerers.push(sorcerer);\n        }\n\n        Ok(sorcerers)\n    }\n}\n\nfn main() {\n    let manager = SorcererFileManager::new(\\\"sorcerers.csv\\\", \\\"backups\\\");\n\n    println!(\\\"=== \u546a\u8853\u5e2b\u30d5\u30a1\u30a4\u30eb\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0 ===\\\");\n\n    // \u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\n    let mut test_sorcerers = vec![\n        Sorcerer::new(1, \\\"\u4e94\u6761\u609f\\\".to_string(), 3000, \\\"\u7279\u7d1a\\\".to_string()),\n        Sorcerer::new(2, \\\"\u864e\u6756\u60a0\u4ec1\\\".to_string(), 1200, \\\"1\u7d1a\\\".to_string()),\n        Sorcerer::new(3, \\\"\u4f0f\u9ed2\u6075\\\".to_string(), 800, \\\"2\u7d1a\\\".to_string()),\n    ];\n\n    // \u8853\u5f0f\u306e\u8ffd\u52a0\n    test_sorcerers[0].techniques.push(\\\"\u7121\u4e0b\u9650\u546a\u8853\\\".to_string());\n    test_sorcerers[0].techniques.push(\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\".to_string());\n    test_sorcerers[1].techniques.push(\\\"\u9ed2\u9583\\\".to_string());\n    test_sorcerers[2].techniques.push(\\\"\u5341\u7a2e\u5f71\u6cd5\u8853\\\".to_string());\n\n    // 1. \u30c7\u30fc\u30bf\u306e\u4fdd\u5b58\n    match manager.save_sorcerers(&amp;test_sorcerers) {\n        Ok(_) =&gt; println!(\\\"\u2705 \u30c7\u30fc\u30bf\u4fdd\u5b58\u5b8c\u4e86\\\"),\n        Err(e) =&gt; println!(\\\"\u274c \u4fdd\u5b58\u30a8\u30e9\u30fc: {}\\\", e),\n    }\n\n    // 2. \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\n    match manager.load_sorcerers() {\n        Ok(sorcerers) =&gt; {\n            println!(\\\"\u2705 \u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f\u5b8c\u4e86: {}\u4ef6\\\", sorcerers.len());\n            for sorcerer in &amp;sorcerers[..2] {  // \u6700\u521d\u306e2\u4ef6\u306e\u307f\u8868\u793a\n                println!(\\\"  {} (ID:{}, \u546a\u529b:{}, \u7b49\u7d1a:{})\\\",\n                         sorcerer.name, sorcerer.id, sorcerer.power, sorcerer.grade);\n            }\n        },\n        Err(e) =&gt; println!(\\\"\u274c \u8aad\u307f\u8fbc\u307f\u30a8\u30e9\u30fc: {}\\\", e),\n    }\n\n    // 3. \u30d0\u30c3\u30af\u30a2\u30c3\u30d7\u306e\u4f5c\u6210\n    match manager.create_backup() {\n        Ok(backup_file) =&gt; println!(\\\"\u2705 \u30d0\u30c3\u30af\u30a2\u30c3\u30d7\u4f5c\u6210: {}\\\", backup_file),\n        Err(e) =&gt; println!(\\\"\u274c \u30d0\u30c3\u30af\u30a2\u30c3\u30d7\u30a8\u30e9\u30fc: {}\\\", e),\n    }\n\n    // 4. \u30c7\u30fc\u30bf\u6574\u5408\u6027\u30c1\u30a7\u30c3\u30af\n    match manager.verify_data_integrity() {\n        Ok(report) =&gt; println!(\\\"\\\\n{}\\\", report),\n        Err(e) =&gt; println!(\\\"\u274c \u6574\u5408\u6027\u30c1\u30a7\u30c3\u30af\u30a8\u30e9\u30fc: {}\\\", e),\n    }\n\n    // 5. \u30a8\u30e9\u30fc\u30b1\u30fc\u30b9\u306e\u30c6\u30b9\u30c8\n    println!(\\\"\\\\n=== \u30a8\u30e9\u30fc\u30b1\u30fc\u30b9\u30c6\u30b9\u30c8 ===\\\");\n\n    // \u4e0d\u6b63\u306a\u30c7\u30fc\u30bf\u3067\u30c6\u30b9\u30c8\n    let invalid_content = \\\"1,\u4e94\u6761\u609f,3000,\u7279\u7d1a,\u7121\u4e0b\u9650\u546a\u8853\\\\ninvalid,line,format\\\\n\\\";\n    if let Err(e) = fs::write(\\\"invalid_test.csv\\\", invalid_content) {\n        println!(\\\"\u30c6\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u4f5c\u6210\u30a8\u30e9\u30fc: {}\\\", e);\n    } else {\n        let invalid_manager = SorcererFileManager::new(\\\"invalid_test.csv\\\", \\\"backups\\\");\n        match invalid_manager.load_sorcerers() {\n            Ok(_) =&gt; println!(\\\"\u274c \u7121\u52b9\u30c7\u30fc\u30bf\u304c\u8aad\u307f\u8fbc\u307e\u308c\u3066\u3057\u307e\u3044\u307e\u3057\u305f\\\"),\n            Err(e) =&gt; println!(\\\"\u2705 \u4e88\u671f\u3055\u308c\u305f\u30a8\u30e9\u30fc: {}\\\", e),\n        }\n\n        // \u30c6\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u524a\u9664\n        let _ = fs::remove_file(\\\"invalid_test.csv\\\");\n    }\n\n    println!(\\\"\\\\n\u2705 \u30d5\u30a1\u30a4\u30eb\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0\u30c6\u30b9\u30c8\u5b8c\u4e86\\\");\n}\n\n// \u6ce8\u610f: \u3053\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u306b\u306f Cargo.toml \u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044:\n// [dependencies]\n// glob = \\\"0.3\\\"\n</code></pre>"},{"location":"chapter03/exercises/#-","title":"\u4e0a\u7d1a\u7de8 - \u9ad8\u5ea6\u306a\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u30d1\u30bf\u30fc\u30f3","text":""},{"location":"chapter03/exercises/#5","title":"\u554f\u984c5: \u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u5bfe\u5fdc\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0","text":"<p>\u8907\u6570\u306e\u30b9\u30ec\u30c3\u30c9\u3067\u4e26\u884c\u51e6\u7406\u3092\u884c\u3044\u3001\u5404\u30b9\u30ec\u30c3\u30c9\u306e\u30a8\u30e9\u30fc\u3092\u9069\u5207\u306b\u96c6\u7d04\u3059\u308b\u30b7\u30b9\u30c6\u30e0\u3092\u5b9f\u88c5\u305b\u3088\u3002</p> <pre><code>use std::sync::{Arc, Mutex};\nuse std::thread;\n\n// \u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u3067\u306e\u546a\u8853\u5e2b\u30c7\u30fc\u30bf\u51e6\u7406\u30b7\u30b9\u30c6\u30e0\n// \u8981\u4ef6\uff1a\n// 1. \u8907\u6570\u30b9\u30ec\u30c3\u30c9\u3067\u30c7\u30fc\u30bf\u3092\u4e26\u884c\u51e6\u7406\n// 2. \u5404\u30b9\u30ec\u30c3\u30c9\u306e\u30a8\u30e9\u30fc\u3092\u53ce\u96c6\n// 3. \u51e6\u7406\u7d50\u679c\u3068\u30a8\u30e9\u30fc\u306e\u7d71\u5408\n// 4. \u5b89\u5168\u306a\u30ea\u30bd\u30fc\u30b9\u5171\u6709\n\nfn main() {\n    // \u5b9f\u88c5\n}\n</code></pre> \u89e3\u7b54\u3092\u898b\u308b <pre><code>use std::sync::{Arc, Mutex, mpsc};\nuse std::thread;\nuse std::time::Duration;\n\n#[derive(Debug, Clone)]\nenum ProcessingError {\n    InvalidData(String),\n    CalculationError(String),\n    ThreadError(String),\n    TimeoutError,\n}\n\nimpl std::fmt::Display for ProcessingError {\n    fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter) -&gt; std::fmt::Result {\n        match self {\n            ProcessingError::InvalidData(msg) =&gt; write!(f, \\\"\u30c7\u30fc\u30bf\u30a8\u30e9\u30fc: {}\\\", msg),\n            ProcessingError::CalculationError(msg) =&gt; write!(f, \\\"\u8a08\u7b97\u30a8\u30e9\u30fc: {}\\\", msg),\n            ProcessingError::ThreadError(msg) =&gt; write!(f, \\\"\u30b9\u30ec\u30c3\u30c9\u30a8\u30e9\u30fc: {}\\\", msg),\n            ProcessingError::TimeoutError =&gt; write!(f, \\\"\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u30a8\u30e9\u30fc\\\"),\n        }\n    }\n}\n\nimpl std::error::Error for ProcessingError {}\n\n#[derive(Debug, Clone)]\nstruct SorcererData {\n    id: u32,\n    name: String,\n    power: i32,\n    techniques: Vec&lt;String&gt;,\n}\n\nimpl SorcererData {\n    fn new(id: u32, name: String, power: i32) -&gt; Self {\n        SorcererData {\n            id,\n            name,\n            power,\n            techniques: Vec::new(),\n        }\n    }\n\n    // \u8907\u96d1\u306a\u8a08\u7b97\u51e6\u7406\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\n    fn calculate_combat_rating(&amp;self) -&gt; Result&lt;f64, ProcessingError&gt; {\n        if self.power &lt;= 0 {\n            return Err(ProcessingError::InvalidData(\n                format!(\\\"\u7121\u52b9\u306a\u546a\u529b: {}\\\", self.power)\n            ));\n        }\n\n        // \u610f\u56f3\u7684\u306b\u6642\u9593\u306e\u304b\u304b\u308b\u51e6\u7406\n        thread::sleep(Duration::from_millis(100));\n\n        let base_rating = self.power as f64;\n        let technique_bonus = self.techniques.len() as f64 * 100.0;\n\n        // \u610f\u56f3\u7684\u306a\u30a8\u30e9\u30fc\u30b1\u30fc\u30b9\n        if self.name.contains(\\\"\u30a8\u30e9\u30fc\\\") {\n            return Err(ProcessingError::CalculationError(\n                \\\"\u8a08\u7b97\u4e2d\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\\\".to_string()\n            ));\n        }\n\n        let rating = base_rating + technique_bonus;\n\n        if rating &gt; 10000.0 {\n            Err(ProcessingError::CalculationError(\n                \\\"\u6226\u95d8\u529b\u304c\u4e0a\u9650\u3092\u8d85\u3048\u307e\u3057\u305f\\\".to_string()\n            ))\n        } else {\n            Ok(rating)\n        }\n    }\n}\n\n#[derive(Debug)]\nstruct ProcessingResult {\n    sorcerer_id: u32,\n    result: Result&lt;f64, ProcessingError&gt;,\n    thread_id: thread::ThreadId,\n}\n\nstruct ParallelProcessor {\n    thread_count: usize,\n    timeout_ms: u64,\n}\n\nimpl ParallelProcessor {\n    fn new(thread_count: usize, timeout_ms: u64) -&gt; Self {\n        ParallelProcessor {\n            thread_count,\n            timeout_ms,\n        }\n    }\n\n    fn process_sorcerers(&amp;self, sorcerers: Vec&lt;SorcererData&gt;)\n        -&gt; Result&lt;Vec&lt;ProcessingResult&gt;, ProcessingError&gt; {\n\n        let sorcerers = Arc::new(Mutex::new(sorcerers));\n        let (tx, rx) = mpsc::channel();\n        let mut handles = Vec::new();\n\n        // \u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9\u306e\u8d77\u52d5\n        for worker_id in 0..self.thread_count {\n            let sorcerers_clone = Arc::clone(&amp;sorcerers);\n            let tx_clone = tx.clone();\n\n            let handle = thread::spawn(move || {\n                let thread_id = thread::current().id();\n\n                loop {\n                    // \u6b21\u306e\u51e6\u7406\u5bfe\u8c61\u3092\u53d6\u5f97\n                    let sorcerer = {\n                        let mut sorcerers_guard = sorcerers_clone.lock()\n                            .map_err(|_| ProcessingError::ThreadError(\\\"\u30ed\u30c3\u30af\u53d6\u5f97\u5931\u6557\\\".to_string()))?;\n\n                        sorcerers_guard.pop()\n                    };\n\n                    match sorcerer {\n                        Some(sorcerer) =&gt; {\n                            let sorcerer_id = sorcerer.id;\n                            let result = sorcerer.calculate_combat_rating();\n\n                            let processing_result = ProcessingResult {\n                                sorcerer_id,\n                                result,\n                                thread_id,\n                            };\n\n                            if tx_clone.send(processing_result).is_err() {\n                                break; // \u30c1\u30e3\u30f3\u30cd\u30eb\u304c\u9589\u3058\u3089\u308c\u305f\n                            }\n                        },\n                        None =&gt; break, // \u51e6\u7406\u3059\u308b\u9805\u76ee\u304c\u306a\u3044\n                    }\n                }\n\n                Ok::&lt;(), ProcessingError&gt;(())\n            });\n\n            handles.push(handle);\n        }\n\n        // \u9001\u4fe1\u8005\u306e\u30af\u30ed\u30fc\u30f3\u3092\u524a\u9664\uff08\u53d7\u4fe1\u8005\u304c\u7d42\u4e86\u3092\u691c\u77e5\u3067\u304d\u308b\u3088\u3046\u306b\uff09\n        drop(tx);\n\n        // \u7d50\u679c\u306e\u53ce\u96c6\n        let mut results = Vec::new();\n        let start_time = std::time::Instant::now();\n\n        while let Ok(result) = rx.recv() {\n            results.push(result);\n\n            // \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u30c1\u30a7\u30c3\u30af\n            if start_time.elapsed().as_millis() &gt; self.timeout_ms as u128 {\n                return Err(ProcessingError::TimeoutError);\n            }\n        }\n\n        // \u30b9\u30ec\u30c3\u30c9\u306e\u7d42\u4e86\u3092\u5f85\u6a5f\n        for handle in handles {\n            match handle.join() {\n                Ok(Ok(())) =&gt; {},\n                Ok(Err(e)) =&gt; return Err(e),\n                Err(_) =&gt; return Err(ProcessingError::ThreadError(\\\"\u30b9\u30ec\u30c3\u30c9\u7d42\u4e86\u30a8\u30e9\u30fc\\\".to_string())),\n            }\n        }\n\n        Ok(results)\n    }\n\n    fn analyze_results(&amp;self, results: &amp;[ProcessingResult]) -&gt; ProcessingSummary {\n        let mut successful = 0;\n        let mut failed = 0;\n        let mut total_rating = 0.0;\n        let mut errors_by_type = std::collections::HashMap::new();\n        let mut results_by_thread = std::collections::HashMap::new();\n\n        for result in results {\n            // \u30b9\u30ec\u30c3\u30c9\u5225\u7d71\u8a08\n            let thread_stats = results_by_thread.entry(result.thread_id).or_insert((0, 0));\n\n            match &amp;result.result {\n                Ok(rating) =&gt; {\n                    successful += 1;\n                    total_rating += rating;\n                    thread_stats.0 += 1;\n                },\n                Err(error) =&gt; {\n                    failed += 1;\n                    thread_stats.1 += 1;\n\n                    let error_type = match error {\n                        ProcessingError::InvalidData(_) =&gt; \\\"InvalidData\\\",\n                        ProcessingError::CalculationError(_) =&gt; \\\"CalculationError\\\",\n                        ProcessingError::ThreadError(_) =&gt; \\\"ThreadError\\\",\n                        ProcessingError::TimeoutError =&gt; \\\"TimeoutError\\\",\n                    };\n\n                    *errors_by_type.entry(error_type).or_insert(0) += 1;\n                },\n            }\n        }\n\n        ProcessingSummary {\n            total_processed: results.len(),\n            successful,\n            failed,\n            average_rating: if successful &gt; 0 { total_rating / successful as f64 } else { 0.0 },\n            errors_by_type,\n            results_by_thread,\n        }\n    }\n}\n\n#[derive(Debug)]\nstruct ProcessingSummary {\n    total_processed: usize,\n    successful: usize,\n    failed: usize,\n    average_rating: f64,\n    errors_by_type: std::collections::HashMap&lt;&amp;'static str, i32&gt;,\n    results_by_thread: std::collections::HashMap&lt;thread::ThreadId, (i32, i32)&gt;, // (\u6210\u529f\u6570, \u5931\u6557\u6570)\n}\n\nimpl ProcessingSummary {\n    fn generate_report(&amp;self) -&gt; String {\n        let mut report = String::new();\n\n        report.push_str(\\\"=== \u4e26\u884c\u51e6\u7406\u7d50\u679c\u30ec\u30dd\u30fc\u30c8 ===\\\\n\\\");\n        report.push_str(&amp;format!(\\\"\u7dcf\u51e6\u7406\u6570: {}\\\\n\\\", self.total_processed));\n        report.push_str(&amp;format!(\\\"\u6210\u529f: {} ({:.1}%)\\\\n\\\",\n            self.successful,\n            (self.successful as f64 / self.total_processed as f64) * 100.0));\n        report.push_str(&amp;format!(\\\"\u5931\u6557: {} ({:.1}%)\\\\n\\\",\n            self.failed,\n            (self.failed as f64 / self.total_processed as f64) * 100.0));\n\n        if self.successful &gt; 0 {\n            report.push_str(&amp;format!(\\\"\u5e73\u5747\u6226\u95d8\u529b: {:.1}\\\\n\\\", self.average_rating));\n        }\n\n        if !self.errors_by_type.is_empty() {\n            report.push_str(\\\"\\\\n\u30a8\u30e9\u30fc\u7a2e\u5225:\\\\n\\\");\n            for (error_type, count) in &amp;self.errors_by_type {\n                report.push_str(&amp;format!(\\\"  {}: {}\u4ef6\\\\n\\\", error_type, count));\n            }\n        }\n\n        report.push_str(&amp;format!(\\\"\\\\n\u30b9\u30ec\u30c3\u30c9\u5225\u51e6\u7406\u7d50\u679c:\\\\n\\\"));\n        for (thread_id, (success, failure)) in &amp;self.results_by_thread {\n            report.push_str(&amp;format!(\\\"  {:?}: \u6210\u529f{}\u4ef6, \u5931\u6557{}\u4ef6\\\\n\\\",\n                thread_id, success, failure));\n        }\n\n        report\n    }\n}\n\nfn create_test_data() -&gt; Vec&lt;SorcererData&gt; {\n    let mut sorcerers = vec![\n        SorcererData::new(1, \\\"\u4e94\u6761\u609f\\\".to_string(), 3000),\n        SorcererData::new(2, \\\"\u4e21\u9762\u5bbf\u513a\\\".to_string(), 2800),\n        SorcererData::new(3, \\\"\u864e\u6756\u60a0\u4ec1\\\".to_string(), 1200),\n        SorcererData::new(4, \\\"\u4f0f\u9ed2\u6075\\\".to_string(), 1000),\n        SorcererData::new(5, \\\"\u91d8\u5d0e\u91ce\u8594\u8587\\\".to_string(), 900),\n        SorcererData::new(6, \\\"\u79aa\u9662\u771f\u5e0c\\\".to_string(), 800),\n        SorcererData::new(7, \\\"\u72d7\u5dfb\u68d8\\\".to_string(), 700),\n        SorcererData::new(8, \\\"\u30d1\u30f3\u30c0\\\".to_string(), 600),\n        SorcererData::new(9, \\\"\u30a8\u30e9\u30fc\u30c6\u30b9\u30c8\\\".to_string(), 1000), // \u610f\u56f3\u7684\u306a\u30a8\u30e9\u30fc\n        SorcererData::new(10, \\\"\u7121\u52b9\u546a\u529b\\\".to_string(), -100),     // \u7121\u52b9\u30c7\u30fc\u30bf\n    ];\n\n    // \u8853\u5f0f\u306e\u8ffd\u52a0\n    sorcerers[0].techniques.extend(vec![\\\"\u7121\u4e0b\u9650\u546a\u8853\\\".to_string(), \\\"\u9818\u57df\u5c55\u958b\\\".to_string()]);\n    sorcerers[1].techniques.extend(vec![\\\"\u89e3\\\".to_string(), \\\"\u634c\\\".to_string()]);\n    sorcerers[2].techniques.push(\\\"\u9ed2\u9583\\\".to_string());\n    sorcerers[3].techniques.push(\\\"\u5341\u7a2e\u5f71\u6cd5\u8853\\\".to_string());\n\n    // \u8ffd\u52a0\u306e\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\n    for i in 11..=20 {\n        let mut sorcerer = SorcererData::new(i, format!(\\\"\u546a\u8853\u5e2b{}\\\", i), 500 + (i as i32 * 50));\n        sorcerer.techniques.push(format!(\\\"\u8853\u5f0f{}\\\", i));\n        sorcerers.push(sorcerer);\n    }\n\n    sorcerers\n}\n\nfn main() {\n    println!(\\\"=== \u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u546a\u8853\u5e2b\u51e6\u7406\u30b7\u30b9\u30c6\u30e0 ===\\\");\n\n    let processor = ParallelProcessor::new(4, 5000); // 4\u30b9\u30ec\u30c3\u30c9\u30015\u79d2\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\n    let test_data = create_test_data();\n\n    println!(\\\"\u51e6\u7406\u5bfe\u8c61: {}\u4ef6\u306e\u546a\u8853\u5e2b\u30c7\u30fc\u30bf\\\", test_data.len());\n    println!(\\\"\u30b9\u30ec\u30c3\u30c9\u6570: {}\\\", processor.thread_count);\n    println!(\\\"\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8: {}ms\\\\n\\\", processor.timeout_ms);\n\n    let start_time = std::time::Instant::now();\n\n    match processor.process_sorcerers(test_data) {\n        Ok(results) =&gt; {\n            let elapsed = start_time.elapsed();\n            println!(\\\"\u2705 \u51e6\u7406\u5b8c\u4e86\uff08\u5b9f\u884c\u6642\u9593: {:.2}\u79d2\uff09\\\\n\\\", elapsed.as_secs_f64());\n\n            // \u7d50\u679c\u306e\u8a73\u7d30\u8868\u793a\uff08\u6700\u521d\u306e5\u4ef6\uff09\n            println!(\\\"=== \u51e6\u7406\u7d50\u679c\u8a73\u7d30\uff08\u6700\u521d\u306e5\u4ef6\uff09===\\\");\n            for (i, result) in results.iter().take(5).enumerate() {\n                match &amp;result.result {\n                    Ok(rating) =&gt; {\n                        println!(\\\"{}. ID {}: \u6226\u95d8\u529b {:.1} (\u30b9\u30ec\u30c3\u30c9: {:?})\\\",\n                                 i + 1, result.sorcerer_id, rating, result.thread_id);\n                    },\n                    Err(error) =&gt; {\n                        println!(\\\"{}. ID {}: \u30a8\u30e9\u30fc - {} (\u30b9\u30ec\u30c3\u30c9: {:?})\\\",\n                                 i + 1, result.sorcerer_id, error, result.thread_id);\n                    }\n                }\n            }\n\n            // \u7d71\u8a08\u5206\u6790\n            let summary = processor.analyze_results(&amp;results);\n            println!(\\\"\\\\n{}\\\", summary.generate_report());\n\n        },\n        Err(error) =&gt; {\n            println!(\\\"\u274c \u51e6\u7406\u5931\u6557: {}\\\", error);\n        }\n    }\n\n    // \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u30c6\u30b9\u30c8\n    println!(\\\"\\\\n=== \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u30c6\u30b9\u30c8 ===\\\");\n\n    let large_dataset: Vec&lt;SorcererData&gt; = (1..=1000)\n        .map(|i| {\n            let mut sorcerer = SorcererData::new(i, format!(\\\"\u546a\u8853\u5e2b{}\\\", i), 500 + (i % 1000));\n            sorcerer.techniques.push(format!(\\\"\u8853\u5f0f{}\\\", i));\n            sorcerer\n        })\n        .collect();\n\n    println!(\\\"\u5927\u898f\u6a21\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8: {}\u4ef6\\\", large_dataset.len());\n\n    let large_processor = ParallelProcessor::new(8, 10000); // 8\u30b9\u30ec\u30c3\u30c9\u300110\u79d2\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\n    let start_time = std::time::Instant::now();\n\n    match large_processor.process_sorcerers(large_dataset) {\n        Ok(results) =&gt; {\n            let elapsed = start_time.elapsed();\n            println!(\\\"\u2705 \u5927\u898f\u6a21\u51e6\u7406\u5b8c\u4e86\uff08\u5b9f\u884c\u6642\u9593: {:.2}\u79d2\uff09\\\", elapsed.as_secs_f64());\n\n            let summary = large_processor.analyze_results(&amp;results);\n            println!(\\\"\\\\n{}\\\", summary.generate_report());\n        },\n        Err(error) =&gt; {\n            println!(\\\"\u274c \u5927\u898f\u6a21\u51e6\u7406\u5931\u6557: {}\\\", error);\n        }\n    }\n}\n</code></pre>"},{"location":"chapter03/exercises/#_1","title":"\u7dcf\u5408\u554f\u984c","text":""},{"location":"chapter03/exercises/#6","title":"\u554f\u984c6: \u546a\u8853\u5e2b\u7ba1\u7406\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9","text":"<p>\u3053\u308c\u307e\u3067\u5b66\u3093\u3060\u3059\u3079\u3066\u306e\u8981\u7d20\u3092\u7d71\u5408\u3057\u3066\u3001\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u98a8\u306e\u546a\u8853\u5e2b\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0\u3092\u5b9f\u88c5\u305b\u3088\u3002</p> <p>\u8981\u4ef6:</p> <ul> <li>RESTful API\u98a8\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9</li> <li>\u8907\u6570\u306e\u30b5\u30fc\u30d3\u30b9\u9593\u3067\u306e\u30a8\u30e9\u30fc\u4f1d\u64ad</li> <li>\u8a2d\u5b9a\u7ba1\u7406\u3068\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3</li> <li>\u30ed\u30b0\u8a18\u9332\u30b7\u30b9\u30c6\u30e0</li> <li>\u30ea\u30c8\u30e9\u30a4\u6a5f\u69cb</li> </ul>   \u81ea\u7531\u306b\u8a2d\u8a08\u3057\u3066\u5b9f\u88c5\u3057\u3066\u307f\u3088\u3046\uff01\u3059\u3079\u3066\u306e\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u6280\u8853\u3092\u99c6\u4f7f\u3059\u308b\u3053\u3068\u3002   \u89e3\u7b54\u4f8b\u3092\u898b\u308b <pre><code>use std::collections::HashMap;\nuse std::fmt;\nuse std::time::{Duration, Instant};\n\n// \u30b5\u30fc\u30d3\u30b9\u5c64\u306e\u30a8\u30e9\u30fc\u578b\n#[derive(Debug)]\nenum ServiceError {\n    ValidationError(String),\n    NotFound(String),\n    Conflict(String),\n    InternalError(String),\n    ExternalServiceError(String),\n    TimeoutError,\n    RateLimitExceeded,\n}\n\nimpl fmt::Display for ServiceError {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        match self {\n            ServiceError::ValidationError(msg) =&gt; write!(f, \\\"[400] Validation: {}\\\", msg),\n            ServiceError::NotFound(resource) =&gt; write!(f, \\\"[404] Not Found: {}\\\", resource),\n            ServiceError::Conflict(msg) =&gt; write!(f, \\\"[409] Conflict: {}\\\", msg),\n            ServiceError::InternalError(msg) =&gt; write!(f, \\\"[500] Internal: {}\\\", msg),\n            ServiceError::ExternalServiceError(msg) =&gt; write!(f, \\\"[502] External: {}\\\", msg),\n            ServiceError::TimeoutError =&gt; write!(f, \\\"[504] Timeout\\\"),\n            ServiceError::RateLimitExceeded =&gt; write!(f, \\\"[429] Rate Limit Exceeded\\\"),\n        }\n    }\n}\n\nimpl std::error::Error for ServiceError {}\n\n// API\u30ec\u30b9\u30dd\u30f3\u30b9\u578b\n#[derive(Debug)]\nstruct ApiResponse&lt;T&gt; {\n    success: bool,\n    data: Option&lt;T&gt;,\n    error: Option&lt;String&gt;,\n    timestamp: String,\n    request_id: String,\n}\n\nimpl&lt;T&gt; ApiResponse&lt;T&gt; {\n    fn success(data: T, request_id: String) -&gt; Self {\n        ApiResponse {\n            success: true,\n            data: Some(data),\n            error: None,\n            timestamp: chrono::Utc::now().to_rfc3339(),\n            request_id,\n        }\n    }\n\n    fn error(error: ServiceError, request_id: String) -&gt; ApiResponse&lt;()&gt; {\n        ApiResponse {\n            success: false,\n            data: None,\n            error: Some(error.to_string()),\n            timestamp: chrono::Utc::now().to_rfc3339(),\n            request_id,\n        }\n    }\n}\n\n// \u8a2d\u5b9a\u7ba1\u7406\n#[derive(Debug, Clone)]\nstruct ServiceConfig {\n    max_retry_attempts: u32,\n    retry_delay_ms: u64,\n    timeout_ms: u64,\n    rate_limit_per_minute: u32,\n    log_level: String,\n}\n\nimpl Default for ServiceConfig {\n    fn default() -&gt; Self {\n        ServiceConfig {\n            max_retry_attempts: 3,\n            retry_delay_ms: 1000,\n            timeout_ms: 5000,\n            rate_limit_per_minute: 100,\n            log_level: \\\"INFO\\\".to_string(),\n        }\n    }\n}\n\n// \u30ed\u30b0\u8a18\u9332\u30b7\u30b9\u30c6\u30e0\nstruct Logger {\n    level: String,\n}\n\nimpl Logger {\n    fn new(level: String) -&gt; Self {\n        Logger { level }\n    }\n\n    fn info(&amp;self, message: &amp;str, context: &amp;HashMap&lt;String, String&gt;) {\n        println!(\\\"[INFO] {} | {:?}\\\", message, context);\n    }\n\n    fn warn(&amp;self, message: &amp;str, context: &amp;HashMap&lt;String, String&gt;) {\n        println!(\\\"[WARN] {} | {:?}\\\", message, context);\n    }\n\n    fn error(&amp;self, message: &amp;str, error: &amp;dyn std::error::Error, context: &amp;HashMap&lt;String, String&gt;) {\n        println!(\\\"[ERROR] {} | Error: {} | {:?}\\\", message, error, context);\n    }\n}\n\n// \u30ec\u30fc\u30c8\u5236\u9650\u7ba1\u7406\nstruct RateLimiter {\n    requests: HashMap&lt;String, Vec&lt;Instant&gt;&gt;,\n    limit_per_minute: u32,\n}\n\nimpl RateLimiter {\n    fn new(limit_per_minute: u32) -&gt; Self {\n        RateLimiter {\n            requests: HashMap::new(),\n            limit_per_minute,\n        }\n    }\n\n    fn check_rate_limit(&amp;mut self, client_id: &amp;str) -&gt; Result&lt;(), ServiceError&gt; {\n        let now = Instant::now();\n        let minute_ago = now - Duration::from_secs(60);\n\n        let requests = self.requests.entry(client_id.to_string()).or_insert_with(Vec::new);\n\n        // 1\u5206\u4ee5\u4e0a\u524d\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u524a\u9664\n        requests.retain(|&amp;time| time &gt; minute_ago);\n\n        if requests.len() &gt;= self.limit_per_minute as usize {\n            return Err(ServiceError::RateLimitExceeded);\n        }\n\n        requests.push(now);\n        Ok(())\n    }\n}\n\n// \u30ea\u30c8\u30e9\u30a4\u6a5f\u69cb\nstruct RetryPolicy {\n    max_attempts: u32,\n    delay_ms: u64,\n}\n\nimpl RetryPolicy {\n    fn new(max_attempts: u32, delay_ms: u64) -&gt; Self {\n        RetryPolicy { max_attempts, delay_ms }\n    }\n\n    fn execute&lt;T, F&gt;(&amp;self, operation: F) -&gt; Result&lt;T, ServiceError&gt;\n    where\n        F: Fn() -&gt; Result&lt;T, ServiceError&gt;,\n    {\n        let mut last_error = ServiceError::InternalError(\\\"No attempts made\\\".to_string());\n\n        for attempt in 1..=self.max_attempts {\n            match operation() {\n                Ok(result) =&gt; return Ok(result),\n                Err(error) =&gt; {\n                    last_error = error;\n                    if attempt &lt; self.max_attempts {\n                        std::thread::sleep(Duration::from_millis(self.delay_ms * attempt as u64));\n                    }\n                }\n            }\n        }\n\n        Err(last_error)\n    }\n}\n\n// \u546a\u8853\u5e2b\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\n#[derive(Debug, Clone)]\nstruct Sorcerer {\n    id: String,\n    name: String,\n    power: i32,\n    grade: String,\n    techniques: Vec&lt;String&gt;,\n    active: bool,\n    created_at: String,\n    updated_at: String,\n}\n\nimpl Sorcerer {\n    fn new(id: String, name: String, power: i32, grade: String) -&gt; Result&lt;Self, ServiceError&gt; {\n        if name.is_empty() {\n            return Err(ServiceError::ValidationError(\\\"\u540d\u524d\u306f\u5fc5\u9808\u3067\u3059\\\".to_string()));\n        }\n\n        let valid_grades = [\\\"\u7279\u7d1a\\\", \\\"1\u7d1a\\\", \\\"2\u7d1a\\\", \\\"3\u7d1a\\\", \\\"4\u7d1a\\\"];\n        if !valid_grades.contains(&amp;grade.as_str()) {\n            return Err(ServiceError::ValidationError(format!(\\\"\u7121\u52b9\u306a\u7b49\u7d1a: {}\\\", grade)));\n        }\n\n        if power &lt; 0 || power &gt; 10000 {\n            return Err(ServiceError::ValidationError(\\\"\u546a\u529b\u306f0-10000\u306e\u7bc4\u56f2\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\\\".to_string()));\n        }\n\n        let now = chrono::Utc::now().to_rfc3339();\n\n        Ok(Sorcerer {\n            id,\n            name,\n            power,\n            grade,\n            techniques: Vec::new(),\n            active: true,\n            created_at: now.clone(),\n            updated_at: now,\n        })\n    }\n\n    fn add_technique(&amp;mut self, technique: String) -&gt; Result&lt;(), ServiceError&gt; {\n        if technique.is_empty() {\n            return Err(ServiceError::ValidationError(\\\"\u8853\u5f0f\u540d\u306f\u5fc5\u9808\u3067\u3059\\\".to_string()));\n        }\n\n        if self.techniques.contains(&amp;technique) {\n            return Err(ServiceError::Conflict(format!(\\\"\u8853\u5f0f'{}'\u306f\u65e2\u306b\u7fd2\u5f97\u6e08\u307f\u3067\u3059\\\", technique)));\n        }\n\n        self.techniques.push(technique);\n        self.updated_at = chrono::Utc::now().to_rfc3339();\n        Ok(())\n    }\n}\n\n// \u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\uff08\u7c21\u6613\u7248\uff09\nstruct SorcererStore {\n    data: HashMap&lt;String, Sorcerer&gt;,\n    next_id: u32,\n}\n\nimpl SorcererStore {\n    fn new() -&gt; Self {\n        SorcererStore {\n            data: HashMap::new(),\n            next_id: 1,\n        }\n    }\n\n    fn create(&amp;mut self, name: String, power: i32, grade: String) -&gt; Result&lt;Sorcerer, ServiceError&gt; {\n        let id = format!(\\\"sorcerer_{}\\\", self.next_id);\n        self.next_id += 1;\n\n        // \u91cd\u8907\u30c1\u30a7\u30c3\u30af\n        if self.data.values().any(|s| s.name == name) {\n            return Err(ServiceError::Conflict(format!(\\\"\u540d\u524d'{}'\u306f\u65e2\u306b\u4f7f\u7528\u3055\u308c\u3066\u3044\u307e\u3059\\\", name)));\n        }\n\n        let sorcerer = Sorcerer::new(id.clone(), name, power, grade)?;\n        self.data.insert(id.clone(), sorcerer.clone());\n\n        Ok(sorcerer)\n    }\n\n    fn get(&amp;self, id: &amp;str) -&gt; Result&lt;&amp;Sorcerer, ServiceError&gt; {\n        self.data.get(id)\n            .ok_or_else(|| ServiceError::NotFound(format!(\\\"\u546a\u8853\u5e2bID: {}\\\", id)))\n    }\n\n    fn get_mut(&amp;mut self, id: &amp;str) -&gt; Result&lt;&amp;mut Sorcerer, ServiceError&gt; {\n        self.data.get_mut(id)\n            .ok_or_else(|| ServiceError::NotFound(format!(\\\"\u546a\u8853\u5e2bID: {}\\\", id)))\n    }\n\n    fn list(&amp;self) -&gt; Vec&lt;&amp;Sorcerer&gt; {\n        self.data.values().filter(|s| s.active).collect()\n    }\n\n    fn update(&amp;mut self, id: &amp;str, update_fn: impl FnOnce(&amp;mut Sorcerer) -&gt; Result&lt;(), ServiceError&gt;)\n        -&gt; Result&lt;&amp;Sorcerer, ServiceError&gt; {\n\n        let sorcerer = self.get_mut(id)?;\n        update_fn(sorcerer)?;\n        sorcerer.updated_at = chrono::Utc::now().to_rfc3339();\n\n        Ok(&amp;*sorcerer)\n    }\n\n    fn delete(&amp;mut self, id: &amp;str) -&gt; Result&lt;(), ServiceError&gt; {\n        let sorcerer = self.get_mut(id)?;\n        sorcerer.active = false;\n        sorcerer.updated_at = chrono::Utc::now().to_rfc3339();\n        Ok(())\n    }\n}\n\n// \u5916\u90e8\u30b5\u30fc\u30d3\u30b9\uff08\u30e2\u30c3\u30af\uff09\nstruct ExternalGradeService;\n\nimpl ExternalGradeService {\n    fn validate_grade_eligibility(&amp;self, power: i32, grade: &amp;str) -&gt; Result&lt;bool, ServiceError&gt; {\n        // \u5916\u90e8\u30b5\u30fc\u30d3\u30b9\u547c\u3073\u51fa\u3057\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\n        std::thread::sleep(Duration::from_millis(100));\n\n        // \u610f\u56f3\u7684\u306b\u30a8\u30e9\u30fc\u3092\u767a\u751f\u3055\u305b\u308b\u5834\u5408\n        if power == 9999 {\n            return Err(ServiceError::ExternalServiceError(\\\"\u7b49\u7d1a\u30b5\u30fc\u30d3\u30b9\u304c\u5229\u7528\u3067\u304d\u307e\u305b\u3093\\\".to_string()));\n        }\n\n        let min_power = match grade {\n            \\\"\u7279\u7d1a\\\" =&gt; 2000,\n            \\\"1\u7d1a\\\" =&gt; 1000,\n            \\\"2\u7d1a\\\" =&gt; 500,\n            \\\"3\u7d1a\\\" =&gt; 200,\n            \\\"4\u7d1a\\\" =&gt; 0,\n            _ =&gt; return Ok(false),\n        };\n\n        Ok(power &gt;= min_power)\n    }\n}\n\n// \u30e1\u30a4\u30f3\u30b5\u30fc\u30d3\u30b9\nstruct SorcererService {\n    store: SorcererStore,\n    config: ServiceConfig,\n    logger: Logger,\n    rate_limiter: RateLimiter,\n    retry_policy: RetryPolicy,\n    grade_service: ExternalGradeService,\n}\n\nimpl SorcererService {\n    fn new(config: ServiceConfig) -&gt; Self {\n        let logger = Logger::new(config.log_level.clone());\n        let rate_limiter = RateLimiter::new(config.rate_limit_per_minute);\n        let retry_policy = RetryPolicy::new(config.max_retry_attempts, config.retry_delay_ms);\n\n        SorcererService {\n            store: SorcererStore::new(),\n            config,\n            logger,\n            rate_limiter,\n            retry_policy,\n            grade_service: ExternalGradeService,\n        }\n    }\n\n    fn create_sorcerer(&amp;mut self, request_id: String, client_id: String, name: String, power: i32, grade: String)\n        -&gt; ApiResponse&lt;Sorcerer&gt; {\n\n        let mut context = HashMap::new();\n        context.insert(\\\"request_id\\\".to_string(), request_id.clone());\n        context.insert(\\\"client_id\\\".to_string(), client_id.clone());\n        context.insert(\\\"name\\\".to_string(), name.clone());\n\n        // \u30ec\u30fc\u30c8\u5236\u9650\u30c1\u30a7\u30c3\u30af\n        if let Err(error) = self.rate_limiter.check_rate_limit(&amp;client_id) {\n            self.logger.warn(\\\"Rate limit exceeded\\\", &amp;context);\n            return ApiResponse::error(error, request_id);\n        }\n\n        // \u5916\u90e8\u30b5\u30fc\u30d3\u30b9\u3067\u306e\u7b49\u7d1a\u691c\u8a3c\uff08\u30ea\u30c8\u30e9\u30a4\u4ed8\u304d\uff09\n        let grade_validation = self.retry_policy.execute(|| {\n            self.grade_service.validate_grade_eligibility(power, &amp;grade)\n        });\n\n        match grade_validation {\n            Ok(is_eligible) =&gt; {\n                if !is_eligible {\n                    let error = ServiceError::ValidationError(\n                        format!(\\\"\u546a\u529b{}\u3067\u306f{}\u7b49\u7d1a\u306e\u8cc7\u683c\u304c\u3042\u308a\u307e\u305b\u3093\\\", power, grade)\n                    );\n                    self.logger.warn(\\\"Grade validation failed\\\", &amp;context);\n                    return ApiResponse::error(error, request_id);\n                }\n            },\n            Err(error) =&gt; {\n                self.logger.error(\\\"External grade validation failed\\\", &amp;error, &amp;context);\n                return ApiResponse::error(error, request_id);\n            }\n        }\n\n        // \u546a\u8853\u5e2b\u4f5c\u6210\n        match self.store.create(name, power, grade) {\n            Ok(sorcerer) =&gt; {\n                self.logger.info(\\\"Sorcerer created successfully\\\", &amp;context);\n                ApiResponse::success(sorcerer, request_id)\n            },\n            Err(error) =&gt; {\n                self.logger.error(\\\"Failed to create sorcerer\\\", &amp;error, &amp;context);\n                ApiResponse::error(error, request_id)\n            }\n        }\n    }\n\n    fn get_sorcerer(&amp;mut self, request_id: String, client_id: String, id: String)\n        -&gt; ApiResponse&lt;Sorcerer&gt; {\n\n        let mut context = HashMap::new();\n        context.insert(\\\"request_id\\\".to_string(), request_id.clone());\n        context.insert(\\\"client_id\\\".to_string(), client_id.clone());\n        context.insert(\\\"sorcerer_id\\\".to_string(), id.clone());\n\n        if let Err(error) = self.rate_limiter.check_rate_limit(&amp;client_id) {\n            return ApiResponse::error(error, request_id);\n        }\n\n        match self.store.get(&amp;id) {\n            Ok(sorcerer) =&gt; {\n                self.logger.info(\\\"Sorcerer retrieved\\\", &amp;context);\n                ApiResponse::success(sorcerer.clone(), request_id)\n            },\n            Err(error) =&gt; {\n                self.logger.warn(\\\"Sorcerer not found\\\", &amp;context);\n                ApiResponse::error(error, request_id)\n            }\n        }\n    }\n\n    fn add_technique(&amp;mut self, request_id: String, client_id: String, id: String, technique: String)\n        -&gt; ApiResponse&lt;Sorcerer&gt; {\n\n        let mut context = HashMap::new();\n        context.insert(\\\"request_id\\\".to_string(), request_id.clone());\n        context.insert(\\\"sorcerer_id\\\".to_string(), id.clone());\n        context.insert(\\\"technique\\\".to_string(), technique.clone());\n\n        if let Err(error) = self.rate_limiter.check_rate_limit(&amp;client_id) {\n            return ApiResponse::error(error, request_id);\n        }\n\n        let result = self.store.update(&amp;id, |sorcerer| {\n            sorcerer.add_technique(technique)\n        });\n\n        match result {\n            Ok(sorcerer) =&gt; {\n                self.logger.info(\\\"Technique added successfully\\\", &amp;context);\n                ApiResponse::success(sorcerer.clone(), request_id)\n            },\n            Err(error) =&gt; {\n                self.logger.error(\\\"Failed to add technique\\\", &amp;error, &amp;context);\n                ApiResponse::error(error, request_id)\n            }\n        }\n    }\n\n    fn list_sorcerers(&amp;mut self, request_id: String, client_id: String)\n        -&gt; ApiResponse&lt;Vec&lt;Sorcerer&gt;&gt; {\n\n        if let Err(error) = self.rate_limiter.check_rate_limit(&amp;client_id) {\n            return ApiResponse::error(error, request_id);\n        }\n\n        let sorcerers: Vec&lt;Sorcerer&gt; = self.store.list().into_iter().cloned().collect();\n\n        let mut context = HashMap::new();\n        context.insert(\\\"request_id\\\".to_string(), request_id.clone());\n        context.insert(\\\"count\\\".to_string(), sorcerers.len().to_string());\n\n        self.logger.info(\\\"Sorcerers listed\\\", &amp;context);\n        ApiResponse::success(sorcerers, request_id)\n    }\n}\n\nfn main() {\n    println!(\\\"=== \u546a\u8853\u5e2b\u7ba1\u7406\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9 ===\\\");\n\n    let config = ServiceConfig::default();\n    let mut service = SorcererService::new(config);\n\n    // \u30c6\u30b9\u30c8\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\n    let client_id = \\\"test_client\\\".to_string();\n    let mut request_counter = 1;\n\n    // \u546a\u8853\u5e2b\u4f5c\u6210\u30c6\u30b9\u30c8\n    println!(\\\"\\\\n1. \u546a\u8853\u5e2b\u4f5c\u6210\u30c6\u30b9\u30c8\\\");\n\n    let test_cases = vec![\n        (\\\"\u4e94\u6761\u609f\\\", 3000, \\\"\u7279\u7d1a\\\"),\n        (\\\"\u864e\u6756\u60a0\u4ec1\\\", 1200, \\\"1\u7d1a\\\"),\n        (\\\"\u7121\u52b9\u30c6\u30b9\u30c8\\\", 100, \\\"\u7279\u7d1a\\\"), // \u7b49\u7d1a\u4e0d\u9069\u683c\n        (\\\"\u30a8\u30e9\u30fc\u30c6\u30b9\u30c8\\\", 9999, \\\"\u7279\u7d1a\\\"), // \u5916\u90e8\u30b5\u30fc\u30d3\u30b9\u30a8\u30e9\u30fc\n    ];\n\n    let mut created_ids = Vec::new();\n\n    for (name, power, grade) in test_cases {\n        let request_id = format!(\\\"req_{}\\\", request_counter);\n        request_counter += 1;\n\n        let response = service.create_sorcerer(\n            request_id,\n            client_id.clone(),\n            name.to_string(),\n            power,\n            grade.to_string()\n        );\n\n        if response.success {\n            if let Some(sorcerer) = response.data {\n                println!(\\\"\u2705 \u4f5c\u6210\u6210\u529f: {} (ID: {})\\\", sorcerer.name, sorcerer.id);\n                created_ids.push(sorcerer.id);\n            }\n        } else {\n            println!(\\\"\u274c \u4f5c\u6210\u5931\u6557: {}\\\", response.error.unwrap_or(\\\"Unknown error\\\".to_string()));\n        }\n    }\n\n    // \u546a\u8853\u5e2b\u53d6\u5f97\u30c6\u30b9\u30c8\n    println!(\\\"\\\\n2. \u546a\u8853\u5e2b\u53d6\u5f97\u30c6\u30b9\u30c8\\\");\n\n    for id in &amp;created_ids {\n        let request_id = format!(\\\"req_{}\\\", request_counter);\n        request_counter += 1;\n\n        let response = service.get_sorcerer(request_id, client_id.clone(), id.clone());\n\n        if response.success {\n            if let Some(sorcerer) = response.data {\n                println!(\\\"\u2705 \u53d6\u5f97\u6210\u529f: {} (\u546a\u529b: {})\\\", sorcerer.name, sorcerer.power);\n            }\n        } else {\n            println!(\\\"\u274c \u53d6\u5f97\u5931\u6557: {}\\\", response.error.unwrap_or(\\\"Unknown error\\\".to_string()));\n        }\n    }\n\n    // \u8853\u5f0f\u8ffd\u52a0\u30c6\u30b9\u30c8\n    println!(\\\"\\\\n3. \u8853\u5f0f\u8ffd\u52a0\u30c6\u30b9\u30c8\\\");\n\n    if !created_ids.is_empty() {\n        let techniques = vec![\\\"\u7121\u4e0b\u9650\u546a\u8853\\\", \\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\", \\\"\u9ed2\u9583\\\"];\n\n        for (i, technique) in techniques.iter().enumerate() {\n            if i &lt; created_ids.len() {\n                let request_id = format!(\\\"req_{}\\\", request_counter);\n                request_counter += 1;\n\n                let response = service.add_technique(\n                    request_id,\n                    client_id.clone(),\n                    created_ids[i].clone(),\n                    technique.to_string()\n                );\n\n                if response.success {\n                    println!(\\\"\u2705 \u8853\u5f0f\u8ffd\u52a0\u6210\u529f: {}\\\", technique);\n                } else {\n                    println!(\\\"\u274c \u8853\u5f0f\u8ffd\u52a0\u5931\u6557: {}\\\", response.error.unwrap_or(\\\"Unknown error\\\".to_string()));\n                }\n            }\n        }\n    }\n\n    // \u4e00\u89a7\u53d6\u5f97\u30c6\u30b9\u30c8\n    println!(\\\"\\\\n4. \u4e00\u89a7\u53d6\u5f97\u30c6\u30b9\u30c8\\\");\n\n    let request_id = format!(\\\"req_{}\\\", request_counter);\n    let response = service.list_sorcerers(request_id, client_id.clone());\n\n    if response.success {\n        if let Some(sorcerers) = response.data {\n            println!(\\\"\u2705 \u4e00\u89a7\u53d6\u5f97\u6210\u529f: {}\u4ef6\\\", sorcerers.len());\n            for sorcerer in sorcerers {\n                println!(\\\"  - {} (ID: {}, \u546a\u529b: {}, \u8853\u5f0f\u6570: {})\\\",\n                         sorcerer.name, sorcerer.id, sorcerer.power, sorcerer.techniques.len());\n            }\n        }\n    } else {\n        println!(\\\"\u274c \u4e00\u89a7\u53d6\u5f97\u5931\u6557: {}\\\", response.error.unwrap_or(\\\"Unknown error\\\".to_string()));\n    }\n\n    // \u30ec\u30fc\u30c8\u5236\u9650\u30c6\u30b9\u30c8\n    println!(\\\"\\\\n5. \u30ec\u30fc\u30c8\u5236\u9650\u30c6\u30b9\u30c8\\\");\n\n    for i in 1..=5 {\n        let request_id = format!(\\\"rate_test_{}\\\", i);\n        let response = service.list_sorcerers(request_id, \\\"rate_test_client\\\".to_string());\n\n        if response.success {\n            println!(\\\"\u2705 \u30ea\u30af\u30a8\u30b9\u30c8{}: \u6210\u529f\\\", i);\n        } else {\n            println!(\\\"\u274c \u30ea\u30af\u30a8\u30b9\u30c8{}: {}\\\", i, response.error.unwrap_or(\\\"Unknown error\\\".to_string()));\n        }\n    }\n\n    println!(\\\"\\\\n=== \u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u30c6\u30b9\u30c8\u5b8c\u4e86 ===\\\");\n}\n\n// \u6ce8\u610f: \u3053\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u306b\u306f Cargo.toml \u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044:\n// [dependencies]\n// chrono = { version = \\\"0.4\\\", features = [\\\"serde\\\"] }\n</code></pre>"},{"location":"chapter03/exercises/#_2","title":"\u7ae0\u672b\u7dcf\u62ec","text":"<p>\u7b2c3\u7ae0\u306e\u7df4\u7fd2\u554f\u984c\u3001\u7d20\u6674\u3089\u3057\u3044\u6226\u3044\u3060\u3063\u305f\uff01\u53cd\u8ee2\u8853\u5f0f\u7de8\u306e\u5168\u3066\u306e\u6280\u8853\u3092\u5b9f\u8df5\u3067\u78ba\u8a8d\u3067\u304d\u305f\u306a\u3002</p> <p>\u3053\u308c\u3089\u306e\u554f\u984c\u3092\u901a\u3057\u3066\u5b66\u3093\u3060\u3053\u3068\uff1a</p> <ul> <li>Option\u578b - \u5b89\u5168\u306a\u4e0d\u5728\u306e\u8868\u73fe</li> <li>Result\u578b - \u578b\u5b89\u5168\u306a\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0</li> <li>\u30ab\u30b9\u30bf\u30e0\u30a8\u30e9\u30fc - \u30c9\u30e1\u30a4\u30f3\u56fa\u6709\u306e\u8868\u73fe\u529b</li> <li>\u30a8\u30e9\u30fc\u306e\u5408\u6210 - \u8907\u96d1\u306a\u30b7\u30b9\u30c6\u30e0\u3067\u306e\u7d71\u5408</li> <li>\u5b9f\u7528\u7684\u30d1\u30bf\u30fc\u30f3 - \u5b9f\u969b\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306e\u5fdc\u7528</li> </ul> <p>\u4e94\u6761\u5148\u751f\u306e\u6700\u7d42\u30a2\u30c9\u30d0\u30a4\u30b9</p> <p>\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306f\u6700\u521d\u306f\u9762\u5012\u306b\u611f\u3058\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002\u3067\u3082\u4e00\u5ea6\u30de\u30b9\u30bf\u30fc\u3059\u308c\u3070\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u30af\u30e9\u30c3\u30b7\u30e5\u3059\u308b\u3053\u3068\u306f\u307b\u307c\u306a\u304f\u306a\u308b\u3002</p> <p>\u4ffa\u306e\u53cd\u8ee2\u8853\u5f0f\u3068\u540c\u3058\u3067\u3001\u4e00\u898b\u30cd\u30ac\u30c6\u30a3\u30d6\u306a\u300c\u30a8\u30e9\u30fc\u300d\u3068\u3044\u3046\u6982\u5ff5\u3092\u3001\u578b\u5b89\u5168\u3067\u8868\u73fe\u529b\u8c4a\u304b\u306a\u529b\u306b\u5909\u63db\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002</p> <p>\u6b21\u306f\u7b2c4\u7ae0\u300c\u9818\u57df\u5c55\u958b\u7de8\u300d\u3067\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3068\u30c8\u30ec\u30a4\u30c8\u3092\u5b66\u307c\u3046\u3002\u3088\u308a\u62bd\u8c61\u7684\u3067\u5f37\u529b\u306a\u6982\u5ff5\u306e\u7fd2\u5f97\u3060\u3002</p> <p>\u300c\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u6975\u3081\u308c\u3070\u3001\u5931\u6557\u3059\u3089\u6210\u529f\u306e\u4e00\u90e8\u3068\u306a\u308b\u300d</p>"},{"location":"chapter03/option/","title":"\u7b2c3\u7ae0\uff1a\u53cd\u8ee2\u8853\u5f0f\u7de8 - Option\u578b","text":""},{"location":"chapter03/option/#-","title":"\u53cd\u8ee2\u8853\u5f0f\u306e\u6982\u5ff5 - \u30a8\u30e9\u30fc\u3092\u529b\u306b\u5909\u3048\u308b","text":"<p>\u3055\u3042\u3001\u3044\u3088\u3044\u3088\u53cd\u8ee2\u8853\u5f0f\u306e\u7fd2\u5f97\u3060\u3002\u4ffa\u306e\u8853\u5f0f\u53cd\u8ee2\u300e\u8d6b\u300f\u304c\u5f15\u529b\u3092\u65a5\u529b\u306b\u5909\u3048\u308b\u3088\u3046\u306b\u3001Rust\u3067\u306f\u5931\u6557\u3084\u4e0d\u5728\u3092\u5b89\u5168\u306b\u6271\u3046\u6280\u8853\u304c\u3042\u308b\u3002</p> <p>\u5f93\u6765\u306e\u8a00\u8a9e\u3067\u306f\u3001\u5024\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306b<code>null</code>\u3084<code>undefined</code>\u3092\u4f7f\u3063\u3066\u3044\u305f\u3002\u3067\u3082\u3053\u308c\u306f\u546a\u3044\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3001\u4e88\u671f\u3057\u306a\u3044\u30af\u30e9\u30c3\u30b7\u30e5\u3092\u5f15\u304d\u8d77\u3053\u3059\u3002Rust\u306f\u9055\u3046\u3002Option\u578b\u3067\u5b89\u5168\u306b\u300c\u5024\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u300d\u72b6\u6cc1\u3092\u8868\u73fe\u3059\u308b\u3002</p> <p>\u4e94\u6761\u5148\u751f\u306e\u89e3\u8aac</p> <p>Option\u578b\u306f\u300c\u5024\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3057\u3001\u306a\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u300d\u72b6\u6cc1\u3092\u578b\u5b89\u5168\u306b\u8868\u73fe\u3059\u308b\u3002 <code>Some(T)</code>\u3067\u5024\u304c\u3042\u308b\u5834\u5408\u3001<code>None</code>\u3067\u5024\u304c\u306a\u3044\u5834\u5408\u3092\u8868\u3059\u3002null\u30dd\u30a4\u30f3\u30bf\u4f8b\u5916\u306f\u8d77\u3053\u308a\u3048\u306a\u3044\u3002</p>"},{"location":"chapter03/option/#option","title":"Option\u578b\u306e\u57fa\u672c","text":""},{"location":"chapter03/option/#option_1","title":"Option\u578b\u306e\u5b9a\u7fa9","text":"<pre><code>// Rust\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\nenum Option&lt;T&gt; {\n    Some(T),  // \u5024\u304c\u3042\u308b\n    None,     // \u5024\u304c\u306a\u3044\n}\n</code></pre>"},{"location":"chapter03/option/#_1","title":"\u57fa\u672c\u7684\u306a\u4f7f\u7528\u6cd5","text":"<pre><code>fn main() {\n    // \u5024\u304c\u3042\u308b\u5834\u5408\n    let technique_name: Option&lt;String&gt; = Some(String::from(\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\"));\n\n    // \u5024\u304c\u306a\u3044\u5834\u5408\n    let unknown_technique: Option&lt;String&gt; = None;\n\n    // Option\u578b\u306e\u5024\u3092\u8868\u793a\n    println!(\\\"{:?}\\\", technique_name);  // Some(\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\")\n    println!(\\\"{:?}\\\", unknown_technique);  // None\n}\n</code></pre>"},{"location":"chapter03/option/#option_2","title":"Option\u578b\u306e\u4f5c\u6210","text":""},{"location":"chapter03/option/#_2","title":"\u76f4\u63a5\u4f5c\u6210","text":"<pre><code>fn main() {\n    let some_power = Some(1500);\n    let no_power: Option&lt;i32&gt; = None;\n\n    let technique = Some(\\\"\u7121\u4e0b\u9650\u546a\u8853\\\");\n    let empty_technique: Option&lt;&amp;str&gt; = None;\n\n    println!(\\\"\u546a\u529b: {:?}\\\", some_power);\n    println!(\\\"\u6280: {:?}\\\", technique);\n}\n</code></pre>"},{"location":"chapter03/option/#_3","title":"\u95a2\u6570\u304b\u3089\u8fd4\u3059","text":"<pre><code>fn find_technique_power(technique_name: &amp;str) -&gt; Option&lt;i32&gt; {\n    match technique_name {\n        \\\"\u84bc\\\" =&gt; Some(1000),\n        \\\"\u8d6b\\\" =&gt; Some(1500),\n        \\\"\u8308\\\" =&gt; Some(3000),\n        \\\"\u7d2b\\\" =&gt; Some(9999),\n        _ =&gt; None,  // \u672a\u77e5\u306e\u6280\n    }\n}\n\nfn get_strongest_student() -&gt; Option&lt;String&gt; {\n    // \u6761\u4ef6\u306b\u3088\u3063\u3066\u5024\u3092\u8fd4\u3059\u304bNone\u3092\u8fd4\u3059\n    let has_students = true;\n\n    if has_students {\n        Some(String::from(\\\"\u864e\u6756\u60a0\u4ec1\\\"))\n    } else {\n        None\n    }\n}\n\nfn main() {\n    let blue_power = find_technique_power(\\\"\u84bc\\\");\n    let unknown_power = find_technique_power(\\\"\u672a\u77e5\u306e\u6280\\\");\n\n    println!(\\\"\u84bc\u306e\u5a01\u529b: {:?}\\\", blue_power);      // Some(1000)\n    println!(\\\"\u672a\u77e5\u6280\u306e\u5a01\u529b: {:?}\\\", unknown_power); // None\n\n    let strongest = get_strongest_student();\n    println!(\\\"\u6700\u5f37\u306e\u5b66\u751f: {:?}\\\", strongest);\n}\n</code></pre>"},{"location":"chapter03/option/#option_3","title":"Option\u578b\u306e\u51e6\u7406\u65b9\u6cd5","text":""},{"location":"chapter03/option/#match","title":"match\u5f0f\u306b\u3088\u308b\u51e6\u7406","text":"<pre><code>fn process_technique_power(power: Option&lt;i32&gt;) {\n    match power {\n        Some(p) =&gt; println!(\\\"\u5a01\u529b: {}\\\", p),\n        None =&gt; println!(\\\"\u6280\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\\\"),\n    }\n}\n\nfn get_power_level(power: Option&lt;i32&gt;) -&gt; String {\n    match power {\n        Some(p) if p &gt;= 3000 =&gt; \\\"\u8d85\u5f37\u529b\\\".to_string(),\n        Some(p) if p &gt;= 1500 =&gt; \\\"\u5f37\u529b\\\".to_string(),\n        Some(p) if p &gt;= 1000 =&gt; \\\"\u666e\u901a\\\".to_string(),\n        Some(p) =&gt; format!(\\\"\u5f31\u3044 ({})\\\", p),\n        None =&gt; \\\"\u4e0d\u660e\\\".to_string(),\n    }\n}\n\nfn main() {\n    let techniques = [\n        (\\\"\u84bc\\\", Some(1000)),\n        (\\\"\u8d6b\\\", Some(1500)),\n        (\\\"\u8308\\\", Some(3000)),\n        (\\\"\u672a\u77e5\\\", None),\n    ];\n\n    for (name, power) in techniques.iter() {\n        println!(\\\"{}: {}\\\", name, get_power_level(*power));\n        process_technique_power(*power);\n        println!();\n    }\n}\n</code></pre>"},{"location":"chapter03/option/#if-let","title":"if let \u3092\u4f7f\u3063\u305f\u51e6\u7406","text":"<pre><code>fn main() {\n    let technique_power = Some(1500);\n\n    // if let \u3067\u5024\u304c\u3042\u308b\u5834\u5408\u306e\u307f\u51e6\u7406\n    if let Some(power) = technique_power {\n        println!(\\\"\u6280\u306e\u5a01\u529b: {}\\\", power);\n\n        if power &gt; 1000 {\n            println!(\\\"\u5f37\u529b\u306a\u6280\u3067\u3059\uff01\\\");\n        }\n    } else {\n        println!(\\\"\u6280\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\\\");\n    }\n\n    // \u3088\u308a\u8907\u96d1\u306a\u4f8b\n    let student_grade = Some(85);\n\n    if let Some(grade) = student_grade {\n        let evaluation = match grade {\n            90..=100 =&gt; \\\"\u512a\u79c0\\\",\n            80..=89 =&gt; \\\"\u826f\u597d\\\",\n            70..=79 =&gt; \\\"\u666e\u901a\\\",\n            _ =&gt; \\\"\u8981\u52aa\u529b\\\",\n        };\n        println!(\\\"\u6210\u7e3e: {}\u70b9 - {}\\\", grade, evaluation);\n    }\n}\n</code></pre>"},{"location":"chapter03/option/#option_4","title":"Option\u578b\u306e\u30e1\u30bd\u30c3\u30c9","text":""},{"location":"chapter03/option/#unwrap","title":"unwrap\u7cfb\u30e1\u30bd\u30c3\u30c9","text":"<pre><code>fn main() {\n    let some_power = Some(1500);\n    let no_power: Option&lt;i32&gt; = None;\n\n    // unwrap() - \u5024\u3092\u53d6\u308a\u51fa\u3059\u304c\u3001None\u306e\u5834\u5408\u306f\u30d1\u30cb\u30c3\u30af\n    let power = some_power.unwrap();\n    println!(\\\"\u5a01\u529b: {}\\\", power);\n\n    // no_power.unwrap(); // \u30d1\u30cb\u30c3\u30af\u3059\u308b\uff01\n\n    // unwrap_or() - None\u306e\u5834\u5408\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u4f7f\u7528\n    let safe_power = no_power.unwrap_or(0);\n    println!(\\\"\u5b89\u5168\u306a\u5a01\u529b: {}\\\", safe_power);\n\n    // unwrap_or_else() - None\u306e\u5834\u5408\u306f\u30af\u30ed\u30fc\u30b8\u30e3\u3092\u5b9f\u884c\n    let calculated_power = no_power.unwrap_or_else(|| {\n        println!(\\\"\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u8a08\u7b97\u4e2d...\\\");\n        500\n    });\n    println!(\\\"\u8a08\u7b97\u3055\u308c\u305f\u5a01\u529b: {}\\\", calculated_power);\n}\n</code></pre> <p>unwrap()\u306e\u6ce8\u610f\u70b9</p> <p><code>unwrap()</code>\u306fNone\u306e\u5834\u5408\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u30af\u30e9\u30c3\u30b7\u30e5\u3059\u308b\u3002\u672c\u756a\u30b3\u30fc\u30c9\u3067\u306f\u907f\u3051\u308b\u3079\u304d\u3060\u3002 \u3067\u3082\u5b66\u7fd2\u3084\u30d7\u30ed\u30c8\u30bf\u30a4\u30d4\u30f3\u30b0\u3067\u306f\u4fbf\u5229\u306a\u306e\u3067\u3001\u9069\u5207\u306b\u4f7f\u3044\u5206\u3051\u308d\u3002</p>"},{"location":"chapter03/option/#expect","title":"expect() \u30e1\u30bd\u30c3\u30c9","text":"<pre><code>fn main() {\n    let technique = Some(\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\");\n    let empty_technique: Option&lt;&amp;str&gt; = None;\n\n    // expect() - unwrap()\u3068\u540c\u3058\u3060\u304c\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6307\u5b9a\u3067\u304d\u308b\n    let tech_name = technique.expect(\\\"\u6280\u540d\u304c\u5fc5\u8981\u3067\u3059\\\");\n    println!(\\\"\u6280: {}\\\", tech_name);\n\n    // \u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u4ed8\u304d\u3067\u30d1\u30cb\u30c3\u30af\n    // let empty_name = empty_technique.expect(\\\"\u6280\u540d\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\uff01\\\");\n}\n</code></pre>"},{"location":"chapter03/option/#is_some-is_none","title":"is_some() \u3068 is_none()","text":"<pre><code>fn check_technique_availability(technique: Option&lt;&amp;str&gt;) {\n    if technique.is_some() {\n        println!(\\\"\u6280\u304c\u5229\u7528\u53ef\u80fd\u3067\u3059: {:?}\\\", technique);\n    } else {\n        println!(\\\"\u6280\u304c\u5229\u7528\u3067\u304d\u307e\u305b\u3093\\\");\n    }\n\n    // \u30ac\u30fc\u30c9\u7bc0\u3068\u3057\u3066\u4f7f\u7528\n    if technique.is_none() {\n        println!(\\\"\u6280\u304c\u306a\u3044\u306e\u3067\u65e9\u671f\u30ea\u30bf\u30fc\u30f3\\\");\n        return;\n    }\n\n    println!(\\\"\u6280\u306e\u51e6\u7406\u3092\u7d9a\u884c...\\\");\n}\n\nfn main() {\n    let available_technique = Some(\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\");\n    let unavailable_technique: Option&lt;&amp;str&gt; = None;\n\n    check_technique_availability(available_technique);\n    check_technique_availability(unavailable_technique);\n}\n</code></pre>"},{"location":"chapter03/option/#map-","title":"map() \u30e1\u30bd\u30c3\u30c9 - \u95a2\u6570\u578b\u306e\u529b","text":"<pre><code>fn main() {\n    let powers = vec![Some(1000), None, Some(1500), Some(2000)];\n\n    // map() - Some\u306e\u5834\u5408\u306e\u307f\u95a2\u6570\u3092\u9069\u7528\n    let doubled_powers: Vec&lt;Option&lt;i32&gt;&gt; = powers.iter()\n        .map(|power| power.map(|p| p * 2))\n        .collect();\n\n    println!(\\\"\u5143\u306e\u5a01\u529b: {:?}\\\", powers);\n    println!(\\\"2\u500d\u306e\u5a01\u529b: {:?}\\\", doubled_powers);\n\n    // \u3088\u308a\u8907\u96d1\u306a\u5909\u63db\n    let power_descriptions: Vec&lt;Option&lt;String&gt;&gt; = powers.iter()\n        .map(|power| power.map(|p| {\n            if p &gt;= 2000 {\n                format!(\\\"\u8d85\u5f37\u529b ({})\\\", p)\n            } else if p &gt;= 1500 {\n                format!(\\\"\u5f37\u529b ({})\\\", p)\n            } else {\n                format!(\\\"\u666e\u901a ({})\\\", p)\n            }\n        }))\n        .collect();\n\n    println!(\\\"\u5a01\u529b\u8aac\u660e: {:?}\\\", power_descriptions);\n}\n</code></pre>"},{"location":"chapter03/option/#and_then-","title":"and_then() \u30e1\u30bd\u30c3\u30c9 - \u30e2\u30ca\u30c9\u7684\u5408\u6210","text":"<pre><code>fn get_technique_power(name: &amp;str) -&gt; Option&lt;i32&gt; {\n    match name {\n        \\\"\u84bc\\\" =&gt; Some(1000),\n        \\\"\u8d6b\\\" =&gt; Some(1500),\n        \\\"\u8308\\\" =&gt; Some(3000),\n        _ =&gt; None,\n    }\n}\n\nfn calculate_combo_power(power: i32) -&gt; Option&lt;i32&gt; {\n    if power &gt;= 1000 {\n        Some(power * 2)\n    } else {\n        None  // \u5f31\u3059\u304e\u3066\u30b3\u30f3\u30dc\u306b\u306a\u3089\u306a\u3044\n    }\n}\n\nfn main() {\n    let technique_name = \\\"\u84bc\\\";\n\n    // and_then() \u3067Option\u3092\u8fd4\u3059\u95a2\u6570\u3092\u30c1\u30a7\u30fc\u30f3\n    let combo_power = get_technique_power(technique_name)\n        .and_then(calculate_combo_power);\n\n    println!(\\\"{} \u306e\u30b3\u30f3\u30dc\u5a01\u529b: {:?}\\\", technique_name, combo_power);\n\n    // \u3088\u308a\u8907\u96d1\u306a\u30c1\u30a7\u30fc\u30f3\n    let result = Some(\\\"\u8308\\\")\n        .and_then(get_technique_power)\n        .and_then(calculate_combo_power)\n        .map(|power| format!(\\\"\u6700\u7d42\u5a01\u529b: {}\\\", power));\n\n    println!(\\\"\u30c1\u30a7\u30fc\u30f3\u7d50\u679c: {:?}\\\", result);\n}\n</code></pre>"},{"location":"chapter03/option/#filter","title":"filter() \u30e1\u30bd\u30c3\u30c9","text":"<pre><code>fn main() {\n    let powers = vec![Some(500), Some(1500), Some(3000), None];\n\n    // filter() - \u6761\u4ef6\u3092\u6e80\u305f\u3059\u5834\u5408\u306e\u307fSome\u3092\u4fdd\u6301\n    let strong_powers: Vec&lt;Option&lt;i32&gt;&gt; = powers.iter()\n        .map(|power| power.filter(|&amp;&amp;p| p &gt;= 1000))\n        .collect();\n\n    println!(\\\"\u5143\u306e\u5a01\u529b: {:?}\\\", powers);\n    println!(\\\"\u5f37\u529b\u306a\u6280\u306e\u307f: {:?}\\\", strong_powers);\n\n    // \u5b9f\u7528\u4f8b\uff1a\u6709\u52b9\u306a\u6280\u306e\u307f\u30d5\u30a3\u30eb\u30bf\n    let technique_levels = vec![\n        Some(95),   // \u512a\u79c0\n        Some(65),   // \u8981\u52aa\u529b\n        Some(88),   // \u826f\u597d\n        None,       // \u672a\u8a55\u4fa1\n    ];\n\n    let excellent_techniques: Vec&lt;Option&lt;i32&gt;&gt; = technique_levels.iter()\n        .map(|level| level.filter(|&amp;&amp;l| l &gt;= 90))\n        .collect();\n\n    println!(\\\"\u512a\u79c0\u306a\u6280: {:?}\\\", excellent_techniques);\n}\n</code></pre>"},{"location":"chapter03/option/#-_1","title":"\u5b9f\u8df5\u4f8b - \u546a\u8853\u5e2b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9","text":"<pre><code>#[derive(Debug, Clone)]\nstruct Sorcerer {\n    name: String,\n    grade: String,\n    power: i32,\n    techniques: Vec&lt;String&gt;,\n}\n\nimpl Sorcerer {\n    fn new(name: &amp;str, grade: &amp;str, power: i32) -&gt; Self {\n        Sorcerer {\n            name: String::from(name),\n            grade: String::from(grade),\n            power,\n            techniques: Vec::new(),\n        }\n    }\n\n    fn add_technique(&amp;mut self, technique: String) {\n        self.techniques.push(technique);\n    }\n\n    fn get_strongest_technique(&amp;self) -&gt; Option&lt;&amp;String&gt; {\n        // \u6700\u521d\u306e\u6280\u3092\u6700\u5f37\u3068\u3059\u308b\u7c21\u6613\u5b9f\u88c5\n        self.techniques.first()\n    }\n\n    fn get_power_level(&amp;self) -&gt; &amp;str {\n        match self.power {\n            3000.. =&gt; \\\"\u6700\u5f37\u7d1a\\\",\n            2000..=2999 =&gt; \\\"\u7279\u7d1a\\\",\n            1500..=1999 =&gt; \\\"1\u7d1a\\\",\n            1000..=1499 =&gt; \\\"2\u7d1a\\\",\n            500..=999 =&gt; \\\"3\u7d1a\\\",\n            _ =&gt; \\\"4\u7d1a\\\",\n        }\n    }\n}\n\nstruct SorcererDatabase {\n    sorcerers: Vec&lt;Sorcerer&gt;,\n}\n\nimpl SorcererDatabase {\n    fn new() -&gt; Self {\n        SorcererDatabase {\n            sorcerers: Vec::new(),\n        }\n    }\n\n    fn add_sorcerer(&amp;mut self, sorcerer: Sorcerer) {\n        self.sorcerers.push(sorcerer);\n    }\n\n    // \u540d\u524d\u3067\u691c\u7d22 - Option&lt;T&gt;\u3092\u8fd4\u3059\n    fn find_by_name(&amp;self, name: &amp;str) -&gt; Option&lt;&amp;Sorcerer&gt; {\n        self.sorcerers.iter()\n            .find(|sorcerer| sorcerer.name == name)\n    }\n\n    // \u7b49\u7d1a\u3067\u691c\u7d22 - \u6700\u521d\u306e1\u4eba\u306e\u307f\n    fn find_first_by_grade(&amp;self, grade: &amp;str) -&gt; Option&lt;&amp;Sorcerer&gt; {\n        self.sorcerers.iter()\n            .find(|sorcerer| sorcerer.grade == grade)\n    }\n\n    // \u6700\u5f37\u306e\u546a\u8853\u5e2b\u3092\u53d6\u5f97\n    fn get_strongest(&amp;self) -&gt; Option&lt;&amp;Sorcerer&gt; {\n        self.sorcerers.iter()\n            .max_by_key(|sorcerer| sorcerer.power)\n    }\n\n    // \u7279\u5b9a\u306e\u5a01\u529b\u4ee5\u4e0a\u306e\u546a\u8853\u5e2b\u3092\u53d6\u5f97\n    fn find_by_min_power(&amp;self, min_power: i32) -&gt; Option&lt;Vec&lt;&amp;Sorcerer&gt;&gt; {\n        let filtered: Vec&lt;&amp;Sorcerer&gt; = self.sorcerers.iter()\n            .filter(|sorcerer| sorcerer.power &gt;= min_power)\n            .collect();\n\n        if filtered.is_empty() {\n            None\n        } else {\n            Some(filtered)\n        }\n    }\n\n    // \u546a\u8853\u5e2b\u306e\u8a73\u7d30\u60c5\u5831\u3092\u53d6\u5f97\n    fn get_sorcerer_details(&amp;self, name: &amp;str) -&gt; Option&lt;String&gt; {\n        self.find_by_name(name)\n            .map(|sorcerer| {\n                let strongest_tech = sorcerer.get_strongest_technique()\n                    .map(|tech| tech.as_str())\n                    .unwrap_or(\\\"\u306a\u3057\\\");\n\n                format!(\n                    \\\"\u540d\u524d: {}\\\\n\u7b49\u7d1a: {}\\\\n\u546a\u529b: {} ({})\\\\n\u6280\u6570: {}\\\\n\u6700\u5f37\u6280: {}\\\",\n                    sorcerer.name,\n                    sorcerer.grade,\n                    sorcerer.power,\n                    sorcerer.get_power_level(),\n                    sorcerer.techniques.len(),\n                    strongest_tech\n                )\n            })\n    }\n\n    // \u546a\u8853\u5e2b\u540c\u58eb\u306e\u5b9f\u529b\u6bd4\u8f03\n    fn compare_sorcerers(&amp;self, name1: &amp;str, name2: &amp;str) -&gt; Option&lt;String&gt; {\n        let sorcerer1 = self.find_by_name(name1)?;\n        let sorcerer2 = self.find_by_name(name2)?;\n\n        let comparison = if sorcerer1.power &gt; sorcerer2.power {\n            format!(\\\"{} \u306e\u65b9\u304c\u5f37\u3044 (\u546a\u529b\u5dee: {})\\\",\n                sorcerer1.name, sorcerer1.power - sorcerer2.power)\n        } else if sorcerer2.power &gt; sorcerer1.power {\n            format!(\\\"{} \u306e\u65b9\u304c\u5f37\u3044 (\u546a\u529b\u5dee: {})\\\",\n                sorcerer2.name, sorcerer2.power - sorcerer1.power)\n        } else {\n            \\\"\u4e92\u89d2\u306e\u5b9f\u529b\\\".to_string()\n        };\n\n        Some(comparison)\n    }\n}\n\nfn main() {\n    let mut db = SorcererDatabase::new();\n\n    // \u30c7\u30fc\u30bf\u306e\u767b\u9332\n    let mut gojo = Sorcerer::new(\\\"\u4e94\u6761\u609f\\\", \\\"\u7279\u7d1a\\\", 3000);\n    gojo.add_technique(\\\"\u7121\u4e0b\u9650\u546a\u8853\\\".to_string());\n    gojo.add_technique(\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\".to_string());\n    gojo.add_technique(\\\"\u8853\u5f0f\u53cd\u8ee2\u300e\u8d6b\u300f\\\".to_string());\n\n    let mut sukuna = Sorcerer::new(\\\"\u4e21\u9762\u5bbf\u513a\\\", \\\"\u7279\u7d1a\\\", 2800);\n    sukuna.add_technique(\\\"\u89e3\\\".to_string());\n    sukuna.add_technique(\\\"\u634c\\\".to_string());\n\n    let mut yuji = Sorcerer::new(\\\"\u864e\u6756\u60a0\u4ec1\\\", \\\"1\u7d1a\\\", 1200);\n    yuji.add_technique(\\\"\u9ed2\u9583\\\".to_string());\n\n    db.add_sorcerer(gojo);\n    db.add_sorcerer(sukuna);\n    db.add_sorcerer(yuji);\n\n    println!(\\\"=== \u546a\u8853\u5e2b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u691c\u7d22 ===\\\");\n\n    // \u540d\u524d\u691c\u7d22\n    if let Some(details) = db.get_sorcerer_details(\\\"\u4e94\u6761\u609f\\\") {\n        println!(\\\"\\\\n\u4e94\u6761\u609f\u306e\u8a73\u7d30:\\\\n{}\\\", details);\n    }\n\n    // \u5b58\u5728\u3057\u306a\u3044\u546a\u8853\u5e2b\n    match db.find_by_name(\\\"\u5b58\u5728\u3057\u306a\u3044\u546a\u8853\u5e2b\\\") {\n        Some(sorcerer) =&gt; println!(\\\"\u898b\u3064\u304b\u308a\u307e\u3057\u305f: {}\\\", sorcerer.name),\n        None =&gt; println!(\\\"\\\\n'\u5b58\u5728\u3057\u306a\u3044\u546a\u8853\u5e2b' \u306f\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\\\"),\n    }\n\n    // \u6700\u5f37\u306e\u546a\u8853\u5e2b\n    if let Some(strongest) = db.get_strongest() {\n        println!(\\\"\\\\n\u6700\u5f37\u306e\u546a\u8853\u5e2b: {} (\u546a\u529b: {})\\\",\n                 strongest.name, strongest.power);\n    }\n\n    // \u5b9f\u529b\u6bd4\u8f03\n    if let Some(comparison) = db.compare_sorcerers(\\\"\u4e94\u6761\u609f\\\", \\\"\u4e21\u9762\u5bbf\u513a\\\") {\n        println!(\\\"\\\\n\u5b9f\u529b\u6bd4\u8f03: {}\\\", comparison);\n    }\n\n    // \u9ad8\u5a01\u529b\u546a\u8853\u5e2b\u691c\u7d22\n    match db.find_by_min_power(2000) {\n        Some(powerful_sorcerers) =&gt; {\n            println!(\\\"\\\\n\u546a\u529b2000\u4ee5\u4e0a\u306e\u546a\u8853\u5e2b:\\\");\n            for sorcerer in powerful_sorcerers {\n                println!(\\\"  {} - \u546a\u529b: {}\\\", sorcerer.name, sorcerer.power);\n            }\n        },\n        None =&gt; println!(\\\"\\\\n\u546a\u529b2000\u4ee5\u4e0a\u306e\u546a\u8853\u5e2b\u306f\u3044\u307e\u305b\u3093\\\"),\n    }\n}\n</code></pre>"},{"location":"chapter03/option/#option_5","title":"Option\u578b\u306e\u9023\u9396\u64cd\u4f5c","text":"<pre><code>// \u8907\u96d1\u306a\u691c\u7d22\u3068\u30c7\u30fc\u30bf\u5909\u63db\nfn process_sorcerer_data(db: &amp;SorcererDatabase, name: &amp;str) -&gt; Option&lt;String&gt; {\n    db.find_by_name(name)                    // Option&lt;&amp;Sorcerer&gt;\n        .filter(|s| s.power &gt;= 1000)        // \u5341\u5206\u5f37\u3044\u5834\u5408\u306e\u307f\n        .and_then(|s| s.get_strongest_technique())  // \u6700\u5f37\u6280\u3092\u53d6\u5f97\n        .map(|tech| format!(\\\"{}\u306e\u5965\u7fa9: {}\\\", name, tech))  // \u30e1\u30c3\u30bb\u30fc\u30b8\u4f5c\u6210\n}\n\nfn calculate_total_power(db: &amp;SorcererDatabase, names: &amp;[&amp;str]) -&gt; Option&lt;i32&gt; {\n    let mut total = 0;\n\n    for name in names {\n        match db.find_by_name(name) {\n            Some(sorcerer) =&gt; total += sorcerer.power,\n            None =&gt; return None,  // 1\u4eba\u3067\u3082\u898b\u3064\u304b\u3089\u306a\u3051\u308c\u3070None\n        }\n    }\n\n    Some(total)\n}\n\nfn main() {\n    let mut db = SorcererDatabase::new();\n\n    // \u30c7\u30fc\u30bf\u7701\u7565...\n\n    // \u9023\u9396\u64cd\u4f5c\u306e\u30c6\u30b9\u30c8\n    let result = process_sorcerer_data(&amp;db, \\\"\u4e94\u6761\u609f\\\");\n    println!(\\\"\u51e6\u7406\u7d50\u679c: {:?}\\\", result);\n\n    // \u5408\u8a08\u546a\u529b\u8a08\u7b97\n    let team = [\\\"\u4e94\u6761\u609f\\\", \\\"\u864e\u6756\u60a0\u4ec1\\\"];\n    let total_power = calculate_total_power(&amp;db, &amp;team);\n    println!(\\\"\u30c1\u30fc\u30e0\u7dcf\u546a\u529b: {:?}\\\", total_power);\n}\n</code></pre>"},{"location":"chapter03/option/#_4","title":"\u307e\u3068\u3081","text":"<p>Option\u578b\u306e\u57fa\u672c\u306f\u30de\u30b9\u30bf\u30fc\u3067\u304d\u305f\u304b\uff1f\u91cd\u8981\u306a\u30dd\u30a4\u30f3\u30c8\uff1a</p> <ol> <li>\u578b\u5b89\u5168\u6027 - null\u30dd\u30a4\u30f3\u30bf\u4f8b\u5916\u304c\u8d77\u3053\u308a\u3048\u306a\u3044</li> <li>\u660e\u793a\u7684\u306a\u51e6\u7406 - \u5024\u304c\u306a\u3044\u53ef\u80fd\u6027\u3092\u578b\u3067\u8868\u73fe</li> <li>\u95a2\u6570\u578b\u30e1\u30bd\u30c3\u30c9 - map\u3001and_then\u3001filter\u306a\u3069</li> <li>\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0 - match\u3068if let\u3067\u5b89\u5168\u306b\u51e6\u7406</li> <li>\u30c1\u30a7\u30fc\u30f3\u64cd\u4f5c - \u8907\u6570\u306e\u64cd\u4f5c\u3092\u5b89\u5168\u306b\u9023\u9396</li> </ol> <p>\u3053\u308c\u306f\u4ffa\u306e\u53cd\u8ee2\u8853\u5f0f\u3068\u540c\u3058\u3067\u3001\u4e00\u898b\u30cd\u30ac\u30c6\u30a3\u30d6\u306a\u300c\u5024\u304c\u306a\u3044\u300d\u72b6\u6cc1\u3092\u3001\u578b\u5b89\u5168\u3068\u3044\u3046\u5f37\u529b\u306a\u529b\u306b\u5909\u3048\u308b\u6280\u8853\u3060\u3002</p> <p>\u6b21\u306fResult\u578b\u306b\u3064\u3044\u3066\u5b66\u307c\u3046\u3002\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306e\u771f\u306e\u529b\u3092\u898b\u305b\u3066\u3084\u308b\u3002</p> <p>\u300cOption\u3092\u6975\u3081\u308c\u3070\u3001\u4e0d\u5728\u3059\u3089\u5473\u65b9\u306b\u3067\u304d\u308b\u300d</p>"},{"location":"chapter03/result/","title":"Result\u578b - \u30a8\u30e9\u30fc\u3092\u652f\u914d\u3059\u308b\u529b","text":""},{"location":"chapter03/result/#result-_1","title":"Result\u578b\u3068\u306f - \u5931\u6557\u3092\u6210\u529f\u306b\u5909\u3048\u308b\u53cd\u8ee2\u8853\u5f0f","text":"<p>Option\u578b\u304c\u300c\u5024\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u300d\u3092\u8868\u73fe\u3059\u308b\u306a\u3089\u3001Result\u578b\u306f\u300c\u6210\u529f\u3059\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3057\u3001\u5931\u6557\u3059\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u300d\u64cd\u4f5c\u3092\u8868\u73fe\u3059\u308b\u3002\u3053\u308c\u3053\u305d\u4ffa\u306e\u53cd\u8ee2\u8853\u5f0f\u306e\u771f\u9ac4\u3060\u3002</p> <p>\u5f93\u6765\u306e\u8a00\u8a9e\u3067\u306f\u4f8b\u5916\u51e6\u7406\u3067\u30a8\u30e9\u30fc\u3092\u6271\u3063\u3066\u3044\u305f\u304c\u3001\u3053\u308c\u306f\u4e88\u6e2c\u4e0d\u53ef\u80fd\u3067\u5236\u5fa1\u3057\u3065\u3089\u3044\u3002Rust\u306f\u9055\u3046\u3002Result\u578b\u3067\u30a8\u30e9\u30fc\u3082\u5024\u3068\u3057\u3066\u6271\u3044\u3001\u5b8c\u74a7\u306b\u5236\u5fa1\u3059\u308b\u3002</p> <p>\u4e94\u6761\u5148\u751f\u306e\u89e3\u8aac</p> <p>Result\u578b\u306f\u6210\u529f\u6642\u306e\u5024\u3068\u30a8\u30e9\u30fc\u6642\u306e\u60c5\u5831\u3092\u578b\u5b89\u5168\u306b\u8868\u73fe\u3059\u308b\u3002 <code>Ok(T)</code>\u3067\u6210\u529f\u3001<code>Err(E)</code>\u3067\u5931\u6557\u3092\u8868\u3059\u3002\u4f8b\u5916\u306f\u767a\u751f\u305b\u305a\u3001\u3059\u3079\u3066\u306e\u30a8\u30e9\u30fc\u304c\u660e\u793a\u7684\u306b\u51e6\u7406\u3055\u308c\u308b\u3002</p>"},{"location":"chapter03/result/#result","title":"Result\u578b\u306e\u57fa\u672c","text":""},{"location":"chapter03/result/#result_1","title":"Result\u578b\u306e\u5b9a\u7fa9","text":"<pre><code>// Rust\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\nenum Result&lt;T, E&gt; {\n    Ok(T),   // \u6210\u529f\u6642\u306e\u5024\n    Err(E),  // \u30a8\u30e9\u30fc\u6642\u306e\u60c5\u5831\n}\n</code></pre>"},{"location":"chapter03/result/#_1","title":"\u57fa\u672c\u7684\u306a\u4f7f\u7528\u6cd5","text":"<pre><code>fn main() {\n    // \u6210\u529f\u306e\u5834\u5408\n    let success: Result&lt;i32, &amp;str&gt; = Ok(1500);\n\n    // \u5931\u6557\u306e\u5834\u5408\n    let failure: Result&lt;i32, &amp;str&gt; = Err(\\\"\u546a\u529b\u4e0d\u8db3\\\");\n\n    println!(\\\"\u6210\u529f: {:?}\\\", success);  // Ok(1500)\n    println!(\\\"\u5931\u6557: {:?}\\\", failure);  // Err(\\\"\u546a\u529b\u4e0d\u8db3\\\")\n}\n</code></pre>"},{"location":"chapter03/result/#result_2","title":"Result\u578b\u3092\u8fd4\u3059\u95a2\u6570","text":""},{"location":"chapter03/result/#_2","title":"\u57fa\u672c\u7684\u306a\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0","text":"<pre><code>fn cast_technique(power: i32, required_power: i32) -&gt; Result&lt;String, String&gt; {\n    if power &gt;= required_power {\n        Ok(format!(\\\"\u8853\u5f0f\u767a\u52d5\u6210\u529f\uff01 (\u4f7f\u7528\u546a\u529b: {})\\\", required_power))\n    } else {\n        Err(format!(\\\"\u546a\u529b\u4e0d\u8db3\u3002\u5fc5\u8981: {}, \u73fe\u5728: {}\\\", required_power, power))\n    }\n}\n\nfn divide_power(power: i32, divisor: i32) -&gt; Result&lt;i32, String&gt; {\n    if divisor == 0 {\n        Err(\\\"0\u3067\u5272\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\\\".to_string())\n    } else {\n        Ok(power / divisor)\n    }\n}\n\nfn main() {\n    // \u6210\u529f\u4f8b\n    let success = cast_technique(2000, 1500);\n    println!(\\\"{:?}\\\", success);\n\n    // \u5931\u6557\u4f8b\n    let failure = cast_technique(800, 1500);\n    println!(\\\"{:?}\\\", failure);\n\n    // \u9664\u7b97\u306e\u4f8b\n    println!(\\\"{:?}\\\", divide_power(1000, 5));  // Ok(200)\n    println!(\\\"{:?}\\\", divide_power(1000, 0));  // Err\n}\n</code></pre>"},{"location":"chapter03/result/#_3","title":"\u3088\u308a\u5b9f\u7528\u7684\u306a\u4f8b","text":"<pre><code>#[derive(Debug)]\nenum TechniqueError {\n    InsufficientPower,\n    TechniqueNotFound,\n    InvalidTarget,\n    CooldownActive,\n}\n\nimpl std::fmt::Display for TechniqueError {\n    fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter) -&gt; std::fmt::Result {\n        match self {\n            TechniqueError::InsufficientPower =&gt; write!(f, \\\"\u546a\u529b\u304c\u4e0d\u8db3\u3057\u3066\u3044\u307e\u3059\\\"),\n            TechniqueError::TechniqueNotFound =&gt; write!(f, \\\"\u8853\u5f0f\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\\\"),\n            TechniqueError::InvalidTarget =&gt; write!(f, \\\"\u7121\u52b9\u306a\u5bfe\u8c61\u3067\u3059\\\"),\n            TechniqueError::CooldownActive =&gt; write!(f, \\\"\u8853\u5f0f\u304c\u30af\u30fc\u30eb\u30c0\u30a6\u30f3\u4e2d\u3067\u3059\\\"),\n        }\n    }\n}\n\nstruct Sorcerer {\n    name: String,\n    power: i32,\n    techniques: Vec&lt;String&gt;,\n    cooldowns: Vec&lt;bool&gt;,\n}\n\nimpl Sorcerer {\n    fn new(name: &amp;str, power: i32) -&gt; Self {\n        Sorcerer {\n            name: String::from(name),\n            power,\n            techniques: Vec::new(),\n            cooldowns: Vec::new(),\n        }\n    }\n\n    fn add_technique(&amp;mut self, technique: String) {\n        self.techniques.push(technique);\n        self.cooldowns.push(false);\n    }\n\n    fn use_technique(&amp;mut self, technique_name: &amp;str, required_power: i32)\n        -&gt; Result&lt;String, TechniqueError&gt; {\n\n        // \u546a\u529b\u30c1\u30a7\u30c3\u30af\n        if self.power &lt; required_power {\n            return Err(TechniqueError::InsufficientPower);\n        }\n\n        // \u8853\u5f0f\u306e\u5b58\u5728\u30c1\u30a7\u30c3\u30af\n        let technique_index = self.techniques.iter()\n            .position(|tech| tech == technique_name)\n            .ok_or(TechniqueError::TechniqueNotFound)?;\n\n        // \u30af\u30fc\u30eb\u30c0\u30a6\u30f3\u30c1\u30a7\u30c3\u30af\n        if self.cooldowns[technique_index] {\n            return Err(TechniqueError::CooldownActive);\n        }\n\n        // \u8853\u5f0f\u4f7f\u7528\n        self.power -= required_power;\n        self.cooldowns[technique_index] = true;\n\n        Ok(format!(\\\"{} \u304c {} \u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\uff01 (\u6b8b\u308a\u546a\u529b: {})\\\",\n                   self.name, technique_name, self.power))\n    }\n\n    fn reset_cooldowns(&amp;mut self) {\n        for cooldown in &amp;mut self.cooldowns {\n            *cooldown = false;\n        }\n    }\n}\n\nfn main() {\n    let mut gojo = Sorcerer::new(\\\"\u4e94\u6761\u609f\\\", 3000);\n    gojo.add_technique(\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\".to_string());\n    gojo.add_technique(\\\"\u8853\u5f0f\u53cd\u8ee2\u300e\u8d6b\u300f\\\".to_string());\n\n    // \u6210\u529f\u4f8b\n    match gojo.use_technique(\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\", 500) {\n        Ok(message) =&gt; println!(\\\"\u2713 {}\\\", message),\n        Err(error) =&gt; println!(\\\"\u2717 \u30a8\u30e9\u30fc: {}\\\", error),\n    }\n\n    // \u30af\u30fc\u30eb\u30c0\u30a6\u30f3\u30a8\u30e9\u30fc\n    match gojo.use_technique(\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\", 500) {\n        Ok(message) =&gt; println!(\\\"\u2713 {}\\\", message),\n        Err(error) =&gt; println!(\\\"\u2717 \u30a8\u30e9\u30fc: {}\\\", error),\n    }\n\n    // \u5b58\u5728\u3057\u306a\u3044\u8853\u5f0f\u30a8\u30e9\u30fc\n    match gojo.use_technique(\\\"\u5b58\u5728\u3057\u306a\u3044\u8853\u5f0f\\\", 100) {\n        Ok(message) =&gt; println!(\\\"\u2713 {}\\\", message),\n        Err(error) =&gt; println!(\\\"\u2717 \u30a8\u30e9\u30fc: {}\\\", error),\n    }\n\n    // \u30af\u30fc\u30eb\u30c0\u30a6\u30f3\u30ea\u30bb\u30c3\u30c8\u5f8c\u306b\u518d\u5b9f\u884c\n    gojo.reset_cooldowns();\n    match gojo.use_technique(\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\", 500) {\n        Ok(message) =&gt; println!(\\\"\u2713 {}\\\", message),\n        Err(error) =&gt; println!(\\\"\u2717 \u30a8\u30e9\u30fc: {}\\\", error),\n    }\n}\n</code></pre>"},{"location":"chapter03/result/#result_3","title":"Result\u306e\u51e6\u7406\u65b9\u6cd5","text":""},{"location":"chapter03/result/#match","title":"match\u5f0f\u306b\u3088\u308b\u51e6\u7406","text":"<pre><code>fn process_technique_result(result: Result&lt;String, TechniqueError&gt;) {\n    match result {\n        Ok(message) =&gt; {\n            println!(\\\"\u6210\u529f: {}\\\", message);\n        },\n        Err(TechniqueError::InsufficientPower) =&gt; {\n            println!(\\\"\u546a\u529b\u304c\u8db3\u308a\u307e\u305b\u3093\u3002\u4fee\u884c\u3057\u307e\u3057\u3087\u3046\u3002\\\");\n        },\n        Err(TechniqueError::TechniqueNotFound) =&gt; {\n            println!(\\\"\u305d\u306e\u8853\u5f0f\u306f\u7fd2\u5f97\u3057\u3066\u3044\u307e\u305b\u3093\u3002\\\");\n        },\n        Err(error) =&gt; {\n            println!(\\\"\u4e88\u671f\u3057\u306a\u3044\u30a8\u30e9\u30fc: {}\\\", error);\n        },\n    }\n}\n</code></pre>"},{"location":"chapter03/result/#if-let","title":"if let \u3092\u4f7f\u3063\u305f\u51e6\u7406","text":"<pre><code>fn main() {\n    let result = cast_technique(2000, 1500);\n\n    // \u6210\u529f\u6642\u306e\u307f\u51e6\u7406\n    if let Ok(message) = result {\n        println!(\\\"\u8853\u5f0f\u6210\u529f: {}\\\", message);\n    }\n\n    let error_result = cast_technique(500, 1500);\n\n    // \u30a8\u30e9\u30fc\u6642\u306e\u307f\u51e6\u7406\n    if let Err(error) = error_result {\n        println!(\\\"\u8853\u5f0f\u5931\u6557: {}\\\", error);\n    }\n}\n</code></pre>"},{"location":"chapter03/result/#result_4","title":"Result\u306e\u30e1\u30bd\u30c3\u30c9","text":""},{"location":"chapter03/result/#unwrap","title":"unwrap\u7cfb\u30e1\u30bd\u30c3\u30c9","text":"<pre><code>fn main() {\n    let success: Result&lt;i32, &amp;str&gt; = Ok(1500);\n    let failure: Result&lt;i32, &amp;str&gt; = Err(\\\"\u30a8\u30e9\u30fc\\\");\n\n    // unwrap() - Ok\u306e\u5024\u3092\u53d6\u308a\u51fa\u3059\u304c\u3001Err\u306e\u5834\u5408\u306f\u30d1\u30cb\u30c3\u30af\n    let power = success.unwrap();\n    println!(\\\"\u546a\u529b: {}\\\", power);\n\n    // failure.unwrap(); // \u30d1\u30cb\u30c3\u30af\u3059\u308b\uff01\n\n    // unwrap_or() - Err\u306e\u5834\u5408\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\n    let safe_power = failure.unwrap_or(0);\n    println!(\\\"\u5b89\u5168\u306a\u546a\u529b: {}\\\", safe_power);\n\n    // unwrap_or_else() - Err\u306e\u5834\u5408\u306f\u30af\u30ed\u30fc\u30b8\u30e3\u3092\u5b9f\u884c\n    let calculated_power = failure.unwrap_or_else(|error| {\n        println!(\\\"\u30a8\u30e9\u30fc\u304c\u767a\u751f: {}\\\", error);\n        100  // \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\n    });\n    println!(\\\"\u8a08\u7b97\u3055\u308c\u305f\u546a\u529b: {}\\\", calculated_power);\n}\n</code></pre>"},{"location":"chapter03/result/#expect","title":"expect() \u30e1\u30bd\u30c3\u30c9","text":"<pre><code>fn main() {\n    let technique_result: Result&lt;String, &amp;str&gt; = Ok(\\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\".to_string());\n\n    // expect() - unwrap()\u3068\u540c\u3058\u3060\u304c\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6307\u5b9a\n    let technique = technique_result.expect(\\\"\u8853\u5f0f\u306e\u53d6\u5f97\u306b\u5931\u6557\u3057\u307e\u3057\u305f\\\");\n    println!(\\\"\u6280: {}\\\", technique);\n}\n</code></pre>"},{"location":"chapter03/result/#is_ok-is_err","title":"is_ok() \u3068 is_err()","text":"<pre><code>fn check_technique_status(result: Result&lt;String, TechniqueError&gt;) {\n    if result.is_ok() {\n        println!(\\\"\u8853\u5f0f\u304c\u6b63\u5e38\u306b\u5b9f\u884c\u3055\u308c\u307e\u3057\u305f\\\");\n    } else {\n        println!(\\\"\u8853\u5f0f\u306e\u5b9f\u884c\u306b\u5931\u6557\u3057\u307e\u3057\u305f\\\");\n    }\n\n    // \u30a8\u30e9\u30fc\u306e\u8a73\u7d30\u78ba\u8a8d\n    if result.is_err() {\n        if let Err(error) = result {\n            println!(\\\"\u30a8\u30e9\u30fc\u306e\u8a73\u7d30: {}\\\", error);\n        }\n    }\n}\n</code></pre>"},{"location":"chapter03/result/#map-map_err","title":"map() \u3068 map_err()","text":"<pre><code>fn main() {\n    let power_result: Result&lt;i32, &amp;str&gt; = Ok(1500);\n    let error_result: Result&lt;i32, &amp;str&gt; = Err(\\\"\u8a08\u7b97\u30a8\u30e9\u30fc\\\");\n\n    // map() - Ok\u306e\u5024\u3092\u5909\u63db\n    let doubled_power = power_result.map(|power| power * 2);\n    println!(\\\"2\u500d\u306e\u546a\u529b: {:?}\\\", doubled_power);  // Ok(3000)\n\n    // map_err() - Err\u306e\u5024\u3092\u5909\u63db\n    let formatted_error = error_result.map_err(|err| format!(\\\"\u767a\u751f\u3057\u305f\u30a8\u30e9\u30fc: {}\\\", err));\n    println!(\\\"\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6e08\u307f\u30a8\u30e9\u30fc: {:?}\\\", formatted_error);\n\n    // \u8907\u96d1\u306a\u5909\u63db\n    let power_description = Ok(2500)\n        .map(|power| {\n            if power &gt;= 3000 {\n                \\\"\u6700\u5f37\u7d1a\\\"\n            } else if power &gt;= 2000 {\n                \\\"\u7279\u7d1a\\\"\n            } else {\n                \\\"\u4e00\u822c\\\"\n            }\n        });\n\n    println!(\\\"\u546a\u529b\u30ec\u30d9\u30eb: {:?}\\\", power_description);\n}\n</code></pre>"},{"location":"chapter03/result/#and_then","title":"and_then() \u30e1\u30bd\u30c3\u30c9","text":"<pre><code>fn get_sorcerer_power(name: &amp;str) -&gt; Result&lt;i32, String&gt; {\n    match name {\n        \\\"\u4e94\u6761\u609f\\\" =&gt; Ok(3000),\n        \\\"\u864e\u6756\u60a0\u4ec1\\\" =&gt; Ok(1200),\n        \\\"\u4f0f\u9ed2\u6075\\\" =&gt; Ok(1000),\n        _ =&gt; Err(format!(\\\"{}\u306f\u898b\u3064\u304b\u308a\u307e\u305b\u3093\\\", name)),\n    }\n}\n\nfn calculate_technique_damage(power: i32) -&gt; Result&lt;i32, String&gt; {\n    if power &gt;= 1000 {\n        Ok(power / 2)\n    } else {\n        Err(\\\"\u546a\u529b\u304c\u4f4e\u3059\u304e\u3066\u30c0\u30e1\u30fc\u30b8\u8a08\u7b97\u304c\u3067\u304d\u307e\u305b\u3093\\\".to_string())\n    }\n}\n\nfn main() {\n    let name = \\\"\u4e94\u6761\u609f\\\";\n\n    // and_then() \u3067Result\u3092\u8fd4\u3059\u95a2\u6570\u3092\u30c1\u30a7\u30fc\u30f3\n    let damage = get_sorcerer_power(name)\n        .and_then(calculate_technique_damage);\n\n    println!(\\\"{} \u306e\u30c0\u30e1\u30fc\u30b8: {:?}\\\", name, damage);\n\n    // \u3088\u308a\u8907\u96d1\u306a\u30c1\u30a7\u30fc\u30f3\n    let result = get_sorcerer_power(\\\"\u864e\u6756\u60a0\u4ec1\\\")\n        .and_then(calculate_technique_damage)\n        .map(|damage| format!(\\\"\u6700\u7d42\u30c0\u30e1\u30fc\u30b8: {}\\\", damage));\n\n    println!(\\\"\u8a08\u7b97\u7d50\u679c: {:?}\\\", result);\n\n    // \u5931\u6557\u4f8b\n    let failed_result = get_sorcerer_power(\\\"\u5b58\u5728\u3057\u306a\u3044\u546a\u8853\u5e2b\\\")\n        .and_then(calculate_technique_damage);\n\n    println!(\\\"\u5931\u6557\u4f8b: {:?}\\\", failed_result);\n}\n</code></pre>"},{"location":"chapter03/result/#-","title":"?\u6f14\u7b97\u5b50 - \u30a8\u30e9\u30fc\u306e\u512a\u96c5\u306a\u4f1d\u64ad","text":"<pre><code>fn complex_technique_calculation(sorcerer_name: &amp;str) -&gt; Result&lt;String, String&gt; {\n    let power = get_sorcerer_power(sorcerer_name)?;  // \u30a8\u30e9\u30fc\u306e\u5834\u5408\u3001\u65e9\u671f\u30ea\u30bf\u30fc\u30f3\n    let damage = calculate_technique_damage(power)?;  // \u30a8\u30e9\u30fc\u306e\u5834\u5408\u3001\u65e9\u671f\u30ea\u30bf\u30fc\u30f3\n\n    Ok(format!(\\\"{} \u306e\u8853\u5f0f\u30c0\u30e1\u30fc\u30b8: {}\\\", sorcerer_name, damage))\n}\n\nfn multiple_operations() -&gt; Result&lt;i32, String&gt; {\n    let power1 = get_sorcerer_power(\\\"\u4e94\u6761\u609f\\\")?;\n    let power2 = get_sorcerer_power(\\\"\u864e\u6756\u60a0\u4ec1\\\")?;\n    let total_power = power1 + power2;\n\n    if total_power &gt; 5000 {\n        Err(\\\"\u546a\u529b\u304c\u5f37\u3059\u304e\u307e\u3059\\\".to_string())\n    } else {\n        Ok(total_power)\n    }\n}\n\nfn main() {\n    // ?\u6f14\u7b97\u5b50\u3092\u4f7f\u3063\u305f\u8907\u96d1\u306a\u8a08\u7b97\n    match complex_technique_calculation(\\\"\u4e94\u6761\u609f\\\") {\n        Ok(result) =&gt; println!(\\\"\u2713 {}\\\", result),\n        Err(error) =&gt; println!(\\\"\u2717 {}\\\", error),\n    }\n\n    // \u5b58\u5728\u3057\u306a\u3044\u546a\u8853\u5e2b\u3067\u306e\u5931\u6557\u4f8b\n    match complex_technique_calculation(\\\"\u5b58\u5728\u3057\u306a\u3044\\\") {\n        Ok(result) =&gt; println!(\\\"\u2713 {}\\\", result),\n        Err(error) =&gt; println!(\\\"\u2717 {}\\\", error),\n    }\n\n    // \u8907\u6570\u64cd\u4f5c\u306e\u4f8b\n    match multiple_operations() {\n        Ok(total) =&gt; println!(\\\"\u2713 \u5408\u8a08\u546a\u529b: {}\\\", total),\n        Err(error) =&gt; println!(\\\"\u2717 {}\\\", error),\n    }\n}\n</code></pre>"},{"location":"chapter03/result/#-_1","title":"\u5b9f\u8df5\u4f8b - \u546a\u8853\u5b66\u6821\u6210\u7e3e\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0","text":"<pre><code>use std::collections::HashMap;\n\n#[derive(Debug)]\nenum GradeError {\n    StudentNotFound,\n    SubjectNotFound,\n    InvalidGrade,\n    DatabaseError(String),\n}\n\nimpl std::fmt::Display for GradeError {\n    fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter) -&gt; std::fmt::Result {\n        match self {\n            GradeError::StudentNotFound =&gt; write!(f, \\\"\u5b66\u751f\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\\\"),\n            GradeError::SubjectNotFound =&gt; write!(f, \\\"\u79d1\u76ee\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\\\"),\n            GradeError::InvalidGrade =&gt; write!(f, \\\"\u7121\u52b9\u306a\u6210\u7e3e\u3067\u3059\\\"),\n            GradeError::DatabaseError(msg) =&gt; write!(f, \\\"\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30a8\u30e9\u30fc: {}\\\", msg),\n        }\n    }\n}\n\n#[derive(Debug, Clone)]\nstruct Student {\n    name: String,\n    grades: HashMap&lt;String, i32&gt;,\n}\n\nimpl Student {\n    fn new(name: &amp;str) -&gt; Self {\n        Student {\n            name: String::from(name),\n            grades: HashMap::new(),\n        }\n    }\n\n    fn add_grade(&amp;mut self, subject: String, grade: i32) -&gt; Result&lt;(), GradeError&gt; {\n        if grade &lt; 0 || grade &gt; 100 {\n            return Err(GradeError::InvalidGrade);\n        }\n\n        self.grades.insert(subject, grade);\n        Ok(())\n    }\n\n    fn get_grade(&amp;self, subject: &amp;str) -&gt; Result&lt;i32, GradeError&gt; {\n        self.grades.get(subject)\n            .copied()\n            .ok_or(GradeError::SubjectNotFound)\n    }\n\n    fn get_average(&amp;self) -&gt; Result&lt;f64, GradeError&gt; {\n        if self.grades.is_empty() {\n            return Err(GradeError::DatabaseError(\\\"\u6210\u7e3e\u30c7\u30fc\u30bf\u304c\u3042\u308a\u307e\u305b\u3093\\\".to_string()));\n        }\n\n        let total: i32 = self.grades.values().sum();\n        let average = total as f64 / self.grades.len() as f64;\n        Ok(average)\n    }\n\n    fn get_grade_level(&amp;self) -&gt; Result&lt;String, GradeError&gt; {\n        let average = self.get_average()?;\n\n        let level = match average as i32 {\n            90..=100 =&gt; \\\"\u512a\u79c0\\\",\n            80..=89 =&gt; \\\"\u826f\u597d\\\",\n            70..=79 =&gt; \\\"\u666e\u901a\\\",\n            60..=69 =&gt; \\\"\u8981\u52aa\u529b\\\",\n            _ =&gt; \\\"\u8981\u6307\u5c0e\\\",\n        };\n\n        Ok(level.to_string())\n    }\n}\n\nstruct GradeManager {\n    students: HashMap&lt;String, Student&gt;,\n}\n\nimpl GradeManager {\n    fn new() -&gt; Self {\n        GradeManager {\n            students: HashMap::new(),\n        }\n    }\n\n    fn add_student(&amp;mut self, student: Student) {\n        self.students.insert(student.name.clone(), student);\n    }\n\n    fn get_student(&amp;self, name: &amp;str) -&gt; Result&lt;&amp;Student, GradeError&gt; {\n        self.students.get(name).ok_or(GradeError::StudentNotFound)\n    }\n\n    fn get_student_mut(&amp;mut self, name: &amp;str) -&gt; Result&lt;&amp;mut Student, GradeError&gt; {\n        self.students.get_mut(name).ok_or(GradeError::StudentNotFound)\n    }\n\n    fn add_grade(&amp;mut self, student_name: &amp;str, subject: String, grade: i32)\n        -&gt; Result&lt;(), GradeError&gt; {\n        let student = self.get_student_mut(student_name)?;\n        student.add_grade(subject, grade)?;\n        Ok(())\n    }\n\n    fn get_student_report(&amp;self, name: &amp;str) -&gt; Result&lt;String, GradeError&gt; {\n        let student = self.get_student(name)?;\n        let average = student.get_average()?;\n        let level = student.get_grade_level()?;\n\n        let mut report = format!(\\\"\u5b66\u751f: {}\\\\n\u5e73\u5747\u70b9: {:.1}\\\\n\u8a55\u4fa1: {}\\\\n\\\\n\u79d1\u76ee\u5225\u6210\u7e3e:\\\\n\\\",\n                                student.name, average, level);\n\n        for (subject, grade) in &amp;student.grades {\n            report.push_str(&amp;format!(\\\"  {}: {}\u70b9\\\\n\\\", subject, grade));\n        }\n\n        Ok(report)\n    }\n\n    fn compare_students(&amp;self, name1: &amp;str, name2: &amp;str) -&gt; Result&lt;String, GradeError&gt; {\n        let student1 = self.get_student(name1)?;\n        let student2 = self.get_student(name2)?;\n\n        let avg1 = student1.get_average()?;\n        let avg2 = student2.get_average()?;\n\n        let comparison = if avg1 &gt; avg2 {\n            format!(\\\"{} \u306e\u65b9\u304c\u512a\u79c0 (\u5e73\u5747\u70b9\u5dee: {:.1})\\\",\n                    student1.name, avg1 - avg2)\n        } else if avg2 &gt; avg1 {\n            format!(\\\"{} \u306e\u65b9\u304c\u512a\u79c0 (\u5e73\u5747\u70b9\u5dee: {:.1})\\\",\n                    student2.name, avg2 - avg1)\n        } else {\n            \\\"\u540c\u3058\u6210\u7e3e\\\".to_string()\n        };\n\n        Ok(comparison)\n    }\n\n    fn get_class_statistics(&amp;self) -&gt; Result&lt;String, GradeError&gt; {\n        if self.students.is_empty() {\n            return Err(GradeError::DatabaseError(\\\"\u5b66\u751f\u30c7\u30fc\u30bf\u304c\u3042\u308a\u307e\u305b\u3093\\\".to_string()));\n        }\n\n        let mut total_average = 0.0;\n        let mut student_count = 0;\n        let mut grade_levels = HashMap::new();\n\n        for student in self.students.values() {\n            let average = student.get_average()?;\n            let level = student.get_grade_level()?;\n\n            total_average += average;\n            student_count += 1;\n            *grade_levels.entry(level).or_insert(0) += 1;\n        }\n\n        let class_average = total_average / student_count as f64;\n\n        let mut stats = format!(\\\"\u30af\u30e9\u30b9\u7d71\u8a08\\\\n\u5b66\u751f\u6570: {}\\\\n\u30af\u30e9\u30b9\u5e73\u5747: {:.1}\\\\n\\\\n\u8a55\u4fa1\u5206\u5e03:\\\\n\\\",\n                               student_count, class_average);\n\n        for (level, count) in grade_levels {\n            stats.push_str(&amp;format!(\\\"  {}: {}\u4eba\\\\n\\\", level, count));\n        }\n\n        Ok(stats)\n    }\n}\n\nfn main() {\n    let mut manager = GradeManager::new();\n\n    // \u5b66\u751f\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\n    let mut gojo = Student::new(\\\"\u4e94\u6761\u609f\\\");\n    let mut yuji = Student::new(\\\"\u864e\u6756\u60a0\u4ec1\\\");\n    let mut megumi = Student::new(\\\"\u4f0f\u9ed2\u6075\\\");\n\n    // \u6210\u7e3e\u306e\u8ffd\u52a0\uff08\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u4ed8\u304d\uff09\n    let subjects = vec![\\\"\u546a\u8853\u7406\u8ad6\\\", \\\"\u5b9f\u6280\\\", \\\"\u546a\u5177\u5b66\\\", \\\"\u7d50\u754c\u8853\\\"];\n    let gojo_grades = vec![98, 95, 92, 96];\n    let yuji_grades = vec![75, 88, 70, 73];\n    let megumi_grades = vec![89, 85, 91, 87];\n\n    // \u4e94\u6761\u609f\u306e\u6210\u7e3e\n    for (subject, grade) in subjects.iter().zip(gojo_grades.iter()) {\n        if let Err(e) = gojo.add_grade(subject.to_string(), *grade) {\n            println!(\\\"\u30a8\u30e9\u30fc: {}\\\", e);\n        }\n    }\n\n    // \u864e\u6756\u60a0\u4ec1\u306e\u6210\u7e3e\n    for (subject, grade) in subjects.iter().zip(yuji_grades.iter()) {\n        if let Err(e) = yuji.add_grade(subject.to_string(), *grade) {\n            println!(\\\"\u30a8\u30e9\u30fc: {}\\\", e);\n        }\n    }\n\n    // \u4f0f\u9ed2\u6075\u306e\u6210\u7e3e\n    for (subject, grade) in subjects.iter().zip(megumi_grades.iter()) {\n        if let Err(e) = megumi.add_grade(subject.to_string(), *grade) {\n            println!(\\\"\u30a8\u30e9\u30fc: {}\\\", e);\n        }\n    }\n\n    manager.add_student(gojo);\n    manager.add_student(yuji);\n    manager.add_student(megumi);\n\n    println!(\\\"=== \u546a\u8853\u5b66\u6821\u6210\u7e3e\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0 ===\\\");\n\n    // \u5b66\u751f\u30ec\u30dd\u30fc\u30c8\n    match manager.get_student_report(\\\"\u4e94\u6761\u609f\\\") {\n        Ok(report) =&gt; println!(\\\"\\\\n{}\\\", report),\n        Err(error) =&gt; println!(\\\"\u30a8\u30e9\u30fc: {}\\\", error),\n    }\n\n    // \u5b66\u751f\u6bd4\u8f03\n    match manager.compare_students(\\\"\u4e94\u6761\u609f\\\", \\\"\u864e\u6756\u60a0\u4ec1\\\") {\n        Ok(comparison) =&gt; println!(\\\"\u6bd4\u8f03\u7d50\u679c: {}\\\\n\\\", comparison),\n        Err(error) =&gt; println!(\\\"\u6bd4\u8f03\u30a8\u30e9\u30fc: {}\\\", error),\n    }\n\n    // \u30af\u30e9\u30b9\u7d71\u8a08\n    match manager.get_class_statistics() {\n        Ok(stats) =&gt; println!(\\\"{}\\\", stats),\n        Err(error) =&gt; println!(\\\"\u7d71\u8a08\u30a8\u30e9\u30fc: {}\\\", error),\n    }\n\n    // \u30a8\u30e9\u30fc\u30b1\u30fc\u30b9\u306e\u30c6\u30b9\u30c8\n    match manager.get_student_report(\\\"\u5b58\u5728\u3057\u306a\u3044\u5b66\u751f\\\") {\n        Ok(report) =&gt; println!(\\\"{}\\\", report),\n        Err(error) =&gt; println!(\\\"\u4e88\u671f\u3055\u308c\u305f\u30a8\u30e9\u30fc: {}\\\", error),\n    }\n\n    // \u7121\u52b9\u306a\u6210\u7e3e\u306e\u8ffd\u52a0\u30c6\u30b9\u30c8\n    match manager.add_grade(\\\"\u4e94\u6761\u609f\\\", \\\"\u65b0\u79d1\u76ee\\\".to_string(), 150) {\n        Ok(_) =&gt; println!(\\\"\u6210\u7e3e\u8ffd\u52a0\u6210\u529f\\\"),\n        Err(error) =&gt; println!(\\\"\u4e88\u671f\u3055\u308c\u305f\u30a8\u30e9\u30fc: {}\\\", error),\n    }\n}\n</code></pre>"},{"location":"chapter03/result/#_4","title":"\u307e\u3068\u3081","text":"<p>Result\u578b\u306e\u529b\u306f\u30de\u30b9\u30bf\u30fc\u3067\u304d\u305f\u304b\uff1f\u91cd\u8981\u306a\u30dd\u30a4\u30f3\u30c8\uff1a</p> <ol> <li>\u578b\u5b89\u5168\u306a\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0 - \u4f8b\u5916\u3067\u306f\u306a\u304f\u5024\u3068\u3057\u3066\u6271\u3046</li> <li>\u660e\u793a\u7684\u306a\u51e6\u7406 - \u3059\u3079\u3066\u306e\u30a8\u30e9\u30fc\u304c\u578b\u3067\u8868\u73fe\u3055\u308c\u308b</li> <li>?\u6f14\u7b97\u5b50 - \u30a8\u30e9\u30fc\u306e\u512a\u96c5\u306a\u4f1d\u64ad</li> <li>\u95a2\u6570\u578b\u30e1\u30bd\u30c3\u30c9 - map\u3001and_then\u3001map_err\u306a\u3069</li> <li>\u5408\u6210\u53ef\u80fd\u6027 - \u8907\u6570\u306e\u64cd\u4f5c\u3092\u5b89\u5168\u306b\u30c1\u30a7\u30fc\u30f3</li> </ol> <p>\u3053\u308c\u306f\u4ffa\u306e\u53cd\u8ee2\u8853\u5f0f\u306e\u6975\u610f\u3060\u3002\u30a8\u30e9\u30fc\u3068\u3044\u3046\u4e00\u898b\u30cd\u30ac\u30c6\u30a3\u30d6\u306a\u72b6\u6cc1\u3092\u3001\u578b\u5b89\u5168\u3068\u3044\u3046\u7d76\u5bfe\u7684\u306a\u529b\u306b\u5909\u63db\u3059\u308b\u3002</p> <p>\u6b21\u306f\u3088\u308a\u9ad8\u5ea6\u306a\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u5b66\u307c\u3046\u3002\u8907\u6570\u306e\u30a8\u30e9\u30fc\u578b\u3092\u7d71\u5408\u3057\u3001\u3088\u308a\u5927\u898f\u6a21\u306a\u30b7\u30b9\u30c6\u30e0\u3067\u306e\u30a8\u30e9\u30fc\u7ba1\u7406\u3092\u7fd2\u5f97\u3059\u308b\u3002</p> <p>\u300cResult\u3092\u6975\u3081\u308c\u3070\u3001\u5931\u6557\u3059\u3089\u6210\u529f\u3078\u306e\u9053\u6a19\u3068\u306a\u308b\u300d</p>"},{"location":"chapter04/advanced_traits/","title":"\u9ad8\u5ea6\u306a\u30c8\u30ec\u30a4\u30c8 - \u9818\u57df\u5c55\u958b\u306e\u5965\u7fa9","text":""},{"location":"chapter04/advanced_traits/#-_1","title":"\u9ad8\u5ea6\u306a\u30c8\u30ec\u30a4\u30c8\u6280\u8853 - \u7121\u91cf\u7a7a\u51e6\u306e\u5b8c\u6210\u5f62","text":"<p>\u57fa\u672c\u7684\u306a\u30c8\u30ec\u30a4\u30c8\u3092\u7fd2\u5f97\u3057\u305f\u304c\u3001\u3053\u3053\u304b\u3089\u304c\u672c\u5f53\u306e\u529b\u3060\u3002\u9ad8\u5ea6\u306a\u30c8\u30ec\u30a4\u30c8\u6280\u8853\u306f\u4ffa\u306e\u9818\u57df\u5c55\u958b\u300c\u7121\u91cf\u7a7a\u51e6\u300d\u306e\u5b8c\u6210\u5f62\u306e\u3088\u3046\u306b\u3001\u6982\u5ff5\u305d\u306e\u3082\u306e\u3092\u64cd\u4f5c\u3059\u308b\u7a76\u6975\u306e\u62bd\u8c61\u5316\u6280\u8853\u3060\u3002</p> <p>\u8907\u6570\u306e\u30c8\u30ec\u30a4\u30c8\u306e\u7d44\u307f\u5408\u308f\u305b\u3001\u52d5\u7684\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u3001\u30c8\u30ec\u30a4\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3001\u305d\u3057\u3066\u9ad8\u968e\u30c8\u30ec\u30a4\u30c8\u5883\u754c\u3002\u3053\u308c\u3089\u3092\u7fd2\u5f97\u3059\u308c\u3070\u3001Rust\u306e\u771f\u306e\u529b\u3092\u5f15\u304d\u51fa\u305b\u308b\u3002</p> <p>\u4e94\u6761\u5148\u751f\u306e\u89e3\u8aac</p> <p>\u9ad8\u5ea6\u306a\u30c8\u30ec\u30a4\u30c8\u6280\u8853\u3067\u306f\u3001\u578b\u30b7\u30b9\u30c6\u30e0\u306e\u9650\u754c\u3092\u62bc\u3057\u5e83\u3052\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u3068\u30e9\u30f3\u30bf\u30a4\u30e0\u306e\u4e21\u65b9\u3067\u67d4\u8edf\u6027\u3092\u7372\u5f97\u3059\u308b\u3002 \u307e\u3055\u306b\u7121\u9650\u306e\u53ef\u80fd\u6027\u3092\u79d8\u3081\u305f\u9818\u57df\u3060\u3002</p>"},{"location":"chapter04/advanced_traits/#hrtb","title":"\u9ad8\u968e\u30c8\u30ec\u30a4\u30c8\u5883\u754c\uff08HRTB\uff09","text":""},{"location":"chapter04/advanced_traits/#_1","title":"\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u3092\u6301\u3064\u30af\u30ed\u30fc\u30b8\u30e3","text":"<pre><code>// \u9ad8\u968e\u30c8\u30ec\u30a4\u30c8\u5883\u754c\u306e\u4f8b\nfn apply_to_all&lt;F&gt;(texts: &amp;[&amp;str], func: F) -&gt; Vec&lt;String&gt;\nwhere\n    F: for&lt;'a&gt; Fn(&amp;'a str) -&gt; String,  // \u3042\u3089\u3086\u308b\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u3067\u52d5\u4f5c\n{\n    texts.iter().map(|&amp;text| func(text)).collect()\n}\n\nfn process_sorcerer_names() {\n    let names = [\"\u4e94\u6761\u609f\", \"\u864e\u6756\u60a0\u4ec1\", \"\u4f0f\u9ed2\u6075\"];\n\n    // \u3059\u3079\u3066\u306e\u540d\u524d\u306b\u656c\u79f0\u3092\u4ed8\u3051\u308b\n    let processed = apply_to_all(&amp;names, |name| {\n        format!(\"{}\u5148\u8f29\", name)\n    });\n\n    println!(\"\u51e6\u7406\u5f8c: {:?}\", processed);\n\n    // \u540d\u524d\u306e\u9577\u3055\u3092\u53d6\u5f97\n    let lengths = apply_to_all(&amp;names, |name| {\n        format!(\"{}\u6587\u5b57\", name.len())\n    });\n\n    println!(\"\u9577\u3055: {:?}\", lengths);\n}\n\nfn main() {\n    process_sorcerer_names();\n}\n</code></pre>"},{"location":"chapter04/advanced_traits/#_2","title":"\u8907\u96d1\u306a\u30af\u30ed\u30fc\u30b8\u30e3\u5236\u7d04","text":"<pre><code>use std::fmt::Display;\n\n// \u8907\u6570\u306e\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u3064\u9ad8\u968e\u5883\u754c\nfn complex_operation&lt;F, T&gt;(data: &amp;[T], processor: F) -&gt; Vec&lt;String&gt;\nwhere\n    F: for&lt;'a, 'b&gt; Fn(&amp;'a T, &amp;'b str) -&gt; String,\n    T: Display,\n{\n    let suffix = \"\u306e\u7d50\u679c\";\n    data.iter()\n        .map(|item| processor(item, suffix))\n        .collect()\n}\n\nfn main() {\n    let powers = [1000, 1500, 3000];\n\n    let results = complex_operation(&amp;powers, |power, suffix| {\n        format!(\"\u546a\u529b{}{}\", power, suffix)\n    });\n\n    println!(\"\u7d50\u679c: {:?}\", results);\n}\n</code></pre>"},{"location":"chapter04/advanced_traits/#_3","title":"\u52d5\u7684\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u3068\u30c8\u30ec\u30a4\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8","text":""},{"location":"chapter04/advanced_traits/#_4","title":"\u57fa\u672c\u7684\u306a\u30c8\u30ec\u30a4\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8","text":"<pre><code>trait Technique {\n    fn name(&amp;self) -&gt; &amp;str;\n    fn cast(&amp;self, power: i32) -&gt; String;\n    fn required_power(&amp;self) -&gt; i32;\n}\n\nstruct Limitless {\n    variant: String,\n    base_power: i32,\n}\n\nimpl Limitless {\n    fn new(variant: &amp;str, base_power: i32) -&gt; Self {\n        Limitless {\n            variant: variant.to_string(),\n            base_power,\n        }\n    }\n}\n\nimpl Technique for Limitless {\n    fn name(&amp;self) -&gt; &amp;str {\n        &amp;self.variant\n    }\n\n    fn cast(&amp;self, power: i32) -&gt; String {\n        if power &gt;= self.required_power() {\n            format!(\"\u7121\u4e0b\u9650\u8853\u5f0f\u300e{}\u300f\u767a\u52d5\uff01\u7a7a\u9593\u3092\u64cd\u4f5c\u3057\u305f\u3002\", self.variant)\n        } else {\n            format!(\"\u546a\u529b\u4e0d\u8db3\u3067{}\u306e\u767a\u52d5\u306b\u5931\u6557\", self.variant)\n        }\n    }\n\n    fn required_power(&amp;self) -&gt; i32 {\n        self.base_power\n    }\n}\n\nstruct BlackFlash {\n    combo_count: u32,\n}\n\nimpl BlackFlash {\n    fn new() -&gt; Self {\n        BlackFlash { combo_count: 0 }\n    }\n}\n\nimpl Technique for BlackFlash {\n    fn name(&amp;self) -&gt; &amp;str {\n        \"\u9ed2\u9583\"\n    }\n\n    fn cast(&amp;self, power: i32) -&gt; String {\n        if power &gt;= self.required_power() {\n            let multiplier = 1.0 + (self.combo_count as f64 * 0.2);\n            let damage = (power as f64 * multiplier) as i32;\n            format!(\"\u9ed2\u9583\u767a\u52d5\uff01{} \u30b3\u30f3\u30dc\u3067 {} \u30c0\u30e1\u30fc\u30b8\uff01\", self.combo_count + 1, damage)\n        } else {\n            \"\u9ed2\u9583\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u304c\u5408\u308f\u306a\u3044\".to_string()\n        }\n    }\n\n    fn required_power(&amp;self) -&gt; i32 {\n        800\n    }\n}\n\n// \u30c8\u30ec\u30a4\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f7f\u3063\u305f\u6226\u95d8\u30b7\u30b9\u30c6\u30e0\nstruct CombatSystem {\n    techniques: Vec&lt;Box&lt;dyn Technique&gt;&gt;,\n}\n\nimpl CombatSystem {\n    fn new() -&gt; Self {\n        CombatSystem {\n            techniques: Vec::new(),\n        }\n    }\n\n    fn add_technique(&amp;mut self, technique: Box&lt;dyn Technique&gt;) {\n        self.techniques.push(technique);\n    }\n\n    fn execute_combo(&amp;self, available_power: i32) -&gt; Vec&lt;String&gt; {\n        let mut results = Vec::new();\n        let mut remaining_power = available_power;\n\n        println!(\"=== \u30b3\u30f3\u30dc\u653b\u6483\u958b\u59cb\uff08\u4f7f\u7528\u53ef\u80fd\u546a\u529b: {}\uff09===\", available_power);\n\n        for technique in &amp;self.techniques {\n            if remaining_power &gt;= technique.required_power() {\n                let result = technique.cast(remaining_power);\n                remaining_power -= technique.required_power();\n                results.push(format!(\"\u2713 {}: {}\", technique.name(), result));\n            } else {\n                results.push(format!(\"\u2717 {}: \u546a\u529b\u4e0d\u8db3\uff08\u5fc5\u8981: {}, \u6b8b\u308a: {}\uff09\",\n                           technique.name(), technique.required_power(), remaining_power));\n            }\n        }\n\n        results.push(format!(\"\u6b8b\u308a\u546a\u529b: {}\", remaining_power));\n        results\n    }\n\n    fn list_techniques(&amp;self) -&gt; Vec&lt;String&gt; {\n        self.techniques.iter()\n            .map(|t| format!(\"{} (\u5fc5\u8981\u546a\u529b: {})\", t.name(), t.required_power()))\n            .collect()\n    }\n}\n\nfn main() {\n    let mut combat = CombatSystem::new();\n\n    // \u69d8\u3005\u306a\u8853\u5f0f\u3092\u8ffd\u52a0\n    combat.add_technique(Box::new(Limitless::new(\"\u84bc\", 500)));\n    combat.add_technique(Box::new(BlackFlash::new()));\n    combat.add_technique(Box::new(Limitless::new(\"\u8d6b\", 800)));\n    combat.add_technique(Box::new(Limitless::new(\"\u8308\", 1500)));\n\n    println!(\"\u767b\u9332\u3055\u308c\u305f\u8853\u5f0f:\");\n    for technique in combat.list_techniques() {\n        println!(\"  {}\", technique);\n    }\n\n    println!();\n\n    // \u30b3\u30f3\u30dc\u5b9f\u884c\n    let results = combat.execute_combo(2500);\n    for result in results {\n        println!(\"{}\", result);\n    }\n}\n</code></pre>"},{"location":"chapter04/advanced_traits/#_5","title":"\u3088\u308a\u8907\u96d1\u306a\u30c8\u30ec\u30a4\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8","text":"<pre><code>use std::any::Any;\n\n// \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30bb\u30fc\u30d5\u306a\u30c8\u30ec\u30a4\u30c8\ntrait Entity: std::fmt::Debug {\n    fn name(&amp;self) -&gt; &amp;str;\n    fn entity_type(&amp;self) -&gt; &amp;str;\n    fn power_level(&amp;self) -&gt; i32;\n\n    // \u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u7528\n    fn as_any(&amp;self) -&gt; &amp;dyn Any;\n}\n\ntrait Combatant: Entity {\n    fn attack(&amp;self, target: &amp;mut dyn Entity) -&gt; String;\n    fn take_damage(&amp;mut self, damage: i32);\n    fn is_alive(&amp;self) -&gt; bool;\n}\n\n#[derive(Debug)]\nstruct Sorcerer {\n    name: String,\n    power: i32,\n    health: i32,\n    max_health: i32,\n}\n\nimpl Sorcerer {\n    fn new(name: &amp;str, power: i32, health: i32) -&gt; Self {\n        Sorcerer {\n            name: name.to_string(),\n            power,\n            health,\n            max_health: health,\n        }\n    }\n\n    fn heal(&amp;mut self, amount: i32) {\n        self.health = (self.health + amount).min(self.max_health);\n    }\n}\n\nimpl Entity for Sorcerer {\n    fn name(&amp;self) -&gt; &amp;str {\n        &amp;self.name\n    }\n\n    fn entity_type(&amp;self) -&gt; &amp;str {\n        \"\u546a\u8853\u5e2b\"\n    }\n\n    fn power_level(&amp;self) -&gt; i32 {\n        self.power\n    }\n\n    fn as_any(&amp;self) -&gt; &amp;dyn Any {\n        self\n    }\n}\n\nimpl Combatant for Sorcerer {\n    fn attack(&amp;self, target: &amp;mut dyn Entity) -&gt; String {\n        let damage = self.power / 10;\n\n        // \u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u7279\u6b8a\u51e6\u7406\n        if let Some(target_sorcerer) = target.as_any().downcast_ref::&lt;Sorcerer&gt;() {\n            if target_sorcerer.name.contains(\"\u4e94\u6761\") {\n                return format!(\"{}\u306e\u653b\u6483\u306f{}\u306b\u3088\u3063\u3066\u7121\u52b9\u5316\u3055\u308c\u305f\", self.name, target.name());\n            }\n        }\n\n        if let Some(target_combatant) = (target as &amp;mut dyn Any).downcast_mut::&lt;Sorcerer&gt;() {\n            target_combatant.take_damage(damage);\n            format!(\"{}\u304c{}\u3092\u653b\u6483\uff01{}\u30c0\u30e1\u30fc\u30b8\", self.name, target.name(), damage)\n        } else {\n            format!(\"{}\u306e\u653b\u6483\u304c\u5931\u6557\", self.name)\n        }\n    }\n\n    fn take_damage(&amp;mut self, damage: i32) {\n        self.health = (self.health - damage).max(0);\n    }\n\n    fn is_alive(&amp;self) -&gt; bool {\n        self.health &gt; 0\n    }\n}\n\n#[derive(Debug)]\nstruct Curse {\n    grade: String,\n    power: i32,\n    health: i32,\n}\n\nimpl Curse {\n    fn new(grade: &amp;str, power: i32, health: i32) -&gt; Self {\n        Curse {\n            grade: grade.to_string(),\n            power,\n            health,\n        }\n    }\n}\n\nimpl Entity for Curse {\n    fn name(&amp;self) -&gt; &amp;str {\n        &amp;self.grade\n    }\n\n    fn entity_type(&amp;self) -&gt; &amp;str {\n        \"\u546a\u970a\"\n    }\n\n    fn power_level(&amp;self) -&gt; i32 {\n        self.power\n    }\n\n    fn as_any(&amp;self) -&gt; &amp;dyn Any {\n        self\n    }\n}\n\nimpl Combatant for Curse {\n    fn attack(&amp;self, target: &amp;mut dyn Entity) -&gt; String {\n        let damage = self.power / 8;  // \u546a\u970a\u306f\u5c11\u3057\u5f37\u3044\n\n        if let Some(target_combatant) = (target as &amp;mut dyn Any).downcast_mut::&lt;Sorcerer&gt;() {\n            target_combatant.take_damage(damage);\n            format!(\"{}\u7d1a\u546a\u970a\u304c{}\u3092\u653b\u6483\uff01{}\u30c0\u30e1\u30fc\u30b8\", self.grade, target.name(), damage)\n        } else {\n            format!(\"{}\u7d1a\u546a\u970a\u306e\u653b\u6483\u304c\u5931\u6557\", self.grade)\n        }\n    }\n\n    fn take_damage(&amp;mut self, damage: i32) {\n        self.health = (self.health - damage).max(0);\n    }\n\n    fn is_alive(&amp;self) -&gt; bool {\n        self.health &gt; 0\n    }\n}\n\n// \u6226\u95d8\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0\nstruct BattleArena {\n    combatants: Vec&lt;Box&lt;dyn Combatant&gt;&gt;,\n}\n\nimpl BattleArena {\n    fn new() -&gt; Self {\n        BattleArena {\n            combatants: Vec::new(),\n        }\n    }\n\n    fn add_combatant(&amp;mut self, combatant: Box&lt;dyn Combatant&gt;) {\n        println!(\"{}\uff08{}\uff09\u304c\u6226\u5834\u306b\u53c2\u6226\uff01\", combatant.name(), combatant.entity_type());\n        self.combatants.push(combatant);\n    }\n\n    fn battle_royale(&amp;mut self) -&gt; String {\n        let mut round = 1;\n        let mut log = String::new();\n\n        log.push_str(\"=== \u30d0\u30c8\u30eb\u30ed\u30ef\u30a4\u30e4\u30eb\u958b\u59cb ===\\n\");\n\n        while self.alive_count() &gt; 1 &amp;&amp; round &lt;= 10 {\n            log.push_str(&amp;format!(\"\\n--- \u30e9\u30a6\u30f3\u30c9 {} ---\\n\", round));\n\n            let alive_indices: Vec&lt;usize&gt; = self.combatants.iter()\n                .enumerate()\n                .filter(|(_, c)| c.is_alive())\n                .map(|(i, _)| i)\n                .collect();\n\n            if alive_indices.len() &lt; 2 {\n                break;\n            }\n\n            // \u6700\u521d\u306e\u751f\u5b58\u8005\u304c\u6b21\u306e\u751f\u5b58\u8005\u3092\u653b\u6483\n            let attacker_idx = alive_indices[0];\n            let target_idx = alive_indices[1];\n\n            // \u501f\u7528\u306e\u554f\u984c\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u3001\u4e00\u6642\u7684\u306b\u53d6\u308a\u51fa\u3059\n            let attack_result = {\n                let attacker = &amp;self.combatants[attacker_idx];\n                let attacker_name = attacker.name().to_string();\n                let target_name = self.combatants[target_idx].name().to_string();\n\n                format!(\"{}\u304c{}\u3092\u653b\u6483\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b...\", attacker_name, target_name)\n            };\n\n            log.push_str(&amp;format!(\"{}\\n\", attack_result));\n\n            // \u5b9f\u969b\u306e\u653b\u6483\u306f\u7c21\u6613\u7684\u306b\u30c0\u30e1\u30fc\u30b8\u8a08\u7b97\n            let damage = self.combatants[attacker_idx].power_level() / 10;\n\n            if let Some(target) = self.combatants.get_mut(target_idx) {\n                target.take_damage(damage);\n                log.push_str(&amp;format!(\"{}\u30c0\u30e1\u30fc\u30b8\uff01\\n\", damage));\n\n                if !target.is_alive() {\n                    log.push_str(&amp;format!(\"{}\u304c\u5012\u308c\u305f\uff01\\n\", target.name()));\n                }\n            }\n\n            round += 1;\n        }\n\n        // \u52dd\u8005\u306e\u767a\u8868\n        let winners: Vec&lt;&amp;Box&lt;dyn Combatant&gt;&gt; = self.combatants.iter()\n            .filter(|c| c.is_alive())\n            .collect();\n\n        if winners.len() == 1 {\n            log.push_str(&amp;format!(\"\\n\u52dd\u8005: {}\uff01\\n\", winners[0].name()));\n        } else if winners.len() &gt; 1 {\n            log.push_str(\"\\n\u8907\u6570\u306e\u751f\u5b58\u8005\u3042\u308a\uff1a\\n\");\n            for winner in winners {\n                log.push_str(&amp;format!(\"  {}\\n\", winner.name()));\n            }\n        } else {\n            log.push_str(\"\\n\u5168\u54e1\u5012\u308c\u305f...\\n\");\n        }\n\n        log\n    }\n\n    fn alive_count(&amp;self) -&gt; usize {\n        self.combatants.iter().filter(|c| c.is_alive()).count()\n    }\n\n    fn status_report(&amp;self) -&gt; String {\n        let mut report = String::from(\"=== \u6226\u5834\u72b6\u6cc1 ===\\n\");\n\n        for combatant in &amp;self.combatants {\n            let status = if combatant.is_alive() { \"\u751f\u5b58\" } else { \"\u6226\u95d8\u4e0d\u80fd\" };\n            report.push_str(&amp;format!(\"{} ({}): {}\\n\",\n                           combatant.name(), combatant.entity_type(), status));\n        }\n\n        report\n    }\n}\n\nfn main() {\n    let mut arena = BattleArena::new();\n\n    // \u53c2\u6226\u8005\u8ffd\u52a0\n    arena.add_combatant(Box::new(Sorcerer::new(\"\u4e94\u6761\u609f\", 3000, 2000)));\n    arena.add_combatant(Box::new(Sorcerer::new(\"\u864e\u6756\u60a0\u4ec1\", 1200, 1500)));\n    arena.add_combatant(Box::new(Curse::new(\"\u7279\u7d1a\", 2000, 1800)));\n    arena.add_combatant(Box::new(Curse::new(\"1\u7d1a\", 800, 1000)));\n\n    println!(\"{}\", arena.status_report());\n\n    // \u30d0\u30c8\u30eb\u958b\u59cb\n    let battle_log = arena.battle_royale();\n    println!(\"{}\", battle_log);\n\n    println!(\"{}\", arena.status_report());\n}\n</code></pre>"},{"location":"chapter04/advanced_traits/#_6","title":"\u95a2\u9023\u578b\u3068\u578b\u65cf","text":""},{"location":"chapter04/advanced_traits/#_7","title":"\u8907\u96d1\u306a\u95a2\u9023\u578b\u306e\u4f7f\u7528","text":"<pre><code>trait Iterator {\n    type Item;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt;;\n\n    // \u30c7\u30d5\u30a9\u30eb\u30c8\u5b9f\u88c5\n    fn collect&lt;B: FromIterator&lt;Self::Item&gt;&gt;(self) -&gt; B\n    where\n        Self: Sized,\n    {\n        FromIterator::from_iter(self)\n    }\n}\n\ntrait FromIterator&lt;T&gt; {\n    fn from_iter&lt;I: Iterator&lt;Item = T&gt;&gt;(iter: I) -&gt; Self;\n}\n\n// \u30ab\u30b9\u30bf\u30e0\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u5b9f\u88c5\nstruct PowerSequence {\n    current: i32,\n    max: i32,\n    step: i32,\n}\n\nimpl PowerSequence {\n    fn new(start: i32, max: i32, step: i32) -&gt; Self {\n        PowerSequence {\n            current: start,\n            max,\n            step,\n        }\n    }\n}\n\nimpl Iterator for PowerSequence {\n    type Item = i32;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        if self.current &lt;= self.max {\n            let current = self.current;\n            self.current += self.step;\n            Some(current)\n        } else {\n            None\n        }\n    }\n}\n\n// \u8907\u96d1\u306a\u95a2\u9023\u578b\u306e\u4f8b\ntrait TechniqueSystem {\n    type TechniqueId;\n    type Result;\n    type Error;\n\n    fn register_technique(&amp;mut self, id: Self::TechniqueId, name: String) -&gt; Result&lt;(), Self::Error&gt;;\n    fn execute_technique(&amp;self, id: &amp;Self::TechniqueId, power: i32) -&gt; Result&lt;Self::Result, Self::Error&gt;;\n    fn list_techniques(&amp;self) -&gt; Vec&lt;(Self::TechniqueId, String)&gt;\n    where\n        Self::TechniqueId: Clone;\n}\n\n#[derive(Debug, Clone, PartialEq, Eq, Hash)]\nstruct TechniqueId(u32);\n\n#[derive(Debug)]\nenum SystemError {\n    TechniqueNotFound,\n    InsufficientPower,\n    SystemFailure(String),\n}\n\nstruct SorcererTechniqueSystem {\n    techniques: std::collections::HashMap&lt;TechniqueId, (String, i32)&gt;, // (\u540d\u524d, \u5fc5\u8981\u546a\u529b)\n    next_id: u32,\n}\n\nimpl SorcererTechniqueSystem {\n    fn new() -&gt; Self {\n        SorcererTechniqueSystem {\n            techniques: std::collections::HashMap::new(),\n            next_id: 1,\n        }\n    }\n}\n\nimpl TechniqueSystem for SorcererTechniqueSystem {\n    type TechniqueId = TechniqueId;\n    type Result = String;\n    type Error = SystemError;\n\n    fn register_technique(&amp;mut self, id: Self::TechniqueId, name: String) -&gt; Result&lt;(), Self::Error&gt; {\n        let required_power = match name.as_str() {\n            n if n.contains(\"\u84bc\") =&gt; 500,\n            n if n.contains(\"\u8d6b\") =&gt; 800,\n            n if n.contains(\"\u8308\") =&gt; 1500,\n            n if n.contains(\"\u7d2b\") =&gt; 3000,\n            _ =&gt; 300,\n        };\n\n        self.techniques.insert(id, (name, required_power));\n        Ok(())\n    }\n\n    fn execute_technique(&amp;self, id: &amp;Self::TechniqueId, power: i32) -&gt; Result&lt;Self::Result, Self::Error&gt; {\n        match self.techniques.get(id) {\n            Some((name, required_power)) =&gt; {\n                if power &gt;= *required_power {\n                    Ok(format!(\"{}\u3092\u767a\u52d5\uff01\u5a01\u529b: {}\", name, power))\n                } else {\n                    Err(SystemError::InsufficientPower)\n                }\n            },\n            None =&gt; Err(SystemError::TechniqueNotFound),\n        }\n    }\n\n    fn list_techniques(&amp;self) -&gt; Vec&lt;(Self::TechniqueId, String)&gt; {\n        self.techniques.iter()\n            .map(|(id, (name, _))| (id.clone(), name.clone()))\n            .collect()\n    }\n}\n\nfn main() {\n    println!(\"=== \u95a2\u9023\u578b\u30b7\u30b9\u30c6\u30e0\u30c7\u30e2 ===\");\n\n    // \u30ab\u30b9\u30bf\u30e0\u30a4\u30c6\u30ec\u30fc\u30bf\n    let power_sequence = PowerSequence::new(100, 1000, 200);\n    let powers: Vec&lt;i32&gt; = power_sequence.collect();\n    println!(\"\u546a\u529b\u30b7\u30fc\u30b1\u30f3\u30b9: {:?}\", powers);\n\n    // \u8853\u5f0f\u30b7\u30b9\u30c6\u30e0\n    let mut system = SorcererTechniqueSystem::new();\n\n    let blue_id = TechniqueId(1);\n    let red_id = TechniqueId(2);\n    let hollow_id = TechniqueId(3);\n\n    system.register_technique(blue_id.clone(), \"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\".to_string()).unwrap();\n    system.register_technique(red_id.clone(), \"\u8853\u5f0f\u53cd\u8ee2\u300e\u8d6b\u300f\".to_string()).unwrap();\n    system.register_technique(hollow_id.clone(), \"\u865a\u5f0f\u300e\u8308\u300f\".to_string()).unwrap();\n\n    println!(\"\\n\u767b\u9332\u3055\u308c\u305f\u8853\u5f0f:\");\n    for (id, name) in system.list_techniques() {\n        println!(\"  ID {:?}: {}\", id, name);\n    }\n\n    println!(\"\\n\u8853\u5f0f\u5b9f\u884c\u30c6\u30b9\u30c8:\");\n    match system.execute_technique(&amp;blue_id, 600) {\n        Ok(result) =&gt; println!(\"\u2713 {}\", result),\n        Err(e) =&gt; println!(\"\u2717 {:?}\", e),\n    }\n\n    match system.execute_technique(&amp;hollow_id, 1000) {\n        Ok(result) =&gt; println!(\"\u2713 {}\", result),\n        Err(e) =&gt; println!(\"\u2717 {:?}\", e),\n    }\n}\n</code></pre>"},{"location":"chapter04/advanced_traits/#_8","title":"\u30de\u30fc\u30ab\u30fc\u30c8\u30ec\u30a4\u30c8","text":""},{"location":"chapter04/advanced_traits/#_9","title":"\u578b\u306e\u6027\u8cea\u3092\u8868\u3059\u30de\u30fc\u30ab\u30fc","text":"<pre><code>// \u5b89\u5168\u6027\u3092\u8868\u3059\u30de\u30fc\u30ab\u30fc\u30c8\u30ec\u30a4\u30c8\ntrait Safe {}\ntrait Dangerous {}\n\n// \u5a01\u529b\u30ec\u30d9\u30eb\u3092\u8868\u3059\u30de\u30fc\u30ab\u30fc\ntrait LowPower {}\ntrait HighPower {}\n\nstruct BasicTechnique {\n    name: String,\n    power: i32,\n}\n\nstruct AdvancedTechnique {\n    name: String,\n    power: i32,\n    side_effects: Vec&lt;String&gt;,\n}\n\nimpl BasicTechnique {\n    fn new(name: &amp;str, power: i32) -&gt; Self {\n        BasicTechnique {\n            name: name.to_string(),\n            power,\n        }\n    }\n}\n\nimpl AdvancedTechnique {\n    fn new(name: &amp;str, power: i32, side_effects: Vec&lt;String&gt;) -&gt; Self {\n        AdvancedTechnique {\n            name: name.to_string(),\n            power,\n            side_effects,\n        }\n    }\n}\n\n// \u30de\u30fc\u30ab\u30fc\u30c8\u30ec\u30a4\u30c8\u306e\u5b9f\u88c5\nimpl Safe for BasicTechnique {}\nimpl LowPower for BasicTechnique {}\n\nimpl Dangerous for AdvancedTechnique {}\nimpl HighPower for AdvancedTechnique {}\n\n// \u30de\u30fc\u30ab\u30fc\u30c8\u30ec\u30a4\u30c8\u3092\u4f7f\u3063\u305f\u578b\u5236\u7d04\nfn safe_training&lt;T: Safe&gt;(technique: &amp;T) -&gt; String {\n    \"\u5b89\u5168\u306a\u8a13\u7df4\u3092\u5b9f\u65bd\".to_string()\n}\n\nfn dangerous_training&lt;T: Dangerous&gt;(technique: &amp;T) -&gt; String {\n    \"\u26a0\ufe0f \u5371\u967a\u306a\u8a13\u7df4 - \u7d30\u5fc3\u306e\u6ce8\u610f\u304c\u5fc5\u8981\".to_string()\n}\n\nfn low_power_practice&lt;T: LowPower&gt;(technique: &amp;T) -&gt; String {\n    \"\u4f4e\u5a01\u529b\u7df4\u7fd2 - \u521d\u5fc3\u8005\u5411\u3051\".to_string()\n}\n\nfn high_power_practice&lt;T: HighPower&gt;(technique: &amp;T) -&gt; String {\n    \"\u9ad8\u5a01\u529b\u7df4\u7fd2 - \u4e0a\u7d1a\u8005\u5c02\u7528\".to_string()\n}\n\n// \u8907\u6570\u306e\u30de\u30fc\u30ab\u30fc\u3092\u8981\u6c42\nfn specialized_training&lt;T&gt;(technique: &amp;T) -&gt; String\nwhere\n    T: Dangerous + HighPower,\n{\n    \"\u7279\u6b8a\u8a13\u7df4 - \u6700\u9ad8\u30ec\u30d9\u30eb\u306e\u6ce8\u610f\u304c\u5fc5\u8981\".to_string()\n}\n\nfn main() {\n    let basic = BasicTechnique::new(\"\u57fa\u672c\u8853\u5f0f\", 300);\n    let advanced = AdvancedTechnique::new(\"\u7981\u65ad\u306e\u8853\u5f0f\", 2000, vec![\"\u546a\u529b\u6d88\u8017\".to_string()]);\n\n    println!(\"{}\", safe_training(&amp;basic));\n    println!(\"{}\", low_power_practice(&amp;basic));\n\n    println!(\"{}\", dangerous_training(&amp;advanced));\n    println!(\"{}\", high_power_practice(&amp;advanced));\n    println!(\"{}\", specialized_training(&amp;advanced));\n\n    // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308b\u4f8b\uff08\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\uff09\n    // println!(\"{}\", dangerous_training(&amp;basic));  // Basic\u306fDangerous\u3067\u306f\u306a\u3044\n    // println!(\"{}\", safe_training(&amp;advanced));    // Advanced\u306fSafe\u3067\u306f\u306a\u3044\n}\n</code></pre>"},{"location":"chapter04/advanced_traits/#_10","title":"\u578b\u30ec\u30d9\u30eb\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0","text":""},{"location":"chapter04/advanced_traits/#phantom-types","title":"\u5e7d\u970a\u578b\uff08Phantom Types\uff09","text":"<pre><code>use std::marker::PhantomData;\n\n// \u72b6\u614b\u3092\u578b\u3067\u8868\u73fe\nstruct Sealed;\nstruct Unsealed;\n\nstruct Prepared;\nstruct Unprepared;\n\n// \u5e7d\u970a\u578b\u3092\u4f7f\u3063\u305f\u8853\u5f0f\u72b6\u614b\u7ba1\u7406\nstruct Technique&lt;State, Preparation&gt; {\n    name: String,\n    power: i32,\n    _state: PhantomData&lt;State&gt;,\n    _preparation: PhantomData&lt;Preparation&gt;,\n}\n\nimpl&lt;State, Preparation&gt; Technique&lt;State, Preparation&gt; {\n    fn name(&amp;self) -&gt; &amp;str {\n        &amp;self.name\n    }\n\n    fn power(&amp;self) -&gt; i32 {\n        self.power\n    }\n}\n\nimpl Technique&lt;Unsealed, Unprepared&gt; {\n    fn new(name: &amp;str, power: i32) -&gt; Self {\n        Technique {\n            name: name.to_string(),\n            power,\n            _state: PhantomData,\n            _preparation: PhantomData,\n        }\n    }\n\n    fn prepare(self) -&gt; Technique&lt;Unsealed, Prepared&gt; {\n        Technique {\n            name: self.name,\n            power: self.power,\n            _state: PhantomData,\n            _preparation: PhantomData,\n        }\n    }\n}\n\nimpl Technique&lt;Unsealed, Prepared&gt; {\n    fn seal(self) -&gt; Technique&lt;Sealed, Prepared&gt; {\n        Technique {\n            name: self.name,\n            power: self.power * 2,  // \u5c01\u5370\u306b\u3088\u308a\u5a01\u529b\u30a2\u30c3\u30d7\n            _state: PhantomData,\n            _preparation: PhantomData,\n        }\n    }\n\n    fn cast(self) -&gt; String {\n        format!(\"{}\u3092\u767a\u52d5\uff01\u5a01\u529b: {}\", self.name, self.power)\n    }\n}\n\nimpl Technique&lt;Sealed, Prepared&gt; {\n    fn unseal(self) -&gt; Technique&lt;Unsealed, Prepared&gt; {\n        Technique {\n            name: self.name,\n            power: self.power / 2,  // \u5c01\u5370\u89e3\u9664\u3067\u5143\u306e\u5a01\u529b\u306b\n            _state: PhantomData,\n            _preparation: PhantomData,\n        }\n    }\n\n    fn forbidden_cast(self) -&gt; String {\n        format!(\"\u5c01\u5370\u3055\u308c\u305f{}\u3092\u5f37\u5236\u767a\u52d5\uff01\u5a01\u529b: {} (\u5371\u967a)\", self.name, self.power)\n    }\n}\n\n// \u578b\u5b89\u5168\u306a\u8853\u5f0f\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0\nstruct TechniqueInventory {\n    unprepared: Vec&lt;Technique&lt;Unsealed, Unprepared&gt;&gt;,\n    prepared: Vec&lt;Technique&lt;Unsealed, Prepared&gt;&gt;,\n    sealed: Vec&lt;Technique&lt;Sealed, Prepared&gt;&gt;,\n}\n\nimpl TechniqueInventory {\n    fn new() -&gt; Self {\n        TechniqueInventory {\n            unprepared: Vec::new(),\n            prepared: Vec::new(),\n            sealed: Vec::new(),\n        }\n    }\n\n    fn add_technique(&amp;mut self, name: &amp;str, power: i32) {\n        let technique = Technique::new(name, power);\n        self.unprepared.push(technique);\n    }\n\n    fn prepare_technique(&amp;mut self, index: usize) -&gt; Option&lt;()&gt; {\n        if index &lt; self.unprepared.len() {\n            let technique = self.unprepared.remove(index);\n            self.prepared.push(technique.prepare());\n            Some(())\n        } else {\n            None\n        }\n    }\n\n    fn seal_technique(&amp;mut self, index: usize) -&gt; Option&lt;()&gt; {\n        if index &lt; self.prepared.len() {\n            let technique = self.prepared.remove(index);\n            self.sealed.push(technique.seal());\n            Some(())\n        } else {\n            None\n        }\n    }\n\n    fn cast_prepared(&amp;mut self, index: usize) -&gt; Option&lt;String&gt; {\n        if index &lt; self.prepared.len() {\n            let technique = self.prepared.remove(index);\n            Some(technique.cast())\n        } else {\n            None\n        }\n    }\n\n    fn cast_sealed(&amp;mut self, index: usize) -&gt; Option&lt;String&gt; {\n        if index &lt; self.sealed.len() {\n            let technique = self.sealed.remove(index);\n            Some(technique.forbidden_cast())\n        } else {\n            None\n        }\n    }\n\n    fn status(&amp;self) -&gt; String {\n        format!(\n            \"\u672a\u6e96\u5099: {}\u500b, \u6e96\u5099\u6e08\u307f: {}\u500b, \u5c01\u5370\u6e08\u307f: {}\u500b\",\n            self.unprepared.len(),\n            self.prepared.len(),\n            self.sealed.len()\n        )\n    }\n}\n\nfn main() {\n    println!(\"=== \u578b\u5b89\u5168\u306a\u8853\u5f0f\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0 ===\");\n\n    let mut inventory = TechniqueInventory::new();\n\n    // \u8853\u5f0f\u3092\u8ffd\u52a0\n    inventory.add_technique(\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\", 1000);\n    inventory.add_technique(\"\u8853\u5f0f\u53cd\u8ee2\u300e\u8d6b\u300f\", 1500);\n    inventory.add_technique(\"\u865a\u5f0f\u300e\u8308\u300f\", 3000);\n\n    println!(\"\u521d\u671f\u72b6\u614b: {}\", inventory.status());\n\n    // \u6bb5\u968e\u7684\u306b\u51e6\u7406\n    inventory.prepare_technique(0).unwrap();\n    inventory.prepare_technique(0).unwrap();  // \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u5909\u308f\u308b\u3053\u3068\u306b\u6ce8\u610f\n    inventory.prepare_technique(0).unwrap();\n\n    println!(\"\u6e96\u5099\u5f8c: {}\", inventory.status());\n\n    // \u4e00\u3064\u3092\u5c01\u5370\n    inventory.seal_technique(2).unwrap();  // \u8308\u3092\u5c01\u5370\n\n    println!(\"\u5c01\u5370\u5f8c: {}\", inventory.status());\n\n    // \u8853\u5f0f\u767a\u52d5\n    if let Some(result) = inventory.cast_prepared(0) {\n        println!(\"\u901a\u5e38\u767a\u52d5: {}\", result);\n    }\n\n    if let Some(result) = inventory.cast_sealed(0) {\n        println!(\"\u5c01\u5370\u767a\u52d5: {}\", result);\n    }\n\n    println!(\"\u6700\u7d42\u72b6\u614b: {}\", inventory.status());\n}\n</code></pre>"},{"location":"chapter04/advanced_traits/#_11","title":"\u307e\u3068\u3081","text":"<p>\u9ad8\u5ea6\u306a\u30c8\u30ec\u30a4\u30c8\u6280\u8853\u306e\u7fd2\u5f97\u306f\u5b8c\u4e86\u3060\uff01\u91cd\u8981\u306a\u30dd\u30a4\u30f3\u30c8\uff1a</p> <ol> <li>\u9ad8\u968e\u30c8\u30ec\u30a4\u30c8\u5883\u754c - \u3042\u3089\u3086\u308b\u30e9\u30a4\u30d5\u30bf\u30a4\u30e0\u3067\u52d5\u4f5c\u3059\u308b\u5236\u7d04</li> <li>\u52d5\u7684\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1 - \u30e9\u30f3\u30bf\u30a4\u30e0\u3067\u306e\u67d4\u8edf\u306a\u578b\u9078\u629e</li> <li>\u95a2\u9023\u578b - \u30c8\u30ec\u30a4\u30c8\u56fa\u6709\u306e\u578b\u5b9a\u7fa9</li> <li>\u30de\u30fc\u30ab\u30fc\u30c8\u30ec\u30a4\u30c8 - \u578b\u306e\u6027\u8cea\u3092\u8868\u73fe</li> <li>\u5e7d\u970a\u578b - \u578b\u30ec\u30d9\u30eb\u3067\u306e\u72b6\u614b\u7ba1\u7406</li> </ol> <p>\u3053\u308c\u3067\u9818\u57df\u5c55\u958b\u306e\u5965\u7fa9\u3092\u5b8c\u5168\u306b\u30de\u30b9\u30bf\u30fc\u3057\u305f\u3002\u578b\u30b7\u30b9\u30c6\u30e0\u3092\u81ea\u5728\u306b\u64cd\u308a\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u3068\u30e9\u30f3\u30bf\u30a4\u30e0\u306e\u4e21\u65b9\u3067\u7d76\u5bfe\u7684\u306a\u5236\u5fa1\u3092\u884c\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306a\u3002</p> <p>\u6b21\u306f\u7b2c4\u7ae0\u306e\u7df4\u7fd2\u554f\u984c\u3067\u3001\u3053\u308c\u307e\u3067\u306e\u77e5\u8b58\u3092\u5b9f\u8df5\u7684\u306b\u78ba\u8a8d\u3057\u3088\u3046\u3002</p> <p>\u300c\u9ad8\u5ea6\u306a\u30c8\u30ec\u30a4\u30c8\u3092\u6975\u3081\u308c\u3070\u3001\u578b\u30b7\u30b9\u30c6\u30e0\u306e\u795e\u3068\u306a\u308c\u308b\u300d</p>"},{"location":"chapter04/exercises/","title":"\u7b2c4\u7ae0 \u7df4\u7fd2\u554f\u984c - \u9818\u57df\u5c55\u958b\u306e\u8a66\u7df4","text":""},{"location":"chapter04/exercises/#_1","title":"\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u30fb\u30c8\u30ec\u30a4\u30c8\u306e\u7dcf\u5408\u6f14\u7fd2","text":"<p>\u7b2c4\u7ae0\u3067\u5b66\u3093\u3060\u9818\u57df\u5c55\u958b\u7de8\u306e\u5185\u5bb9\u3092\u5b9f\u8df5\u3067\u78ba\u8a8d\u3057\u3088\u3046\u3002\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3001\u30c8\u30ec\u30a4\u30c8\u3001\u9ad8\u5ea6\u306a\u30c8\u30ec\u30a4\u30c8\u6280\u8853 - \u3053\u308c\u3089\u306f\u4ffa\u306e\u9818\u57df\u5c55\u958b\u300c\u7121\u91cf\u7a7a\u51e6\u300d\u306e\u3088\u3046\u306b\u3001\u7121\u9650\u306e\u53ef\u80fd\u6027\u3092\u5305\u542b\u3059\u308b\u7a76\u6975\u306e\u62bd\u8c61\u5316\u6280\u8853\u3060\u3002</p> <p>\u4e94\u6761\u5148\u751f\u304b\u3089\u306e\u30a2\u30c9\u30d0\u30a4\u30b9</p> <p>\u3053\u306e\u7ae0\u306e\u554f\u984c\u306f\u62bd\u8c61\u5316\u306e\u6975\u81f4\u3060\u3002\u578b\u30b7\u30b9\u30c6\u30e0\u3092\u81ea\u5728\u306b\u64cd\u308a\u3001\u518d\u5229\u7528\u53ef\u80fd\u3067\u578b\u5b89\u5168\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u529b\u3092\u990a\u3048\u3002 \u6700\u521d\u306f\u8907\u96d1\u306b\u611f\u3058\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u3001\u30de\u30b9\u30bf\u30fc\u3059\u308c\u3070\u7121\u9650\u306e\u529b\u3092\u624b\u306b\u5165\u308c\u308b\u3002</p>"},{"location":"chapter04/exercises/#-","title":"\u521d\u7d1a\u7de8 - \u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u306e\u57fa\u672c\u5fdc\u7528","text":""},{"location":"chapter04/exercises/#1","title":"\u554f\u984c1: \u6c4e\u7528\u7684\u306a\u30b3\u30f3\u30c6\u30ca\u30b7\u30b9\u30c6\u30e0","text":"<p>\u69d8\u3005\u306a\u578b\u306e\u5024\u3092\u5b89\u5168\u306b\u7ba1\u7406\u3067\u304d\u308b\u6c4e\u7528\u30b3\u30f3\u30c6\u30ca\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u6210\u305b\u3088\u3002</p> <pre><code>// \u4ee5\u4e0b\u306e\u8981\u4ef6\u3092\u6e80\u305f\u3059\u30b3\u30f3\u30c6\u30ca\u3092\u5b9f\u88c5\u305b\u3088\uff1a\n// 1. \u4efb\u610f\u306e\u578bT\u306e\u5024\u3092\u4fdd\u6301\n// 2. \u5024\u306e\u53d6\u5f97\u3001\u8a2d\u5b9a\u3001\u5909\u63db\u6a5f\u80fd\n// 3. Option\u578b\u306b\u3088\u308b\u5b89\u5168\u306a\u30a2\u30af\u30bb\u30b9\n// 4. \u30a4\u30c6\u30ec\u30fc\u30bf\u6a5f\u80fd\n\nstruct Container&lt;T&gt; {\n    // \u3053\u3053\u306b\u5b9f\u88c5\n}\n\nimpl&lt;T&gt; Container&lt;T&gt; {\n    // \u5fc5\u8981\u306a\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\n}\n\nfn main() {\n    // \u30c6\u30b9\u30c8\u7528\u30b3\u30fc\u30c9\n    let mut power_container = Container::new();\n    // \u546a\u529b\u5024\u306e\u7ba1\u7406\u3092\u30c6\u30b9\u30c8\n\n    let mut name_container = Container::new();\n    // \u546a\u8853\u5e2b\u540d\u306e\u7ba1\u7406\u3092\u30c6\u30b9\u30c8\n}\n</code></pre> \u89e3\u7b54\u3092\u898b\u308b <pre><code>use std::collections::VecDeque;\n\n#[derive(Debug)]\nstruct Container&lt;T&gt; {\n    items: VecDeque&lt;T&gt;,\n    capacity: Option&lt;usize&gt;,\n}\n\nimpl&lt;T&gt; Container&lt;T&gt; {\n    fn new() -&gt; Self {\n        Container {\n            items: VecDeque::new(),\n            capacity: None,\n        }\n    }\n\n    fn with_capacity(capacity: usize) -&gt; Self {\n        Container {\n            items: VecDeque::with_capacity(capacity),\n            capacity: Some(capacity),\n        }\n    }\n\n    fn push(&amp;mut self, item: T) -&gt; Result&lt;(), T&gt; {\n        if let Some(cap) = self.capacity {\n            if self.items.len() &gt;= cap {\n                return Err(item);\n            }\n        }\n        self.items.push_back(item);\n        Ok(())\n    }\n\n    fn pop(&amp;mut self) -&gt; Option&lt;T&gt; {\n        self.items.pop_back()\n    }\n\n    fn peek(&amp;self) -&gt; Option&lt;&amp;T&gt; {\n        self.items.back()\n    }\n\n    fn peek_mut(&amp;mut self) -&gt; Option&lt;&amp;mut T&gt; {\n        self.items.back_mut()\n    }\n\n    fn len(&amp;self) -&gt; usize {\n        self.items.len()\n    }\n\n    fn is_empty(&amp;self) -&gt; bool {\n        self.items.is_empty()\n    }\n\n    fn clear(&amp;mut self) {\n        self.items.clear();\n    }\n\n    // \u5024\u306e\u5909\u63db\n    fn map&lt;U, F&gt;(self, f: F) -&gt; Container&lt;U&gt;\n    where\n        F: Fn(T) -&gt; U,\n    {\n        let mapped_items: VecDeque&lt;U&gt; = self.items.into_iter().map(f).collect();\n        Container {\n            items: mapped_items,\n            capacity: self.capacity,\n        }\n    }\n\n    // \u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\n    fn filter&lt;F&gt;(mut self, predicate: F) -&gt; Container&lt;T&gt;\n    where\n        F: Fn(&amp;T) -&gt; bool,\n    {\n        self.items.retain(|item| predicate(item));\n        self\n    }\n\n    // \u5b89\u5168\u306a\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30a2\u30af\u30bb\u30b9\n    fn get(&amp;self, index: usize) -&gt; Option&lt;&amp;T&gt; {\n        self.items.get(index)\n    }\n\n    fn get_mut(&amp;mut self, index: usize) -&gt; Option&lt;&amp;mut T&gt; {\n        self.items.get_mut(index)\n    }\n\n    // \u30a4\u30c6\u30ec\u30fc\u30bf\n    fn iter(&amp;self) -&gt; std::collections::vec_deque::Iter&lt;T&gt; {\n        self.items.iter()\n    }\n\n    fn iter_mut(&amp;mut self) -&gt; std::collections::vec_deque::IterMut&lt;T&gt; {\n        self.items.iter_mut()\n    }\n}\n\nimpl&lt;T&gt; IntoIterator for Container&lt;T&gt; {\n    type Item = T;\n    type IntoIter = std::collections::vec_deque::IntoIter&lt;T&gt;;\n\n    fn into_iter(self) -&gt; Self::IntoIter {\n        self.items.into_iter()\n    }\n}\n\n// \u3088\u308a\u9ad8\u5ea6\u306a\u64cd\u4f5c\nimpl&lt;T&gt; Container&lt;T&gt;\nwhere\n    T: Clone,\n{\n    fn duplicate(&amp;self) -&gt; Container&lt;T&gt; {\n        Container {\n            items: self.items.clone(),\n            capacity: self.capacity,\n        }\n    }\n}\n\nimpl&lt;T&gt; Container&lt;T&gt;\nwhere\n    T: PartialOrd,\n{\n    fn max(&amp;self) -&gt; Option&lt;&amp;T&gt; {\n        self.items.iter().max()\n    }\n\n    fn min(&amp;self) -&gt; Option&lt;&amp;T&gt; {\n        self.items.iter().min()\n    }\n\n    fn sort(&amp;mut self) {\n        let mut vec: Vec&lt;T&gt; = self.items.drain(..).collect();\n        vec.sort_by(|a, b| a.partial_cmp(b).unwrap_or(std::cmp::Ordering::Equal));\n        self.items = VecDeque::from(vec);\n    }\n}\n\nimpl&lt;T&gt; Container&lt;T&gt;\nwhere\n    T: std::fmt::Display,\n{\n    fn display_all(&amp;self) {\n        for (i, item) in self.items.iter().enumerate() {\n            println!(\\\"{}: {}\\\", i, item);\n        }\n    }\n}\n\nfn main() {\n    println!(\\\"=== \u6c4e\u7528\u30b3\u30f3\u30c6\u30ca\u30b7\u30b9\u30c6\u30e0 ===\\\");\n\n    // \u546a\u529b\u5024\u306e\u7ba1\u7406\n    let mut power_container = Container::with_capacity(5);\n\n    println!(\\\"\u546a\u529b\u5024\u3092\u8ffd\u52a0:\\\");\n    for power in [1000, 1500, 800, 2000, 3000] {\n        match power_container.push(power) {\n            Ok(_) =&gt; println!(\\\"  {}\u3092\u8ffd\u52a0\\\", power),\n            Err(rejected) =&gt; println!(\\\"  {}\u306f\u5bb9\u91cf\u30aa\u30fc\u30d0\u30fc\u3067\u62d2\u5426\\\", rejected),\n        }\n    }\n\n    println!(\\\"\\\\n\u546a\u529b\u5024\u4e00\u89a7:\\\");\n    power_container.display_all();\n\n    println!(\\\"\\\\n\u7d71\u8a08\u60c5\u5831:\\\");\n    if let Some(max_power) = power_container.max() {\n        println!(\\\"\u6700\u5927\u546a\u529b: {}\\\", max_power);\n    }\n    if let Some(min_power) = power_container.min() {\n        println!(\\\"\u6700\u5c0f\u546a\u529b: {}\\\", min_power);\n    }\n\n    // \u546a\u8853\u5e2b\u540d\u306e\u7ba1\u7406\n    let mut name_container = Container::new();\n    let names = [\\\"\u4e94\u6761\u609f\\\", \\\"\u864e\u6756\u60a0\u4ec1\\\", \\\"\u4f0f\u9ed2\u6075\\\", \\\"\u91d8\u5d0e\u91ce\u8594\u8587\\\"];\n\n    for name in names {\n        name_container.push(name.to_string()).unwrap();\n    }\n\n    println!(\\\"\\\\n\u546a\u8853\u5e2b\u540d\u4e00\u89a7:\\\");\n    name_container.display_all();\n\n    // \u5909\u63db\u64cd\u4f5c\n    let formatted_names = name_container.map(|name| format!(\\\"{}\u5148\u8f29\\\", name));\n    println!(\\\"\\\\n\u656c\u79f0\u4ed8\u304d\u540d\u524d:\\\");\n    formatted_names.display_all();\n\n    // \u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\n    let mut long_names = Container::new();\n    for name in names {\n        long_names.push(name.to_string()).unwrap();\n    }\n\n    let filtered = long_names.filter(|name| name.len() &gt;= 4);\n    println!(\\\"\\\\n4\u6587\u5b57\u4ee5\u4e0a\u306e\u540d\u524d:\\\");\n    filtered.display_all();\n\n    // \u30a4\u30c6\u30ec\u30fc\u30bf\u4f7f\u7528\n    println!(\\\"\\\\n\u546a\u529b\u5024\u306e2\u500d\u8a08\u7b97:\\\");\n    for power in power_container.iter() {\n        println!(\\\"{} -&gt; {}\\\", power, power * 2);\n    }\n}\n</code></pre>"},{"location":"chapter04/exercises/#2","title":"\u554f\u984c2: \u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u8a08\u7b97\u30b7\u30b9\u30c6\u30e0","text":"<p>\u6570\u5024\u8a08\u7b97\u3092\u6c4e\u7528\u7684\u306b\u884c\u3046\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u6210\u305b\u3088\u3002</p> <pre><code>// \u4ee5\u4e0b\u306e\u6a5f\u80fd\u3092\u6301\u3064\u8a08\u7b97\u30b7\u30b9\u30c6\u30e0\u3092\u5b9f\u88c5\u305b\u3088\uff1a\n// 1. \u4efb\u610f\u306e\u6570\u5024\u578b\u3067\u306e\u56db\u5247\u6f14\u7b97\n// 2. \u7d71\u8a08\u8a08\u7b97\uff08\u5e73\u5747\u3001\u6700\u5927\u3001\u6700\u5c0f\uff09\n// 3. \u578b\u5909\u63db\u6a5f\u80fd\n// 4. \u30ab\u30b9\u30bf\u30e0\u8a08\u7b97\u95a2\u6570\u306e\u9069\u7528\n\nstruct Calculator&lt;T&gt; {\n    // \u3053\u3053\u306b\u5b9f\u88c5\n}\n\n// \u5fc5\u8981\u306a\u30c8\u30ec\u30a4\u30c8\u5883\u754c\u3092\u8003\u616e\u3057\u3066\u5b9f\u88c5\n</code></pre> \u89e3\u7b54\u3092\u898b\u308b <pre><code>use std::ops::{Add, Sub, Mul, Div};\nuse std::fmt::Display;\n\n#[derive(Debug)]\nstruct Calculator&lt;T&gt; {\n    values: Vec&lt;T&gt;,\n}\n\nimpl&lt;T&gt; Calculator&lt;T&gt; {\n    fn new() -&gt; Self {\n        Calculator {\n            values: Vec::new(),\n        }\n    }\n\n    fn with_values(values: Vec&lt;T&gt;) -&gt; Self {\n        Calculator { values }\n    }\n\n    fn add_value(&amp;mut self, value: T) {\n        self.values.push(value);\n    }\n\n    fn len(&amp;self) -&gt; usize {\n        self.values.len()\n    }\n\n    fn is_empty(&amp;self) -&gt; bool {\n        self.values.is_empty()\n    }\n\n    fn clear(&amp;mut self) {\n        self.values.clear();\n    }\n}\n\n// \u57fa\u672c\u8a08\u7b97\u64cd\u4f5c\nimpl&lt;T&gt; Calculator&lt;T&gt;\nwhere\n    T: Add&lt;Output = T&gt; + Copy,\n{\n    fn sum(&amp;self) -&gt; Option&lt;T&gt; {\n        if self.values.is_empty() {\n            return None;\n        }\n\n        Some(self.values[1..].iter().fold(self.values[0], |acc, &amp;x| acc + x))\n    }\n}\n\nimpl&lt;T&gt; Calculator&lt;T&gt;\nwhere\n    T: Add&lt;Output = T&gt; + Div&lt;Output = T&gt; + Copy + From&lt;usize&gt;,\n{\n    fn average(&amp;self) -&gt; Option&lt;T&gt; {\n        if self.values.is_empty() {\n            return None;\n        }\n\n        let sum = self.sum()?;\n        let count = T::from(self.values.len());\n        Some(sum / count)\n    }\n}\n\nimpl&lt;T&gt; Calculator&lt;T&gt;\nwhere\n    T: PartialOrd + Copy,\n{\n    fn max(&amp;self) -&gt; Option&lt;T&gt; {\n        self.values.iter().max().copied()\n    }\n\n    fn min(&amp;self) -&gt; Option&lt;T&gt; {\n        self.values.iter().min().copied()\n    }\n\n    fn range(&amp;self) -&gt; Option&lt;(T, T)&gt; {\n        if self.values.is_empty() {\n            return None;\n        }\n\n        Some((self.min()?, self.max()?))\n    }\n}\n\n// \u56db\u5247\u6f14\u7b97\nimpl&lt;T&gt; Calculator&lt;T&gt;\nwhere\n    T: Add&lt;Output = T&gt; + Sub&lt;Output = T&gt; + Mul&lt;Output = T&gt; + Div&lt;Output = T&gt; + Copy,\n{\n    fn element_wise_add(&amp;self, other: &amp;Calculator&lt;T&gt;) -&gt; Calculator&lt;T&gt; {\n        let results = self.values.iter()\n            .zip(other.values.iter())\n            .map(|(&amp;a, &amp;b)| a + b)\n            .collect();\n\n        Calculator { values: results }\n    }\n\n    fn element_wise_sub(&amp;self, other: &amp;Calculator&lt;T&gt;) -&gt; Calculator&lt;T&gt; {\n        let results = self.values.iter()\n            .zip(other.values.iter())\n            .map(|(&amp;a, &amp;b)| a - b)\n            .collect();\n\n        Calculator { values: results }\n    }\n\n    fn scalar_multiply(&amp;self, scalar: T) -&gt; Calculator&lt;T&gt; {\n        let results = self.values.iter()\n            .map(|&amp;x| x * scalar)\n            .collect();\n\n        Calculator { values: results }\n    }\n\n    fn scalar_divide(&amp;self, scalar: T) -&gt; Calculator&lt;T&gt; {\n        let results = self.values.iter()\n            .map(|&amp;x| x / scalar)\n            .collect();\n\n        Calculator { values: results }\n    }\n}\n\n// \u9ad8\u5ea6\u306a\u64cd\u4f5c\nimpl&lt;T&gt; Calculator&lt;T&gt;\nwhere\n    T: Copy,\n{\n    fn map&lt;U, F&gt;(&amp;self, f: F) -&gt; Calculator&lt;U&gt;\n    where\n        F: Fn(T) -&gt; U,\n    {\n        let mapped_values = self.values.iter().map(|&amp;x| f(x)).collect();\n        Calculator { values: mapped_values }\n    }\n\n    fn filter&lt;F&gt;(&amp;self, predicate: F) -&gt; Calculator&lt;T&gt;\n    where\n        F: Fn(&amp;T) -&gt; bool,\n    {\n        let filtered_values = self.values.iter()\n            .filter(|&amp;x| predicate(x))\n            .copied()\n            .collect();\n\n        Calculator { values: filtered_values }\n    }\n\n    fn reduce&lt;F&gt;(&amp;self, initial: T, f: F) -&gt; T\n    where\n        F: Fn(T, T) -&gt; T,\n    {\n        self.values.iter().fold(initial, |acc, &amp;x| f(acc, x))\n    }\n}\n\n// \u578b\u5909\u63db\nimpl&lt;T&gt; Calculator&lt;T&gt; {\n    fn convert&lt;U, F&gt;(self, converter: F) -&gt; Calculator&lt;U&gt;\n    where\n        F: Fn(T) -&gt; U,\n    {\n        let converted_values = self.values.into_iter().map(converter).collect();\n        Calculator { values: converted_values }\n    }\n}\n\n// \u8868\u793a\u6a5f\u80fd\nimpl&lt;T&gt; Calculator&lt;T&gt;\nwhere\n    T: Display,\n{\n    fn display(&amp;self, label: &amp;str) {\n        println!(\\\"{}: [{}]\\\", label,\n                 self.values.iter()\n                     .map(|x| x.to_string())\n                     .collect::&lt;Vec&lt;_&gt;&gt;()\n                     .join(\\\", \\\"));\n    }\n\n    fn display_stats(&amp;self)\n    where\n        T: Add&lt;Output = T&gt; + Div&lt;Output = T&gt; + PartialOrd + Copy + From&lt;usize&gt;,\n    {\n        println!(\\\"\u7d71\u8a08\u60c5\u5831:\\\");\n        println!(\\\"  \u8981\u7d20\u6570: {}\\\", self.len());\n\n        if let Some(sum) = self.sum() {\n            println!(\\\"  \u5408\u8a08: {}\\\", sum);\n        }\n\n        if let Some(avg) = self.average() {\n            println!(\\\"  \u5e73\u5747: {}\\\", avg);\n        }\n\n        if let Some(max) = self.max() {\n            println!(\\\"  \u6700\u5927: {}\\\", max);\n        }\n\n        if let Some(min) = self.min() {\n            println!(\\\"  \u6700\u5c0f: {}\\\", min);\n        }\n    }\n}\n\n// \u7279\u5316\u3057\u305f\u6a5f\u80fd\nimpl Calculator&lt;f64&gt; {\n    fn standard_deviation(&amp;self) -&gt; Option&lt;f64&gt; {\n        if self.values.len() &lt; 2 {\n            return None;\n        }\n\n        let avg = self.average()?;\n        let variance = self.values.iter()\n            .map(|&amp;x| (x - avg).powi(2))\n            .sum::&lt;f64&gt;() / (self.values.len() - 1) as f64;\n\n        Some(variance.sqrt())\n    }\n\n    fn median(&amp;self) -&gt; Option&lt;f64&gt; {\n        if self.values.is_empty() {\n            return None;\n        }\n\n        let mut sorted = self.values.clone();\n        sorted.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\n        let mid = sorted.len() / 2;\n\n        if sorted.len() % 2 == 0 {\n            Some((sorted[mid - 1] + sorted[mid]) / 2.0)\n        } else {\n            Some(sorted[mid])\n        }\n    }\n}\n\nfn main() {\n    println!(\\\"=== \u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u8a08\u7b97\u30b7\u30b9\u30c6\u30e0 ===\\\");\n\n    // \u6574\u6570\u3067\u306e\u8a08\u7b97\n    let mut int_calc = Calculator::new();\n    let powers = [1000, 1500, 800, 2000, 1200];\n\n    for power in powers {\n        int_calc.add_value(power);\n    }\n\n    int_calc.display(\\\"\u546a\u529b\u5024\\\");\n    int_calc.display_stats();\n\n    println!();\n\n    // \u6d6e\u52d5\u5c0f\u6570\u70b9\u3067\u306e\u8a08\u7b97\n    let float_calc = Calculator::with_values(vec![1000.0, 1500.5, 800.3, 2000.7, 1200.1]);\n    float_calc.display(\\\"\u7cbe\u5bc6\u546a\u529b\u5024\\\");\n    float_calc.display_stats();\n\n    if let Some(std_dev) = float_calc.standard_deviation() {\n        println!(\\\"  \u6a19\u6e96\u504f\u5dee: {:.2}\\\", std_dev);\n    }\n\n    if let Some(median) = float_calc.median() {\n        println!(\\\"  \u4e2d\u592e\u5024: {:.2}\\\", median);\n    }\n\n    println!();\n\n    // \u8a08\u7b97\u64cd\u4f5c\n    let calc1 = Calculator::with_values(vec![100, 200, 300]);\n    let calc2 = Calculator::with_values(vec![50, 100, 150]);\n\n    calc1.display(\\\"\u8a08\u7b971\\\");\n    calc2.display(\\\"\u8a08\u7b972\\\");\n\n    let sum_result = calc1.element_wise_add(&amp;calc2);\n    sum_result.display(\\\"\u8981\u7d20\u3054\u3068\u306e\u548c\\\");\n\n    let diff_result = calc1.element_wise_sub(&amp;calc2);\n    diff_result.display(\\\"\u8981\u7d20\u3054\u3068\u306e\u5dee\\\");\n\n    let scaled = calc1.scalar_multiply(2);\n    scaled.display(\\\"2\u500d\\\");\n\n    println!();\n\n    // \u5909\u63db\u64cd\u4f5c\n    let power_calc = Calculator::with_values(vec![1000, 1500, 2000]);\n    power_calc.display(\\\"\u5143\u306e\u546a\u529b\\\");\n\n    // \u6574\u6570\u304b\u3089\u6587\u5b57\u5217\u3078\u306e\u5909\u63db\n    let string_calc = power_calc.convert(|x| {\n        match x {\n            x if x &gt;= 2000 =&gt; format!(\\\"{}\uff08\u7279\u7d1a\uff09\\\", x),\n            x if x &gt;= 1500 =&gt; format!(\\\"{}\uff081\u7d1a\uff09\\\", x),\n            x if x &gt;= 1000 =&gt; format!(\\\"{}\uff082\u7d1a\uff09\\\", x),\n            x =&gt; format!(\\\"{}\uff08\u4e0b\u7d1a\uff09\\\", x),\n        }\n    });\n\n    string_calc.display(\\\"\u7b49\u7d1a\u4ed8\u304d\u546a\u529b\\\");\n\n    // \u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\n    let high_powers = Calculator::with_values(vec![500, 1000, 1500, 2000, 3000]);\n    high_powers.display(\\\"\u5168\u546a\u529b\u5024\\\");\n\n    let filtered = high_powers.filter(|&amp;x| x &gt;= 1500);\n    filtered.display(\\\"1500\u4ee5\u4e0a\u306e\u546a\u529b\\\");\n\n    // \u30ab\u30b9\u30bf\u30e0\u8a08\u7b97\n    let doubled = high_powers.map(|x| x * 2);\n    doubled.display(\\\"2\u500d\u3057\u305f\u546a\u529b\\\");\n\n    let power_sum = high_powers.reduce(0, |acc, x| acc + x);\n    println!(\\\"\\\\n\u30ab\u30b9\u30bf\u30e0\u5408\u8a08\u8a08\u7b97: {}\\\", power_sum);\n}\n</code></pre>"},{"location":"chapter04/exercises/#-_1","title":"\u4e2d\u7d1a\u7de8 - \u30c8\u30ec\u30a4\u30c8\u306e\u5b9f\u8df5\u5fdc\u7528","text":""},{"location":"chapter04/exercises/#3","title":"\u554f\u984c3: \u546a\u8853\u6226\u95d8\u30b7\u30b9\u30c6\u30e0","text":"<p>\u8907\u6570\u306e\u30c8\u30ec\u30a4\u30c8\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u6226\u95d8\u30b7\u30b9\u30c6\u30e0\u3092\u5b9f\u88c5\u305b\u3088\u3002</p> <pre><code>// \u4ee5\u4e0b\u306e\u30c8\u30ec\u30a4\u30c8\u3092\u5b9a\u7fa9\u3057\u3001\u6226\u95d8\u30b7\u30b9\u30c6\u30e0\u3092\u5b9f\u88c5\u305b\u3088\uff1a\n// 1. Entity - \u57fa\u672c\u7684\u306a\u5b58\u5728\u60c5\u5831\n// 2. Combatant - \u6226\u95d8\u80fd\u529b\n// 3. TechniqueUser - \u8853\u5f0f\u4f7f\u7528\u80fd\u529b\n// 4. Healable - \u56de\u5fa9\u80fd\u529b\n// 5. Displayable - \u8868\u793a\u6a5f\u80fd\n\n// \u3055\u3089\u306b\u3001\u3053\u308c\u3089\u306e\u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3059\u308b\u5177\u4f53\u7684\u306a\u578b\u3092\u4f5c\u6210\u3057\u3001\n// \u6226\u95d8\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3046\u30b7\u30b9\u30c6\u30e0\u3092\u69cb\u7bc9\u305b\u3088\u3002\n\nfn main() {\n    // \u6226\u95d8\u30b7\u30b9\u30c6\u30e0\u306e\u30c6\u30b9\u30c8\n}\n</code></pre> \u89e3\u7b54\u3092\u898b\u308b <pre><code>use std::collections::HashMap;\nuse std::fmt;\n\n// \u57fa\u672c\u7684\u306a\u5b58\u5728\u60c5\u5831\ntrait Entity {\n    fn name(&amp;self) -&gt; &amp;str;\n    fn entity_type(&amp;self) -&gt; &amp;str;\n    fn level(&amp;self) -&gt; u32;\n    fn is_alive(&amp;self) -&gt; bool;\n}\n\n// \u6226\u95d8\u80fd\u529b\ntrait Combatant: Entity {\n    fn max_health(&amp;self) -&gt; i32;\n    fn current_health(&amp;self) -&gt; i32;\n    fn attack_power(&amp;self) -&gt; i32;\n    fn defense_power(&amp;self) -&gt; i32;\n\n    fn take_damage(&amp;mut self, damage: i32) -&gt; i32;\n    fn calculate_damage(&amp;self, target: &amp;dyn Combatant) -&gt; i32 {\n        let base_damage = self.attack_power();\n        let defense = target.defense_power();\n        (base_damage - defense / 2).max(1)\n    }\n}\n\n// \u8853\u5f0f\u4f7f\u7528\u80fd\u529b\ntrait TechniqueUser: Entity {\n    fn available_techniques(&amp;self) -&gt; &amp;[String];\n    fn mana(&amp;self) -&gt; i32;\n    fn max_mana(&amp;self) -&gt; i32;\n\n    fn use_technique(&amp;mut self, technique_name: &amp;str, target: &amp;mut dyn Combatant) -&gt; Result&lt;String, String&gt;;\n    fn recover_mana(&amp;mut self, amount: i32);\n}\n\n// \u56de\u5fa9\u80fd\u529b\ntrait Healable: Combatant {\n    fn heal(&amp;mut self, amount: i32) -&gt; i32;\n    fn can_heal(&amp;self) -&gt; bool {\n        self.current_health() &lt; self.max_health()\n    }\n}\n\n// \u8868\u793a\u6a5f\u80fd\ntrait Displayable {\n    fn display_status(&amp;self) -&gt; String;\n    fn display_summary(&amp;self) -&gt; String;\n}\n\n// \u546a\u8853\u5e2b\u5b9f\u88c5\n#[derive(Debug, Clone)]\nstruct Sorcerer {\n    name: String,\n    level: u32,\n    max_health: i32,\n    current_health: i32,\n    attack_power: i32,\n    defense_power: i32,\n    max_mana: i32,\n    current_mana: i32,\n    techniques: Vec&lt;String&gt;,\n    technique_costs: HashMap&lt;String, i32&gt;,\n}\n\nimpl Sorcerer {\n    fn new(name: &amp;str, level: u32, health: i32, attack: i32, defense: i32, mana: i32) -&gt; Self {\n        let mut sorcerer = Sorcerer {\n            name: name.to_string(),\n            level,\n            max_health: health,\n            current_health: health,\n            attack_power: attack,\n            defense_power: defense,\n            max_mana: mana,\n            current_mana: mana,\n            techniques: Vec::new(),\n            technique_costs: HashMap::new(),\n        };\n\n        // \u30c7\u30d5\u30a9\u30eb\u30c8\u8853\u5f0f\n        sorcerer.learn_technique(\\\"\u57fa\u672c\u653b\u6483\\\", 10);\n        sorcerer.learn_technique(\\\"\u5f37\u5316\u653b\u6483\\\", 25);\n\n        sorcerer\n    }\n\n    fn learn_technique(&amp;mut self, name: &amp;str, cost: i32) {\n        self.techniques.push(name.to_string());\n        self.technique_costs.insert(name.to_string(), cost);\n    }\n}\n\nimpl Entity for Sorcerer {\n    fn name(&amp;self) -&gt; &amp;str {\n        &amp;self.name\n    }\n\n    fn entity_type(&amp;self) -&gt; &amp;str {\n        \\\"\u546a\u8853\u5e2b\\\"\n    }\n\n    fn level(&amp;self) -&gt; u32 {\n        self.level\n    }\n\n    fn is_alive(&amp;self) -&gt; bool {\n        self.current_health &gt; 0\n    }\n}\n\nimpl Combatant for Sorcerer {\n    fn max_health(&amp;self) -&gt; i32 {\n        self.max_health\n    }\n\n    fn current_health(&amp;self) -&gt; i32 {\n        self.current_health\n    }\n\n    fn attack_power(&amp;self) -&gt; i32 {\n        self.attack_power\n    }\n\n    fn defense_power(&amp;self) -&gt; i32 {\n        self.defense_power\n    }\n\n    fn take_damage(&amp;mut self, damage: i32) -&gt; i32 {\n        let actual_damage = damage.min(self.current_health);\n        self.current_health -= actual_damage;\n        actual_damage\n    }\n}\n\nimpl TechniqueUser for Sorcerer {\n    fn available_techniques(&amp;self) -&gt; &amp;[String] {\n        &amp;self.techniques\n    }\n\n    fn mana(&amp;self) -&gt; i32 {\n        self.current_mana\n    }\n\n    fn max_mana(&amp;self) -&gt; i32 {\n        self.max_mana\n    }\n\n    fn use_technique(&amp;mut self, technique_name: &amp;str, target: &amp;mut dyn Combatant) -&gt; Result&lt;String, String&gt; {\n        let cost = self.technique_costs.get(technique_name)\n            .ok_or_else(|| format!(\\\"{}\u306f{}\u3092\u77e5\u308a\u307e\u305b\u3093\\\", self.name, technique_name))?;\n\n        if self.current_mana &lt; *cost {\n            return Err(format!(\\\"{}\u306e\u30de\u30ca\u304c\u4e0d\u8db3\u3057\u3066\u3044\u307e\u3059\uff08\u5fc5\u8981: {}, \u73fe\u5728: {}\uff09\\\",\n                             self.name, cost, self.current_mana));\n        }\n\n        self.current_mana -= cost;\n\n        let damage = match technique_name {\n            \\\"\u57fa\u672c\u653b\u6483\\\" =&gt; self.calculate_damage(target),\n            \\\"\u5f37\u5316\u653b\u6483\\\" =&gt; self.calculate_damage(target) * 2,\n            \\\"\u56de\u5fa9\u8853\\\" =&gt; {\n                if let Some(healable_target) = (target as &amp;mut dyn std::any::Any).downcast_mut::&lt;Sorcerer&gt;() {\n                    let heal_amount = self.attack_power() / 2;\n                    healable_target.heal(heal_amount);\n                    return Ok(format!(\\\"{}\u304c{}\u3092{}\u56de\u5fa9\u3055\u305b\u305f\\\", self.name, target.name(), heal_amount));\n                } else {\n                    return Err(\\\"\u56de\u5fa9\u5bfe\u8c61\u304c\u7121\u52b9\u3067\u3059\\\".to_string());\n                }\n            },\n            _ =&gt; self.calculate_damage(target),\n        };\n\n        let actual_damage = target.take_damage(damage);\n        Ok(format!(\\\"{}\u304c{}\u3067{}\u306b{}\u30c0\u30e1\u30fc\u30b8\\\",\n                  self.name, technique_name, target.name(), actual_damage))\n    }\n\n    fn recover_mana(&amp;mut self, amount: i32) {\n        self.current_mana = (self.current_mana + amount).min(self.max_mana);\n    }\n}\n\nimpl Healable for Sorcerer {\n    fn heal(&amp;mut self, amount: i32) -&gt; i32 {\n        let actual_heal = amount.min(self.max_health - self.current_health);\n        self.current_health += actual_heal;\n        actual_heal\n    }\n}\n\nimpl Displayable for Sorcerer {\n    fn display_status(&amp;self) -&gt; String {\n        format!(\n            \\\"=== {} ===\\\\n\u30ec\u30d9\u30eb: {}\\\\nHP: {}/{}\\\\n\u30de\u30ca: {}/{}\\\\n\u653b\u6483\u529b: {}\\\\n\u9632\u5fa1\u529b: {}\\\\n\u7fd2\u5f97\u8853\u5f0f: {:?}\\\\n\u72b6\u614b: {}\\\",\n            self.name,\n            self.level,\n            self.current_health, self.max_health,\n            self.current_mana, self.max_mana,\n            self.attack_power,\n            self.defense_power,\n            self.techniques,\n            if self.is_alive() { \\\"\u751f\u5b58\\\" } else { \\\"\u6226\u95d8\u4e0d\u80fd\\\" }\n        )\n    }\n\n    fn display_summary(&amp;self) -&gt; String {\n        format!(\\\"{} (Lv.{}, HP: {}/{}, \u30de\u30ca: {}/{})\\\",\n                self.name, self.level,\n                self.current_health, self.max_health,\n                self.current_mana, self.max_mana)\n    }\n}\n\nimpl fmt::Display for Sorcerer {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        write!(f, \\\"{}\\\", self.display_summary())\n    }\n}\n\n// \u546a\u970a\u5b9f\u88c5\n#[derive(Debug, Clone)]\nstruct Curse {\n    name: String,\n    grade: String,\n    level: u32,\n    max_health: i32,\n    current_health: i32,\n    attack_power: i32,\n    defense_power: i32,\n}\n\nimpl Curse {\n    fn new(name: &amp;str, grade: &amp;str, level: u32, health: i32, attack: i32, defense: i32) -&gt; Self {\n        Curse {\n            name: name.to_string(),\n            grade: grade.to_string(),\n            level,\n            max_health: health,\n            current_health: health,\n            attack_power: attack,\n            defense_power: defense,\n        }\n    }\n}\n\nimpl Entity for Curse {\n    fn name(&amp;self) -&gt; &amp;str {\n        &amp;self.name\n    }\n\n    fn entity_type(&amp;self) -&gt; &amp;str {\n        \\\"\u546a\u970a\\\"\n    }\n\n    fn level(&amp;self) -&gt; u32 {\n        self.level\n    }\n\n    fn is_alive(&amp;self) -&gt; bool {\n        self.current_health &gt; 0\n    }\n}\n\nimpl Combatant for Curse {\n    fn max_health(&amp;self) -&gt; i32 {\n        self.max_health\n    }\n\n    fn current_health(&amp;self) -&gt; i32 {\n        self.current_health\n    }\n\n    fn attack_power(&amp;self) -&gt; i32 {\n        self.attack_power\n    }\n\n    fn defense_power(&amp;self) -&gt; i32 {\n        self.defense_power\n    }\n\n    fn take_damage(&amp;mut self, damage: i32) -&gt; i32 {\n        let actual_damage = damage.min(self.current_health);\n        self.current_health -= actual_damage;\n        actual_damage\n    }\n}\n\nimpl Displayable for Curse {\n    fn display_status(&amp;self) -&gt; String {\n        format!(\n            \\\"=== {} ===\\\\n\u7b49\u7d1a: {}\\\\n\u30ec\u30d9\u30eb: {}\\\\nHP: {}/{}\\\\n\u653b\u6483\u529b: {}\\\\n\u9632\u5fa1\u529b: {}\\\\n\u72b6\u614b: {}\\\",\n            self.name,\n            self.grade,\n            self.level,\n            self.current_health, self.max_health,\n            self.attack_power,\n            self.defense_power,\n            if self.is_alive() { \\\"\u751f\u5b58\\\" } else { \\\"\u7953\u308f\u308c\u305f\\\" }\n        )\n    }\n\n    fn display_summary(&amp;self) -&gt; String {\n        format!(\\\"{} ({}\u7d1a, Lv.{}, HP: {}/{})\\\",\n                self.name, self.grade, self.level,\n                self.current_health, self.max_health)\n    }\n}\n\nimpl fmt::Display for Curse {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        write!(f, \\\"{}\\\", self.display_summary())\n    }\n}\n\n// \u6226\u95d8\u30b7\u30b9\u30c6\u30e0\nstruct BattleSystem;\n\nimpl BattleSystem {\n    fn one_vs_one(\n        fighter1: &amp;mut dyn Combatant,\n        fighter2: &amp;mut dyn Combatant\n    ) -&gt; String {\n        let mut log = String::new();\n        let mut round = 1;\n\n        log.push_str(&amp;format!(\\\"=== 1\u5bfe1\u6226\u95d8: {} vs {} ===\\\\n\\\",\n                             fighter1.name(), fighter2.name()));\n\n        while fighter1.is_alive() &amp;&amp; fighter2.is_alive() &amp;&amp; round &lt;= 10 {\n            log.push_str(&amp;format!(\\\"\\\\n--- \u30e9\u30a6\u30f3\u30c9 {} ---\\\\n\\\", round));\n\n            // \u30d5\u30a1\u30a4\u30bf\u30fc1\u306e\u653b\u6483\n            if fighter1.is_alive() {\n                let damage = fighter1.calculate_damage(fighter2);\n                let actual_damage = fighter2.take_damage(damage);\n                log.push_str(&amp;format!(\\\"{}\u304c{}\u3092\u653b\u6483\uff01{}\u30c0\u30e1\u30fc\u30b8\\\\n\\\",\n                                     fighter1.name(), fighter2.name(), actual_damage));\n\n                if !fighter2.is_alive() {\n                    log.push_str(&amp;format!(\\\"{}\u304c\u5012\u308c\u305f\uff01\\\\n\\\", fighter2.name()));\n                    break;\n                }\n            }\n\n            // \u30d5\u30a1\u30a4\u30bf\u30fc2\u306e\u653b\u6483\n            if fighter2.is_alive() {\n                let damage = fighter2.calculate_damage(fighter1);\n                let actual_damage = fighter1.take_damage(damage);\n                log.push_str(&amp;format!(\\\"{}\u304c{}\u3092\u653b\u6483\uff01{}\u30c0\u30e1\u30fc\u30b8\\\\n\\\",\n                                     fighter2.name(), fighter1.name(), actual_damage));\n\n                if !fighter1.is_alive() {\n                    log.push_str(&amp;format!(\\\"{}\u304c\u5012\u308c\u305f\uff01\\\\n\\\", fighter1.name()));\n                    break;\n                }\n            }\n\n            round += 1;\n        }\n\n        // \u52dd\u8005\u306e\u767a\u8868\n        if fighter1.is_alive() &amp;&amp; !fighter2.is_alive() {\n            log.push_str(&amp;format!(\\\"\\\\n\u52dd\u8005: {}\uff01\\\\n\\\", fighter1.name()));\n        } else if fighter2.is_alive() &amp;&amp; !fighter1.is_alive() {\n            log.push_str(&amp;format!(\\\"\\\\n\u52dd\u8005: {}\uff01\\\\n\\\", fighter2.name()));\n        } else if round &gt; 10 {\n            log.push_str(\\\"\\\\n\u6642\u9593\u5207\u308c\u3067\u5f15\u304d\u5206\u3051\uff01\\\\n\\\");\n        } else {\n            log.push_str(\\\"\\\\n\u4e21\u8005\u6226\u95d8\u4e0d\u80fd...\\\\n\\\");\n        }\n\n        log\n    }\n\n    fn technique_battle&lt;T1, T2&gt;(\n        user: &amp;mut T1,\n        target: &amp;mut T2,\n        technique: &amp;str\n    ) -&gt; String\n    where\n        T1: TechniqueUser + Combatant,\n        T2: Combatant,\n    {\n        match user.use_technique(technique, target) {\n            Ok(result) =&gt; result,\n            Err(error) =&gt; error,\n        }\n    }\n}\n\nfn main() {\n    println!(\\\"=== \u546a\u8853\u6226\u95d8\u30b7\u30b9\u30c6\u30e0 ===\\\");\n\n    // \u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u4f5c\u6210\n    let mut gojo = Sorcerer::new(\\\"\u4e94\u6761\u609f\\\", 10, 2000, 300, 200, 500);\n    gojo.learn_technique(\\\"\u7121\u4e0b\u9650\u8853\u5f0f\\\", 50);\n    gojo.learn_technique(\\\"\u9818\u57df\u5c55\u958b\\\", 200);\n\n    let mut yuji = Sorcerer::new(\\\"\u864e\u6756\u60a0\u4ec1\\\", 5, 1500, 250, 150, 300);\n    yuji.learn_technique(\\\"\u9ed2\u9583\\\", 40);\n\n    let mut special_curse = Curse::new(\\\"\u7279\u7d1a\u546a\u970a\\\", \\\"\u7279\u7d1a\\\", 8, 1800, 280, 180);\n\n    // \u30b9\u30c6\u30fc\u30bf\u30b9\u8868\u793a\n    println!(\\\"{}\\\", gojo.display_status());\n    println!();\n    println!(\\\"{}\\\", yuji.display_status());\n    println!();\n    println!(\\\"{}\\\", special_curse.display_status());\n    println!();\n\n    // \u8853\u5f0f\u6226\u95d8\n    println!(\\\"=== \u8853\u5f0f\u4f7f\u7528\u30c6\u30b9\u30c8 ===\\\");\n    let result = BattleSystem::technique_battle(&amp;mut gojo, &amp;mut special_curse, \\\"\u7121\u4e0b\u9650\u8853\u5f0f\\\");\n    println!(\\\"{}\\\", result);\n\n    let result = BattleSystem::technique_battle(&amp;mut yuji, &amp;mut gojo, \\\"\u9ed2\u9583\\\");\n    println!(\\\"{}\\\", result);\n\n    // \u30de\u30ca\u4e0d\u8db3\u306e\u30c6\u30b9\u30c8\n    let result = BattleSystem::technique_battle(&amp;mut gojo, &amp;mut special_curse, \\\"\u9818\u57df\u5c55\u958b\\\");\n    println!(\\\"{}\\\", result);\n\n    println!();\n\n    // 1\u5bfe1\u6226\u95d8\n    let mut gojo_clone = gojo.clone();\n    let mut curse_clone = special_curse.clone();\n\n    let battle_log = BattleSystem::one_vs_one(&amp;mut gojo_clone, &amp;mut curse_clone);\n    println!(\\\"{}\\\", battle_log);\n\n    // \u6226\u95d8\u5f8c\u30b9\u30c6\u30fc\u30bf\u30b9\n    println!(\\\"=== \u6226\u95d8\u5f8c\u30b9\u30c6\u30fc\u30bf\u30b9 ===\\\");\n    println!(\\\"{}\\\", gojo_clone.display_summary());\n    println!(\\\"{}\\\", curse_clone.display_summary());\n\n    // \u56de\u5fa9\u30c6\u30b9\u30c8\n    if gojo_clone.can_heal() {\n        let healed = gojo_clone.heal(200);\n        println!(\\\"\\\\n{}\u304c{}\u56de\u5fa9\u3057\u305f\\\", gojo_clone.name(), healed);\n        println!(\\\"{}\\\", gojo_clone.display_summary());\n    }\n\n    // \u30de\u30ca\u56de\u5fa9\n    gojo_clone.recover_mana(100);\n    println!(\\\"\u30de\u30ca\u56de\u5fa9\u5f8c: {}\\\", gojo_clone.display_summary());\n}\n</code></pre>"},{"location":"chapter04/exercises/#4","title":"\u554f\u984c4: \u578b\u5b89\u5168\u306a\u8a2d\u5b9a\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0","text":"<p>\u7570\u306a\u308b\u578b\u306e\u8a2d\u5b9a\u5024\u3092\u5b89\u5168\u306b\u7ba1\u7406\u3059\u308b\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u6210\u305b\u3088\u3002</p> <pre><code>// \u4ee5\u4e0b\u306e\u8981\u4ef6\u3092\u6e80\u305f\u3059\u8a2d\u5b9a\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0\u3092\u5b9f\u88c5\u305b\u3088\uff1a\n// 1. \u4efb\u610f\u306e\u578b\u306e\u8a2d\u5b9a\u5024\u3092\u4fdd\u5b58\u30fb\u53d6\u5f97\n// 2. \u578b\u5b89\u5168\u6027\u306e\u4fdd\u8a3c\n// 3. \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306e\u63d0\u4f9b\n// 4. \u8a2d\u5b9a\u306e\u691c\u8a3c\u6a5f\u80fd\n// 5. \u8a2d\u5b9a\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30bc\u30fc\u30b7\u30e7\u30f3\n\nuse std::collections::HashMap;\nuse std::any::{Any, TypeId};\n\nstruct ConfigManager {\n    // \u3053\u3053\u306b\u5b9f\u88c5\n}\n\n// \u8a2d\u5b9a\u5024\u306e\u30c8\u30ec\u30a4\u30c8\u5b9a\u7fa9\u3082\u542b\u3081\u3066\u5b9f\u88c5\n</code></pre> \u89e3\u7b54\u3092\u898b\u308b <pre><code>use std::collections::HashMap;\nuse std::any::{Any, TypeId};\nuse std::fmt;\n\n// \u8a2d\u5b9a\u5024\u306e\u30c8\u30ec\u30a4\u30c8\ntrait ConfigValue: Any + fmt::Debug + Clone {\n    fn validate(&amp;self) -&gt; Result&lt;(), String&gt; {\n        Ok(())  // \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u5e38\u306b\u6709\u52b9\n    }\n\n    fn as_any(&amp;self) -&gt; &amp;dyn Any;\n    fn clone_box(&amp;self) -&gt; Box&lt;dyn ConfigValue&gt;;\n}\n\nimpl&lt;T: Any + fmt::Debug + Clone&gt; ConfigValue for T {\n    fn as_any(&amp;self) -&gt; &amp;dyn Any {\n        self\n    }\n\n    fn clone_box(&amp;self) -&gt; Box&lt;dyn ConfigValue&gt; {\n        Box::new(self.clone())\n    }\n}\n\n// \u8a2d\u5b9a\u30a8\u30f3\u30c8\u30ea\n#[derive(Debug, Clone)]\nstruct ConfigEntry {\n    value: Box&lt;dyn ConfigValue&gt;,\n    description: String,\n    required: bool,\n}\n\nimpl ConfigEntry {\n    fn new&lt;T: ConfigValue&gt;(value: T, description: &amp;str, required: bool) -&gt; Self {\n        ConfigEntry {\n            value: Box::new(value),\n            description: description.to_string(),\n            required,\n        }\n    }\n}\n\n// \u8a2d\u5b9a\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0\nstruct ConfigManager {\n    configs: HashMap&lt;String, ConfigEntry&gt;,\n    defaults: HashMap&lt;String, Box&lt;dyn ConfigValue&gt;&gt;,\n}\n\nimpl ConfigManager {\n    fn new() -&gt; Self {\n        ConfigManager {\n            configs: HashMap::new(),\n            defaults: HashMap::new(),\n        }\n    }\n\n    // \u8a2d\u5b9a\u5024\u306e\u767b\u9332\n    fn set&lt;T: ConfigValue&gt;(&amp;mut self, key: &amp;str, value: T, description: &amp;str, required: bool) -&gt; Result&lt;(), String&gt; {\n        // \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\n        value.validate()?;\n\n        let entry = ConfigEntry::new(value, description, required);\n        self.configs.insert(key.to_string(), entry);\n        Ok(())\n    }\n\n    // \u8a2d\u5b9a\u5024\u306e\u53d6\u5f97\n    fn get&lt;T: ConfigValue&gt;(&amp;self, key: &amp;str) -&gt; Result&lt;T, String&gt; {\n        let entry = self.configs.get(key)\n            .or_else(|| {\n                // \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u78ba\u8a8d\n                if let Some(default) = self.defaults.get(key) {\n                    Some(&amp;ConfigEntry {\n                        value: default.clone_box(),\n                        description: \\\"Default value\\\".to_string(),\n                        required: false,\n                    })\n                } else {\n                    None\n                }\n            })\n            .ok_or_else(|| format!(\\\"\u8a2d\u5b9a '{}' \u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\\\", key))?;\n\n        entry.value.as_any()\n            .downcast_ref::&lt;T&gt;()\n            .ok_or_else(|| format!(\\\"\u8a2d\u5b9a '{}' \u306e\u578b\u304c\u4e00\u81f4\u3057\u307e\u305b\u3093\\\", key))?\n            .clone()\n            .validate()\n            .map_err(|e| format!(\\\"\u8a2d\u5b9a '{}' \u306e\u691c\u8a3c\u30a8\u30e9\u30fc: {}\\\", key, e))?;\n\n        Ok(entry.value.as_any()\n            .downcast_ref::&lt;T&gt;()\n            .unwrap()\n            .clone())\n    }\n\n    // \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306e\u8a2d\u5b9a\n    fn set_default&lt;T: ConfigValue&gt;(&amp;mut self, key: &amp;str, value: T) {\n        self.defaults.insert(key.to_string(), Box::new(value));\n    }\n\n    // \u8a2d\u5b9a\u306e\u5b58\u5728\u78ba\u8a8d\n    fn exists(&amp;self, key: &amp;str) -&gt; bool {\n        self.configs.contains_key(key) || self.defaults.contains_key(key)\n    }\n\n    // \u8a2d\u5b9a\u306e\u524a\u9664\n    fn remove(&amp;mut self, key: &amp;str) -&gt; Result&lt;(), String&gt; {\n        let entry = self.configs.get(key)\n            .ok_or_else(|| format!(\\\"\u8a2d\u5b9a '{}' \u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\\\", key))?;\n\n        if entry.required {\n            return Err(format!(\\\"\u5fc5\u9808\u8a2d\u5b9a '{}' \u306f\u524a\u9664\u3067\u304d\u307e\u305b\u3093\\\", key));\n        }\n\n        self.configs.remove(key);\n        Ok(())\n    }\n\n    // \u5168\u8a2d\u5b9a\u306e\u691c\u8a3c\n    fn validate_all(&amp;self) -&gt; Result&lt;(), Vec&lt;String&gt;&gt; {\n        let mut errors = Vec::new();\n\n        for (key, entry) in &amp;self.configs {\n            if let Err(e) = entry.value.validate() {\n                errors.push(format!(\\\"{}: {}\\\", key, e));\n            }\n        }\n\n        if errors.is_empty() {\n            Ok(())\n        } else {\n            Err(errors)\n        }\n    }\n\n    // \u8a2d\u5b9a\u4e00\u89a7\u306e\u53d6\u5f97\n    fn list_configs(&amp;self) -&gt; Vec&lt;(String, String, bool)&gt; {\n        self.configs.iter()\n            .map(|(key, entry)| {\n                (key.clone(), entry.description.clone(), entry.required)\n            })\n            .collect()\n    }\n\n    // \u578b\u5225\u8a2d\u5b9a\u53d6\u5f97\n    fn get_configs_of_type&lt;T: ConfigValue&gt;(&amp;self) -&gt; HashMap&lt;String, T&gt; {\n        let mut result = HashMap::new();\n        let type_id = TypeId::of::&lt;T&gt;();\n\n        for (key, entry) in &amp;self.configs {\n            if entry.value.as_any().type_id() == type_id {\n                if let Some(value) = entry.value.as_any().downcast_ref::&lt;T&gt;() {\n                    result.insert(key.clone(), value.clone());\n                }\n            }\n        }\n\n        result\n    }\n\n    // \u8a2d\u5b9a\u306e\u30a8\u30af\u30b9\u30dd\u30fc\u30c8\uff08\u7c21\u6613\u7248\uff09\n    fn export_config(&amp;self) -&gt; String {\n        let mut output = String::from(\\\"# \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\\\\n\\\\n\\\");\n\n        for (key, entry) in &amp;self.configs {\n            output.push_str(&amp;format!(\\\"# {}\\\\n\\\", entry.description));\n            output.push_str(&amp;format!(\\\"# \u5fc5\u9808: {}\\\\n\\\", entry.required));\n            output.push_str(&amp;format!(\\\"{} = {:?}\\\\n\\\\n\\\", key, entry.value));\n        }\n\n        output\n    }\n}\n\nimpl fmt::Debug for ConfigManager {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        write!(f, \\\"ConfigManager {{ configs: {} entries }}\\\", self.configs.len())\n    }\n}\n\n// \u30ab\u30b9\u30bf\u30e0\u8a2d\u5b9a\u578b\u306e\u4f8b\n#[derive(Debug, Clone, PartialEq)]\nstruct PowerSettings {\n    max_power: i32,\n    regeneration_rate: f64,\n    power_type: String,\n}\n\nimpl PowerSettings {\n    fn new(max_power: i32, regeneration_rate: f64, power_type: &amp;str) -&gt; Self {\n        PowerSettings {\n            max_power,\n            regeneration_rate,\n            power_type: power_type.to_string(),\n        }\n    }\n}\n\nimpl ConfigValue for PowerSettings {\n    fn validate(&amp;self) -&gt; Result&lt;(), String&gt; {\n        if self.max_power &lt;= 0 {\n            return Err(\\\"\u6700\u5927\u546a\u529b\u306f\u6b63\u306e\u5024\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\\\".to_string());\n        }\n\n        if self.regeneration_rate &lt; 0.0 || self.regeneration_rate &gt; 1.0 {\n            return Err(\\\"\u56de\u5fa9\u7387\u306f0.0\u304b\u30891.0\u306e\u9593\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\\\".to_string());\n        }\n\n        let valid_types = [\\\"\u7269\u7406\\\", \\\"\u546a\u8853\\\", \\\"\u7279\u6b8a\\\"];\n        if !valid_types.contains(&amp;self.power_type.as_str()) {\n            return Err(format!(\\\"\u7121\u52b9\u306a\u546a\u529b\u30bf\u30a4\u30d7: {}\u3002\u6709\u52b9: {:?}\\\",\n                             self.power_type, valid_types));\n        }\n\n        Ok(())\n    }\n\n    fn as_any(&amp;self) -&gt; &amp;dyn Any {\n        self\n    }\n\n    fn clone_box(&amp;self) -&gt; Box&lt;dyn ConfigValue&gt; {\n        Box::new(self.clone())\n    }\n}\n\n// \u691c\u8a3c\u4ed8\u304d\u306e\u6570\u5024\u578b\n#[derive(Debug, Clone, PartialEq)]\nstruct ValidatedInt {\n    value: i32,\n    min: i32,\n    max: i32,\n}\n\nimpl ValidatedInt {\n    fn new(value: i32, min: i32, max: i32) -&gt; Self {\n        ValidatedInt { value, min, max }\n    }\n}\n\nimpl ConfigValue for ValidatedInt {\n    fn validate(&amp;self) -&gt; Result&lt;(), String&gt; {\n        if self.value &lt; self.min || self.value &gt; self.max {\n            Err(format!(\\\"\u5024{}\u306f\u7bc4\u56f2{}..{}\u3092\u8d85\u3048\u3066\u3044\u307e\u3059\\\",\n                       self.value, self.min, self.max))\n        } else {\n            Ok(())\n        }\n    }\n\n    fn as_any(&amp;self) -&gt; &amp;dyn Any {\n        self\n    }\n\n    fn clone_box(&amp;self) -&gt; Box&lt;dyn ConfigValue&gt; {\n        Box::new(self.clone())\n    }\n}\n\nfn main() {\n    println!(\\\"=== \u578b\u5b89\u5168\u8a2d\u5b9a\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0 ===\\\");\n\n    let mut config = ConfigManager::new();\n\n    // \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306e\u8a2d\u5b9a\n    config.set_default(\\\"debug_mode\\\", false);\n    config.set_default(\\\"max_connections\\\", 100i32);\n    config.set_default(\\\"timeout\\\", 30.0f64);\n\n    // \u57fa\u672c\u8a2d\u5b9a\u306e\u767b\u9332\n    config.set(\\\"debug_mode\\\", true, \\\"\u30c7\u30d0\u30c3\u30b0\u30e2\u30fc\u30c9\u306e\u6709\u52b9/\u7121\u52b9\\\", false).unwrap();\n    config.set(\\\"max_connections\\\", 200i32, \\\"\u6700\u5927\u63a5\u7d9a\u6570\\\", true).unwrap();\n    config.set(\\\"server_name\\\", \\\"\u546a\u8853\u9ad8\u5c02\u30b5\u30fc\u30d0\u30fc\\\".to_string(), \\\"\u30b5\u30fc\u30d0\u30fc\u540d\\\", true).unwrap();\n    config.set(\\\"timeout\\\", 45.5f64, \\\"\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\uff08\u79d2\uff09\\\", false).unwrap();\n\n    // \u30ab\u30b9\u30bf\u30e0\u8a2d\u5b9a\u578b\u306e\u767b\u9332\n    let power_config = PowerSettings::new(3000, 0.1, \\\"\u546a\u8853\\\");\n    config.set(\\\"gojo_power\\\", power_config, \\\"\u4e94\u6761\u609f\u306e\u546a\u529b\u8a2d\u5b9a\\\", true).unwrap();\n\n    let validated_level = ValidatedInt::new(10, 1, 100);\n    config.set(\\\"player_level\\\", validated_level, \\\"\u30d7\u30ec\u30a4\u30e4\u30fc\u30ec\u30d9\u30eb\uff081-100\uff09\\\", false).unwrap();\n\n    // \u8a2d\u5b9a\u5024\u306e\u53d6\u5f97\n    println!(\\\"=== \u8a2d\u5b9a\u5024\u306e\u53d6\u5f97 ===\\\");\n\n    let debug: bool = config.get(\\\"debug_mode\\\").unwrap();\n    println!(\\\"\u30c7\u30d0\u30c3\u30b0\u30e2\u30fc\u30c9: {}\\\", debug);\n\n    let max_conn: i32 = config.get(\\\"max_connections\\\").unwrap();\n    println!(\\\"\u6700\u5927\u63a5\u7d9a\u6570: {}\\\", max_conn);\n\n    let server_name: String = config.get(\\\"server_name\\\").unwrap();\n    println!(\\\"\u30b5\u30fc\u30d0\u30fc\u540d: {}\\\", server_name);\n\n    let gojo_power: PowerSettings = config.get(\\\"gojo_power\\\").unwrap();\n    println!(\\\"\u4e94\u6761\u609f\u306e\u546a\u529b\u8a2d\u5b9a: {:?}\\\", gojo_power);\n\n    // \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306e\u53d6\u5f97\u30c6\u30b9\u30c8\n    let default_timeout: f64 = config.get(\\\"default_timeout\\\").unwrap_or(60.0);\n    println!(\\\"\u30c7\u30d5\u30a9\u30eb\u30c8\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8: {}\\\", default_timeout);\n\n    println!();\n\n    // \u8a2d\u5b9a\u4e00\u89a7\n    println!(\\\"=== \u8a2d\u5b9a\u4e00\u89a7 ===\\\");\n    for (key, description, required) in config.list_configs() {\n        let req_mark = if required { \\\"[\u5fc5\u9808]\\\" } else { \\\"[\u4efb\u610f]\\\" };\n        println!(\\\"{} {}: {}\\\", req_mark, key, description);\n    }\n\n    println!();\n\n    // \u578b\u5225\u8a2d\u5b9a\u53d6\u5f97\n    println!(\\\"=== \u6574\u6570\u578b\u8a2d\u5b9a ===\\\");\n    let int_configs: HashMap&lt;String, i32&gt; = config.get_configs_of_type();\n    for (key, value) in int_configs {\n        println!(\\\"{}: {}\\\", key, value);\n    }\n\n    println!();\n\n    // \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c6\u30b9\u30c8\n    println!(\\\"=== \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30c6\u30b9\u30c8 ===\\\");\n\n    // \u7121\u52b9\u306a\u8a2d\u5b9a\u306e\u767b\u9332\u3092\u8a66\u884c\n    let invalid_power = PowerSettings::new(-100, 1.5, \\\"\u7121\u52b9\u30bf\u30a4\u30d7\\\");\n    match config.set(\\\"invalid_power\\\", invalid_power, \\\"\u7121\u52b9\u306a\u546a\u529b\u8a2d\u5b9a\\\", false) {\n        Ok(_) =&gt; println!(\\\"\u7121\u52b9\u8a2d\u5b9a\u304c\u767b\u9332\u3055\u308c\u307e\u3057\u305f\uff08\u4e88\u671f\u3057\u306a\u3044\uff09\\\"),\n        Err(e) =&gt; println!(\\\"\u4e88\u671f\u3055\u308c\u305f\u30a8\u30e9\u30fc: {}\\\", e),\n    }\n\n    let invalid_level = ValidatedInt::new(150, 1, 100);\n    match config.set(\\\"invalid_level\\\", invalid_level, \\\"\u7121\u52b9\u30ec\u30d9\u30eb\\\", false) {\n        Ok(_) =&gt; println!(\\\"\u7121\u52b9\u30ec\u30d9\u30eb\u304c\u767b\u9332\u3055\u308c\u307e\u3057\u305f\uff08\u4e88\u671f\u3057\u306a\u3044\uff09\\\"),\n        Err(e) =&gt; println!(\\\"\u4e88\u671f\u3055\u308c\u305f\u30a8\u30e9\u30fc: {}\\\", e),\n    }\n\n    // \u5168\u8a2d\u5b9a\u306e\u691c\u8a3c\n    match config.validate_all() {\n        Ok(_) =&gt; println!(\\\"\u2713 \u5168\u8a2d\u5b9a\u304c\u6709\u52b9\u3067\u3059\\\"),\n        Err(errors) =&gt; {\n            println!(\\\"\u2717 \u8a2d\u5b9a\u30a8\u30e9\u30fc:\\\");\n            for error in errors {\n                println!(\\\"  {}\\\", error);\n            }\n        }\n    }\n\n    println!();\n\n    // \u8a2d\u5b9a\u306e\u30a8\u30af\u30b9\u30dd\u30fc\u30c8\n    println!(\\\"=== \u8a2d\u5b9a\u30a8\u30af\u30b9\u30dd\u30fc\u30c8 ===\\\");\n    println!(\\\"{}\\\", config.export_config());\n\n    // \u578b\u5b89\u5168\u6027\u306e\u30c6\u30b9\u30c8\n    println!(\\\"=== \u578b\u5b89\u5168\u6027\u30c6\u30b9\u30c8 ===\\\");\n\n    // \u6b63\u3057\u3044\u578b\u3067\u306e\u53d6\u5f97\n    match config.get::&lt;bool&gt;(\\\"debug_mode\\\") {\n        Ok(value) =&gt; println!(\\\"\u2713 bool\u53d6\u5f97\u6210\u529f: {}\\\", value),\n        Err(e) =&gt; println!(\\\"\u2717 bool\u53d6\u5f97\u5931\u6557: {}\\\", e),\n    }\n\n    // \u9593\u9055\u3063\u305f\u578b\u3067\u306e\u53d6\u5f97\n    match config.get::&lt;String&gt;(\\\"debug_mode\\\") {\n        Ok(value) =&gt; println!(\\\"\u2713 String\u53d6\u5f97\u6210\u529f: {}\\\", value),\n        Err(e) =&gt; println!(\\\"\u2717 \u4e88\u671f\u3055\u308c\u305f\u30a8\u30e9\u30fc: {}\\\", e),\n    }\n\n    // \u5b58\u5728\u3057\u306a\u3044\u8a2d\u5b9a\u306e\u53d6\u5f97\n    match config.get::&lt;i32&gt;(\\\"nonexistent\\\") {\n        Ok(value) =&gt; println!(\\\"\u2713 \u5b58\u5728\u3057\u306a\u3044\u8a2d\u5b9a\u53d6\u5f97: {}\\\", value),\n        Err(e) =&gt; println!(\\\"\u2717 \u4e88\u671f\u3055\u308c\u305f\u30a8\u30e9\u30fc: {}\\\", e),\n    }\n\n    println!(\\\"\\\\n=== \u8a2d\u5b9a\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0\u30c6\u30b9\u30c8\u5b8c\u4e86 ===\\\");\n}\n</code></pre>"},{"location":"chapter04/exercises/#-_2","title":"\u4e0a\u7d1a\u7de8 - \u9ad8\u5ea6\u306a\u30c8\u30ec\u30a4\u30c8\u5fdc\u7528","text":""},{"location":"chapter04/exercises/#5","title":"\u554f\u984c5: \u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30e9\u30a4\u30d6\u30e9\u30ea","text":"<p>\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u6982\u5ff5\u3092\u53d6\u308a\u5165\u308c\u305f\u6c4e\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5b9f\u88c5\u305b\u3088\u3002</p> <pre><code>// \u4ee5\u4e0b\u306e\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u6982\u5ff5\u3092\u5b9f\u88c5\u305b\u3088\uff1a\n// 1. Functor\uff08\u30de\u30c3\u30d7\u53ef\u80fd\uff09\n// 2. Applicative\uff08\u9069\u7528\u53ef\u80fd\uff09\n// 3. Monad\uff08\u30e2\u30ca\u30c9\uff09\n// 4. Foldable\uff08\u7573\u307f\u8fbc\u307f\u53ef\u80fd\uff09\n// 5. Traversable\uff08\u8d70\u67fb\u53ef\u80fd\uff09\n\n// \u3053\u308c\u3089\u306e\u30c8\u30ec\u30a4\u30c8\u3092\u5b9a\u7fa9\u3057\u3001\u9069\u5207\u306a\u578b\u306b\u5b9f\u88c5\u305b\u3088\n</code></pre> \u89e3\u7b54\u3092\u898b\u308b <pre><code>// Functor trait - map\u64cd\u4f5c\u304c\u53ef\u80fd\ntrait Functor&lt;A&gt; {\n    type Output&lt;B&gt;;\n\n    fn map&lt;B, F&gt;(self, f: F) -&gt; Self::Output&lt;B&gt;\n    where\n        F: FnOnce(A) -&gt; B;\n}\n\n// Applicative trait - \u95a2\u6570\u306e\u9069\u7528\u304c\u53ef\u80fd\ntrait Applicative&lt;A&gt;: Functor&lt;A&gt; {\n    fn pure(value: A) -&gt; Self;\n\n    fn apply&lt;B, F&gt;(self, f: Self::Output&lt;F&gt;) -&gt; Self::Output&lt;B&gt;\n    where\n        F: FnOnce(A) -&gt; B;\n}\n\n// Monad trait - flat_map\u64cd\u4f5c\u304c\u53ef\u80fd\ntrait Monad&lt;A&gt;: Applicative&lt;A&gt; {\n    fn flat_map&lt;B, F&gt;(self, f: F) -&gt; Self::Output&lt;B&gt;\n    where\n        F: FnOnce(A) -&gt; Self::Output&lt;B&gt;;\n\n    fn and_then&lt;B, F&gt;(self, f: F) -&gt; Self::Output&lt;B&gt;\n    where\n        F: FnOnce(A) -&gt; Self::Output&lt;B&gt;,\n    {\n        self.flat_map(f)\n    }\n}\n\n// Foldable trait - \u7573\u307f\u8fbc\u307f\u64cd\u4f5c\u304c\u53ef\u80fd\ntrait Foldable&lt;A&gt; {\n    fn fold&lt;B, F&gt;(self, init: B, f: F) -&gt; B\n    where\n        F: Fn(B, A) -&gt; B;\n\n    fn fold_right&lt;B, F&gt;(self, init: B, f: F) -&gt; B\n    where\n        F: Fn(A, B) -&gt; B;\n\n    fn reduce&lt;F&gt;(self, f: F) -&gt; Option&lt;A&gt;\n    where\n        F: Fn(A, A) -&gt; A;\n}\n\n// Traversable trait - \u69cb\u9020\u3092\u4fdd\u6301\u3057\u305f\u8d70\u67fb\u304c\u53ef\u80fd\ntrait Traversable&lt;A&gt;: Functor&lt;A&gt; + Foldable&lt;A&gt; {\n    fn traverse&lt;B, F, M&gt;(self, f: F) -&gt; M\n    where\n        F: Fn(A) -&gt; M,\n        M: Monad&lt;B&gt;;\n}\n\n// Maybe\u578b\u306e\u5b9f\u88c5\uff08Option\u98a8\uff09\n#[derive(Debug, Clone, PartialEq)]\nenum Maybe&lt;T&gt; {\n    Just(T),\n    Nothing,\n}\n\nimpl&lt;T&gt; Maybe&lt;T&gt; {\n    fn is_just(&amp;self) -&gt; bool {\n        matches!(self, Maybe::Just(_))\n    }\n\n    fn is_nothing(&amp;self) -&gt; bool {\n        matches!(self, Maybe::Nothing)\n    }\n\n    fn unwrap_or(self, default: T) -&gt; T {\n        match self {\n            Maybe::Just(value) =&gt; value,\n            Maybe::Nothing =&gt; default,\n        }\n    }\n\n    fn filter&lt;F&gt;(self, predicate: F) -&gt; Maybe&lt;T&gt;\n    where\n        F: FnOnce(&amp;T) -&gt; bool,\n    {\n        match self {\n            Maybe::Just(ref value) if predicate(value) =&gt; self,\n            _ =&gt; Maybe::Nothing,\n        }\n    }\n}\n\nimpl&lt;A&gt; Functor&lt;A&gt; for Maybe&lt;A&gt; {\n    type Output&lt;B&gt; = Maybe&lt;B&gt;;\n\n    fn map&lt;B, F&gt;(self, f: F) -&gt; Self::Output&lt;B&gt;\n    where\n        F: FnOnce(A) -&gt; B,\n    {\n        match self {\n            Maybe::Just(value) =&gt; Maybe::Just(f(value)),\n            Maybe::Nothing =&gt; Maybe::Nothing,\n        }\n    }\n}\n\nimpl&lt;A&gt; Applicative&lt;A&gt; for Maybe&lt;A&gt; {\n    fn pure(value: A) -&gt; Self {\n        Maybe::Just(value)\n    }\n\n    fn apply&lt;B, F&gt;(self, f: Self::Output&lt;F&gt;) -&gt; Self::Output&lt;B&gt;\n    where\n        F: FnOnce(A) -&gt; B,\n    {\n        match (self, f) {\n            (Maybe::Just(value), Maybe::Just(func)) =&gt; Maybe::Just(func(value)),\n            _ =&gt; Maybe::Nothing,\n        }\n    }\n}\n\nimpl&lt;A&gt; Monad&lt;A&gt; for Maybe&lt;A&gt; {\n    fn flat_map&lt;B, F&gt;(self, f: F) -&gt; Self::Output&lt;B&gt;\n    where\n        F: FnOnce(A) -&gt; Self::Output&lt;B&gt;,\n    {\n        match self {\n            Maybe::Just(value) =&gt; f(value),\n            Maybe::Nothing =&gt; Maybe::Nothing,\n        }\n    }\n}\n\nimpl&lt;A&gt; Foldable&lt;A&gt; for Maybe&lt;A&gt; {\n    fn fold&lt;B, F&gt;(self, init: B, f: F) -&gt; B\n    where\n        F: Fn(B, A) -&gt; B,\n    {\n        match self {\n            Maybe::Just(value) =&gt; f(init, value),\n            Maybe::Nothing =&gt; init,\n        }\n    }\n\n    fn fold_right&lt;B, F&gt;(self, init: B, f: F) -&gt; B\n    where\n        F: Fn(A, B) -&gt; B,\n    {\n        match self {\n            Maybe::Just(value) =&gt; f(value, init),\n            Maybe::Nothing =&gt; init,\n        }\n    }\n\n    fn reduce&lt;F&gt;(self, _f: F) -&gt; Option&lt;A&gt;\n    where\n        F: Fn(A, A) -&gt; A,\n    {\n        match self {\n            Maybe::Just(value) =&gt; Some(value),\n            Maybe::Nothing =&gt; None,\n        }\n    }\n}\n\n// List\u578b\u306e\u5b9f\u88c5\n#[derive(Debug, Clone, PartialEq)]\nstruct List&lt;T&gt; {\n    items: Vec&lt;T&gt;,\n}\n\nimpl&lt;T&gt; List&lt;T&gt; {\n    fn new() -&gt; Self {\n        List { items: Vec::new() }\n    }\n\n    fn from_vec(items: Vec&lt;T&gt;) -&gt; Self {\n        List { items }\n    }\n\n    fn push(&amp;mut self, item: T) {\n        self.items.push(item);\n    }\n\n    fn len(&amp;self) -&gt; usize {\n        self.items.len()\n    }\n\n    fn is_empty(&amp;self) -&gt; bool {\n        self.items.is_empty()\n    }\n\n    fn head(&amp;self) -&gt; Maybe&lt;&amp;T&gt; {\n        match self.items.first() {\n            Some(item) =&gt; Maybe::Just(item),\n            None =&gt; Maybe::Nothing,\n        }\n    }\n\n    fn tail(&amp;self) -&gt; List&lt;T&gt;\n    where\n        T: Clone,\n    {\n        if self.items.len() &lt;= 1 {\n            List::new()\n        } else {\n            List::from_vec(self.items[1..].to_vec())\n        }\n    }\n}\n\nimpl&lt;A&gt; Functor&lt;A&gt; for List&lt;A&gt; {\n    type Output&lt;B&gt; = List&lt;B&gt;;\n\n    fn map&lt;B, F&gt;(self, f: F) -&gt; Self::Output&lt;B&gt;\n    where\n        F: FnOnce(A) -&gt; B,\n    {\n        // FnOnce\u306f\u4e00\u5ea6\u3057\u304b\u547c\u3079\u306a\u3044\u306e\u3067\u3001\u30d9\u30af\u30bf\u30fc\u306e\u5404\u8981\u7d20\u306b\u9069\u7528\u3059\u308b\u305f\u3081\u306b\u30af\u30ed\u30fc\u30b8\u30e3\u3092\u4f5c\u308b\n        let mut result = Vec::new();\n        let mut f = Some(f);\n\n        for (i, item) in self.items.into_iter().enumerate() {\n            if i == 0 {\n                if let Some(func) = f.take() {\n                    result.push(func(item));\n                }\n            } else {\n                // \u6700\u521d\u306e\u8981\u7d20\u4ee5\u964d\u306f\u540c\u3058\u5909\u63db\u3092\u9069\u7528\uff08\u5b9f\u969b\u306b\u306fFn\u3067\u306f\u306a\u304fFnOnce\u306a\u306e\u3067\u5236\u9650\u3042\u308a\uff09\n                break;\n            }\n        }\n\n        List::from_vec(result)\n    }\n}\n\n// \u3088\u308a\u5b9f\u7528\u7684\u306a\u30de\u30c3\u30d7\u5b9f\u88c5\nimpl&lt;T&gt; List&lt;T&gt; {\n    fn map_fn&lt;U, F&gt;(&amp;self, f: F) -&gt; List&lt;U&gt;\n    where\n        F: Fn(&amp;T) -&gt; U,\n    {\n        let mapped_items: Vec&lt;U&gt; = self.items.iter().map(f).collect();\n        List::from_vec(mapped_items)\n    }\n\n    fn flat_map_fn&lt;U, F&gt;(&amp;self, f: F) -&gt; List&lt;U&gt;\n    where\n        F: Fn(&amp;T) -&gt; List&lt;U&gt;,\n    {\n        let mut result = Vec::new();\n        for item in &amp;self.items {\n            result.extend(f(item).items);\n        }\n        List::from_vec(result)\n    }\n\n    fn filter&lt;F&gt;(&amp;self, predicate: F) -&gt; List&lt;T&gt;\n    where\n        F: Fn(&amp;T) -&gt; bool,\n        T: Clone,\n    {\n        let filtered_items: Vec&lt;T&gt; = self.items.iter()\n            .filter(|item| predicate(item))\n            .cloned()\n            .collect();\n        List::from_vec(filtered_items)\n    }\n}\n\nimpl&lt;A&gt; Foldable&lt;A&gt; for List&lt;A&gt; {\n    fn fold&lt;B, F&gt;(self, init: B, f: F) -&gt; B\n    where\n        F: Fn(B, A) -&gt; B,\n    {\n        self.items.into_iter().fold(init, f)\n    }\n\n    fn fold_right&lt;B, F&gt;(self, init: B, f: F) -&gt; B\n    where\n        F: Fn(A, B) -&gt; B,\n    {\n        self.items.into_iter().rev().fold(init, |acc, x| f(x, acc))\n    }\n\n    fn reduce&lt;F&gt;(self, f: F) -&gt; Option&lt;A&gt;\n    where\n        F: Fn(A, A) -&gt; A,\n    {\n        self.items.into_iter().reduce(f)\n    }\n}\n\n// Either\u578b\u306e\u5b9f\u88c5\uff08Result\u98a8\uff09\n#[derive(Debug, Clone, PartialEq)]\nenum Either&lt;L, R&gt; {\n    Left(L),\n    Right(R),\n}\n\nimpl&lt;L, R&gt; Either&lt;L, R&gt; {\n    fn is_left(&amp;self) -&gt; bool {\n        matches!(self, Either::Left(_))\n    }\n\n    fn is_right(&amp;self) -&gt; bool {\n        matches!(self, Either::Right(_))\n    }\n\n    fn left(self) -&gt; Option&lt;L&gt; {\n        match self {\n            Either::Left(value) =&gt; Some(value),\n            Either::Right(_) =&gt; None,\n        }\n    }\n\n    fn right(self) -&gt; Option&lt;R&gt; {\n        match self {\n            Either::Left(_) =&gt; None,\n            Either::Right(value) =&gt; Some(value),\n        }\n    }\n}\n\nimpl&lt;L, A&gt; Functor&lt;A&gt; for Either&lt;L, A&gt; {\n    type Output&lt;B&gt; = Either&lt;L, B&gt;;\n\n    fn map&lt;B, F&gt;(self, f: F) -&gt; Self::Output&lt;B&gt;\n    where\n        F: FnOnce(A) -&gt; B,\n    {\n        match self {\n            Either::Left(left) =&gt; Either::Left(left),\n            Either::Right(right) =&gt; Either::Right(f(right)),\n        }\n    }\n}\n\nimpl&lt;L, A&gt; Applicative&lt;A&gt; for Either&lt;L, A&gt; {\n    fn pure(value: A) -&gt; Self {\n        Either::Right(value)\n    }\n\n    fn apply&lt;B, F&gt;(self, f: Self::Output&lt;F&gt;) -&gt; Self::Output&lt;B&gt;\n    where\n        F: FnOnce(A) -&gt; B,\n    {\n        match (self, f) {\n            (Either::Right(value), Either::Right(func)) =&gt; Either::Right(func(value)),\n            (Either::Left(left), _) =&gt; Either::Left(left),\n            (_, Either::Left(left)) =&gt; Either::Left(left),\n        }\n    }\n}\n\nimpl&lt;L, A&gt; Monad&lt;A&gt; for Either&lt;L, A&gt; {\n    fn flat_map&lt;B, F&gt;(self, f: F) -&gt; Self::Output&lt;B&gt;\n    where\n        F: FnOnce(A) -&gt; Self::Output&lt;B&gt;,\n    {\n        match self {\n            Either::Left(left) =&gt; Either::Left(left),\n            Either::Right(right) =&gt; f(right),\n        }\n    }\n}\n\n// \u5b9f\u7528\u7684\u306a\u95a2\u6570\u578b\u64cd\u4f5c\nfn compose&lt;A, B, C, F, G&gt;(f: F, g: G) -&gt; impl Fn(A) -&gt; C\nwhere\n    F: Fn(A) -&gt; B,\n    G: Fn(B) -&gt; C,\n{\n    move |x| g(f(x))\n}\n\nfn curry&lt;A, B, C, F&gt;(f: F) -&gt; impl Fn(A) -&gt; Box&lt;dyn Fn(B) -&gt; C&gt;\nwhere\n    F: Fn(A, B) -&gt; C + 'static,\n{\n    move |a| Box::new(move |b| f(a, b))\n}\n\n// \u546a\u8853\u30b7\u30b9\u30c6\u30e0\u3067\u306e\u5fdc\u7528\u4f8b\n#[derive(Debug, Clone)]\nstruct Sorcerer {\n    name: String,\n    power: i32,\n    techniques: Vec&lt;String&gt;,\n}\n\nimpl Sorcerer {\n    fn new(name: &amp;str, power: i32) -&gt; Self {\n        Sorcerer {\n            name: name.to_string(),\n            power,\n            techniques: Vec::new(),\n        }\n    }\n\n    fn add_technique(&amp;mut self, technique: String) {\n        self.techniques.push(technique);\n    }\n\n    fn power_up(&amp;mut self, amount: i32) {\n        self.power += amount;\n    }\n}\n\nfn find_sorcerer(sorcerers: &amp;[Sorcerer], name: &amp;str) -&gt; Maybe&lt;&amp;Sorcerer&gt; {\n    for sorcerer in sorcerers {\n        if sorcerer.name == name {\n            return Maybe::Just(sorcerer);\n        }\n    }\n    Maybe::Nothing\n}\n\nfn validate_power(power: i32) -&gt; Either&lt;String, i32&gt; {\n    if power &gt;= 0 {\n        Either::Right(power)\n    } else {\n        Either::Left(\\\"\u546a\u529b\u306f\u8ca0\u306e\u5024\u306b\u3067\u304d\u307e\u305b\u3093\\\".to_string())\n    }\n}\n\nfn main() {\n    println!(\\\"=== \u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30e9\u30a4\u30d6\u30e9\u30ea ===\\\");\n\n    // Maybe\u578b\u306e\u4f7f\u7528\u4f8b\n    println!(\\\"=== Maybe\u578b\u306e\u4f8b ===\\\");\n\n    let just_value = Maybe::Just(1000);\n    let nothing_value: Maybe&lt;i32&gt; = Maybe::Nothing;\n\n    let doubled = just_value.map(|x| x * 2);\n    let doubled_nothing = nothing_value.map(|x| x * 2);\n\n    println!(\\\"Just(1000) * 2 = {:?}\\\", doubled);\n    println!(\\\"Nothing * 2 = {:?}\\\", doubled_nothing);\n\n    // \u30e2\u30ca\u30c9\u30c1\u30a7\u30fc\u30f3\u306e\u4f8b\n    let result = Maybe::Just(15)\n        .flat_map(|x| if x &gt; 10 { Maybe::Just(x * 2) } else { Maybe::Nothing })\n        .map(|x| x + 5);\n\n    println!(\\\"\u30e2\u30ca\u30c9\u30c1\u30a7\u30fc\u30f3\u7d50\u679c: {:?}\\\", result);\n\n    // List\u578b\u306e\u4f7f\u7528\u4f8b\n    println!(\\\"\\\\n=== List\u578b\u306e\u4f8b ===\\\");\n\n    let powers = List::from_vec(vec![1000, 1500, 800, 2000]);\n    let doubled_powers = powers.map_fn(|&amp;x| x * 2);\n\n    println!(\\\"\u5143\u306e\u546a\u529b: {:?}\\\", powers);\n    println!(\\\"2\u500d\u306e\u546a\u529b: {:?}\\\", doubled_powers);\n\n    // \u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\n    let high_powers = powers.filter(|&amp;&amp;x| x &gt;= 1500);\n    println!(\\\"\u9ad8\u3044\u546a\u529b\u306e\u307f: {:?}\\\", high_powers);\n\n    // \u7573\u307f\u8fbc\u307f\n    let total_power = powers.clone().fold(0, |acc, x| acc + x);\n    println!(\\\"\u5408\u8a08\u546a\u529b: {}\\\", total_power);\n\n    // Either\u578b\u306e\u4f7f\u7528\u4f8b\n    println!(\\\"\\\\n=== Either\u578b\u306e\u4f8b ===\\\");\n\n    let valid_power = validate_power(1500);\n    let invalid_power = validate_power(-100);\n\n    println!(\\\"\u6709\u52b9\u306a\u546a\u529b: {:?}\\\", valid_power);\n    println!(\\\"\u7121\u52b9\u306a\u546a\u529b: {:?}\\\", invalid_power);\n\n    let processed_valid = valid_power.map(|x| x * 2);\n    let processed_invalid = invalid_power.map(|x| x * 2);\n\n    println!(\\\"\u51e6\u7406\u5f8c\uff08\u6709\u52b9\uff09: {:?}\\\", processed_valid);\n    println!(\\\"\u51e6\u7406\u5f8c\uff08\u7121\u52b9\uff09: {:?}\\\", processed_invalid);\n\n    // \u546a\u8853\u5e2b\u30b7\u30b9\u30c6\u30e0\u3067\u306e\u5fdc\u7528\n    println!(\\\"\\\\n=== \u546a\u8853\u5e2b\u30b7\u30b9\u30c6\u30e0\u3067\u306e\u5fdc\u7528 ===\\\");\n\n    let sorcerers = vec![\n        Sorcerer::new(\\\"\u4e94\u6761\u609f\\\", 3000),\n        Sorcerer::new(\\\"\u864e\u6756\u60a0\u4ec1\\\", 1200),\n        Sorcerer::new(\\\"\u4f0f\u9ed2\u6075\\\", 1000),\n    ];\n\n    // \u546a\u8853\u5e2b\u691c\u7d22\n    let found_sorcerer = find_sorcerer(&amp;sorcerers, \\\"\u4e94\u6761\u609f\\\");\n    let not_found = find_sorcerer(&amp;sorcerers, \\\"\u5b58\u5728\u3057\u306a\u3044\u546a\u8853\u5e2b\\\");\n\n    match found_sorcerer {\n        Maybe::Just(sorcerer) =&gt; println!(\\\"\u898b\u3064\u304b\u3063\u305f: {} (\u546a\u529b: {})\\\", sorcerer.name, sorcerer.power),\n        Maybe::Nothing =&gt; println!(\\\"\u898b\u3064\u304b\u3089\u306a\u3044\\\"),\n    }\n\n    match not_found {\n        Maybe::Just(sorcerer) =&gt; println!(\\\"\u898b\u3064\u304b\u3063\u305f: {} (\u546a\u529b: {})\\\", sorcerer.name, sorcerer.power),\n        Maybe::Nothing =&gt; println!(\\\"\u5b58\u5728\u3057\u306a\u3044\u546a\u8853\u5e2b\u306f\u898b\u3064\u304b\u3089\u306a\u3044\uff08\u5f53\u7136\uff09\\\"),\n    }\n\n    // \u95a2\u6570\u5408\u6210\u306e\u4f8b\n    println!(\\\"\\\\n=== \u95a2\u6570\u5408\u6210\u306e\u4f8b ===\\\");\n\n    let double = |x: i32| x * 2;\n    let add_ten = |x: i32| x + 10;\n    let double_then_add_ten = compose(double, add_ten);\n\n    let result = double_then_add_ten(5);\n    println!(\\\"5\u30922\u500d\u3057\u3066\u304b\u308910\u8db3\u3059: {}\\\", result);  // (5 * 2) + 10 = 20\n\n    // \u30ab\u30ea\u30fc\u5316\u306e\u4f8b\n    let add = |x: i32, y: i32| x + y;\n    let add_curried = curry(add);\n    let add_five = add_curried(5);\n\n    let result = add_five(3);\n    println!(\\\"\u30ab\u30ea\u30fc\u5316\u3055\u308c\u305f\u52a0\u7b97 5 + 3: {}\\\", result);\n\n    // \u30ea\u30b9\u30c8\u306e\u9ad8\u5ea6\u306a\u64cd\u4f5c\n    println!(\\\"\\\\n=== \u30ea\u30b9\u30c8\u306e\u9ad8\u5ea6\u306a\u64cd\u4f5c ===\\\");\n\n    let sorcerer_powers = List::from_vec(vec![3000, 1200, 1000, 800]);\n\n    // \u546a\u529b\u3092\u7b49\u7d1a\u306b\u5909\u63db\n    let grades = sorcerer_powers.map_fn(|&amp;power| {\n        match power {\n            p if p &gt;= 3000 =&gt; \\\"\u7279\u7d1a\\\",\n            p if p &gt;= 2000 =&gt; \\\"1\u7d1a\\\",\n            p if p &gt;= 1000 =&gt; \\\"2\u7d1a\\\",\n            _ =&gt; \\\"3\u7d1a\u4ee5\u4e0b\\\",\n        }\n    });\n\n    println!(\\\"\u546a\u529b\u304b\u3089\u7b49\u7d1a: {:?}\\\", grades);\n\n    // \u5e73\u5747\u546a\u529b\u306e\u8a08\u7b97\n    let total = sorcerer_powers.clone().fold(0, |acc, x| acc + x);\n    let count = sorcerer_powers.len();\n    let average = if count &gt; 0 { total / count as i32 } else { 0 };\n\n    println!(\\\"\u5e73\u5747\u546a\u529b: {}\\\", average);\n\n    println!(\\\"\\\\n=== \u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30e9\u30a4\u30d6\u30e9\u30ea\u30c6\u30b9\u30c8\u5b8c\u4e86 ===\\\");\n}\n</code></pre>"},{"location":"chapter04/exercises/#6-","title":"\u554f\u984c6: \u7dcf\u5408\u554f\u984c - \u546a\u8853\u5b66\u5712\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0","text":"<p>\u3053\u308c\u307e\u3067\u5b66\u3093\u3060\u3059\u3079\u3066\u306e\u6280\u8853\u3092\u7d71\u5408\u3057\u305f\u5927\u898f\u6a21\u30b7\u30b9\u30c6\u30e0\u3092\u5b9f\u88c5\u305b\u3088\u3002</p>   **\u8981\u4ef6:**  - \u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306a\u30c7\u30fc\u30bf\u7ba1\u7406 - \u8907\u6570\u306e\u30c8\u30ec\u30a4\u30c8\u5b9f\u88c5 - \u578b\u5b89\u5168\u306a\u64cd\u4f5c - \u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8981\u7d20 - \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0 - \u8a2d\u5b9a\u7ba1\u7406 - \u6226\u95d8\u30b7\u30b9\u30c6\u30e0 - \u7d71\u8a08\u30fb\u30ec\u30dd\u30fc\u30c8\u6a5f\u80fd  \u81ea\u7531\u306b\u8a2d\u8a08\u3057\u3066\u5b9f\u88c5\u3057\u3066\u307f\u3088\u3046\uff01   \u89e3\u7b54\u4f8b\u3092\u898b\u308b <pre><code>// \uff08\u30b3\u30fc\u30c9\u304c\u975e\u5e38\u306b\u9577\u304f\u306a\u308b\u305f\u3081\u3001\u4e3b\u8981\u90e8\u5206\u306e\u307f\u8868\u793a\uff09\n\nuse std::collections::HashMap;\nuse std::fmt;\nuse std::marker::PhantomData;\n\n// \u57fa\u672c\u7684\u306a\u30c8\u30ec\u30a4\u30c8\u5b9a\u7fa9\ntrait Entity {\n    type Id: Clone + Eq + std::hash::Hash + fmt::Debug;\n\n    fn id(&amp;self) -&gt; &amp;Self::Id;\n    fn name(&amp;self) -&gt; &amp;str;\n    fn entity_type(&amp;self) -&gt; &amp;str;\n}\n\ntrait Manageable: Entity {\n    fn create_date(&amp;self) -&gt; &amp;str;\n    fn last_updated(&amp;self) -&gt; &amp;str;\n    fn update_timestamp(&amp;mut self);\n}\n\n// \u6c4e\u7528\u7684\u306a\u30ea\u30dd\u30b8\u30c8\u30ea\u30b7\u30b9\u30c6\u30e0\n#[derive(Debug)]\nstruct Repository&lt;T: Entity&gt; {\n    entities: HashMap&lt;T::Id, T&gt;,\n    _phantom: PhantomData&lt;T&gt;,\n}\n\nimpl&lt;T: Entity&gt; Repository&lt;T&gt; {\n    fn new() -&gt; Self {\n        Repository {\n            entities: HashMap::new(),\n            _phantom: PhantomData,\n        }\n    }\n\n    fn add(&amp;mut self, entity: T) -&gt; Result&lt;(), String&gt; {\n        let id = entity.id().clone();\n        if self.entities.contains_key(&amp;id) {\n            return Err(format!(\\\"ID {:?} \u306f\u65e2\u306b\u5b58\u5728\u3057\u307e\u3059\\\", id));\n        }\n\n        self.entities.insert(id, entity);\n        Ok(())\n    }\n\n    fn get(&amp;self, id: &amp;T::Id) -&gt; Option&lt;&amp;T&gt; {\n        self.entities.get(id)\n    }\n\n    fn get_mut(&amp;mut self, id: &amp;T::Id) -&gt; Option&lt;&amp;mut T&gt; {\n        self.entities.get_mut(id)\n    }\n\n    fn remove(&amp;mut self, id: &amp;T::Id) -&gt; Option&lt;T&gt; {\n        self.entities.remove(id)\n    }\n\n    fn list_all(&amp;self) -&gt; Vec&lt;&amp;T&gt; {\n        self.entities.values().collect()\n    }\n\n    fn count(&amp;self) -&gt; usize {\n        self.entities.len()\n    }\n}\n\n// \u5b66\u751f\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\n#[derive(Debug, Clone)]\nstruct Student {\n    id: String,\n    name: String,\n    grade: u8,\n    power_level: i32,\n    techniques: Vec&lt;String&gt;,\n    enrollment_date: String,\n    last_updated: String,\n}\n\nimpl Student {\n    fn new(id: &amp;str, name: &amp;str, grade: u8, power_level: i32) -&gt; Self {\n        let now = chrono::Utc::now().to_rfc3339();\n        Student {\n            id: id.to_string(),\n            name: name.to_string(),\n            grade,\n            power_level,\n            techniques: Vec::new(),\n            enrollment_date: now.clone(),\n            last_updated: now,\n        }\n    }\n\n    fn add_technique(&amp;mut self, technique: String) {\n        self.techniques.push(technique);\n        self.update_timestamp();\n    }\n\n    fn power_up(&amp;mut self, amount: i32) {\n        self.power_level += amount;\n        self.update_timestamp();\n    }\n}\n\nimpl Entity for Student {\n    type Id = String;\n\n    fn id(&amp;self) -&gt; &amp;Self::Id {\n        &amp;self.id\n    }\n\n    fn name(&amp;self) -&gt; &amp;str {\n        &amp;self.name\n    }\n\n    fn entity_type(&amp;self) -&gt; &amp;str {\n        \\\"\u5b66\u751f\\\"\n    }\n}\n\nimpl Manageable for Student {\n    fn create_date(&amp;self) -&gt; &amp;str {\n        &amp;self.enrollment_date\n    }\n\n    fn last_updated(&amp;self) -&gt; &amp;str {\n        &amp;self.last_updated\n    }\n\n    fn update_timestamp(&amp;mut self) {\n        self.last_updated = chrono::Utc::now().to_rfc3339();\n    }\n}\n\n// \u5b66\u5712\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0\nstruct JujutsuAcademy {\n    students: Repository&lt;Student&gt;,\n    settings: HashMap&lt;String, Box&lt;dyn std::any::Any&gt;&gt;,\n}\n\nimpl JujutsuAcademy {\n    fn new() -&gt; Self {\n        JujutsuAcademy {\n            students: Repository::new(),\n            settings: HashMap::new(),\n        }\n    }\n\n    fn enroll_student(&amp;mut self, student: Student) -&gt; Result&lt;(), String&gt; {\n        println!(\\\"{}\u3092\u5b66\u5712\u306b\u5165\u5b66\u3055\u305b\u307e\u3059\\\", student.name());\n        self.students.add(student)\n    }\n\n    fn get_student(&amp;self, id: &amp;str) -&gt; Option&lt;&amp;Student&gt; {\n        self.students.get(id)\n    }\n\n    fn get_student_mut(&amp;mut self, id: &amp;str) -&gt; Option&lt;&amp;mut Student&gt; {\n        self.students.get_mut(id)\n    }\n\n    fn generate_report(&amp;self) -&gt; String {\n        let mut report = String::from(\\\"=== \u6771\u4eac\u546a\u8853\u9ad8\u7b49\u5c02\u9580\u5b66\u6821 \u7d71\u8a08\u30ec\u30dd\u30fc\u30c8 ===\\\\n\\\\n\\\");\n\n        let total_students = self.students.count();\n        report.push_str(&amp;format!(\\\"\u7dcf\u5b66\u751f\u6570: {}\\\\n\\\", total_students));\n\n        if total_students &gt; 0 {\n            let all_students = self.students.list_all();\n\n            // \u5b66\u5e74\u5225\u7d71\u8a08\n            let mut grade_stats = HashMap::new();\n            for student in &amp;all_students {\n                *grade_stats.entry(student.grade).or_insert(0) += 1;\n            }\n\n            report.push_str(\\\"\\\\n\u5b66\u5e74\u5225\u5206\u5e03:\\\\n\\\");\n            for (grade, count) in grade_stats {\n                report.push_str(&amp;format!(\\\"  {}\u5e74\u751f: {}\u4eba\\\\n\\\", grade, count));\n            }\n\n            // \u546a\u529b\u7d71\u8a08\n            let total_power: i32 = all_students.iter().map(|s| s.power_level).sum();\n            let avg_power = total_power / all_students.len() as i32;\n            let max_power = all_students.iter().map(|s| s.power_level).max().unwrap_or(0);\n            let min_power = all_students.iter().map(|s| s.power_level).min().unwrap_or(0);\n\n            report.push_str(&amp;format!(\\\"\\\\n\u546a\u529b\u7d71\u8a08:\\\\n\\\"));\n            report.push_str(&amp;format!(\\\"  \u5e73\u5747\u546a\u529b: {}\\\\n\\\", avg_power));\n            report.push_str(&amp;format!(\\\"  \u6700\u5927\u546a\u529b: {}\\\\n\\\", max_power));\n            report.push_str(&amp;format!(\\\"  \u6700\u5c0f\u546a\u529b: {}\\\\n\\\", min_power));\n\n            // \u6700\u5f37\u306e\u5b66\u751f\n            if let Some(strongest) = all_students.iter().max_by_key(|s| s.power_level) {\n                report.push_str(&amp;format!(\\\"\\\\n\u6700\u5f37\u306e\u5b66\u751f: {} (\u546a\u529b: {})\\\\n\\\",\n                               strongest.name(), strongest.power_level));\n            }\n\n            // \u6280\u8853\u7d71\u8a08\n            let total_techniques: usize = all_students.iter()\n                .map(|s| s.techniques.len())\n                .sum();\n\n            report.push_str(&amp;format!(\\\"\\\\n\u7fd2\u5f97\u6e08\u307f\u8853\u5f0f\u7dcf\u6570: {}\\\\n\\\", total_techniques));\n\n            if total_students &gt; 0 {\n                let avg_techniques = total_techniques as f64 / total_students as f64;\n                report.push_str(&amp;format!(\\\"\u5b66\u751f\u3042\u305f\u308a\u5e73\u5747\u8853\u5f0f\u6570: {:.1}\\\\n\\\", avg_techniques));\n            }\n        }\n\n        report\n    }\n}\n\nfn main() {\n    println!(\\\"=== \u546a\u8853\u5b66\u5712\u7dcf\u5408\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0 ===\\\");\n\n    let mut academy = JujutsuAcademy::new();\n\n    // \u5b66\u751f\u306e\u767b\u9332\n    let students_data = [\n        (\\\"S001\\\", \\\"\u4e94\u6761\u609f\\\", 3, 3000),\n        (\\\"S002\\\", \\\"\u864e\u6756\u60a0\u4ec1\\\", 1, 1200),\n        (\\\"S003\\\", \\\"\u4f0f\u9ed2\u6075\\\", 1, 1000),\n        (\\\"S004\\\", \\\"\u91d8\u5d0e\u91ce\u8594\u8587\\\", 1, 900),\n        (\\\"S005\\\", \\\"\u79aa\u9662\u771f\u5e0c\\\", 2, 800),\n        (\\\"S006\\\", \\\"\u72d7\u5dfb\u68d8\\\", 2, 700),\n        (\\\"S007\\\", \\\"\u30d1\u30f3\u30c0\\\", 2, 600),\n    ];\n\n    for (id, name, grade, power) in students_data {\n        let mut student = Student::new(id, name, grade, power);\n\n        // \u8853\u5f0f\u306e\u8ffd\u52a0\n        match name {\n            \\\"\u4e94\u6761\u609f\\\" =&gt; {\n                student.add_technique(\\\"\u7121\u4e0b\u9650\u546a\u8853\\\".to_string());\n                student.add_technique(\\\"\u9818\u57df\u5c55\u958b\u30fb\u7121\u91cf\u7a7a\u51e6\\\".to_string());\n            },\n            \\\"\u864e\u6756\u60a0\u4ec1\\\" =&gt; {\n                student.add_technique(\\\"\u9ed2\u9583\\\".to_string());\n                student.add_technique(\\\"\u767a\u6563\\\".to_string());\n            },\n            \\\"\u4f0f\u9ed2\u6075\\\" =&gt; {\n                student.add_technique(\\\"\u5341\u7a2e\u5f71\u6cd5\u8853\\\".to_string());\n            },\n            \\\"\u91d8\u5d0e\u91ce\u8594\u8587\\\" =&gt; {\n                student.add_technique(\\\"\u82bb\u970a\u546a\u6cd5\\\".to_string());\n            },\n            _ =&gt; {},\n        }\n\n        match academy.enroll_student(student) {\n            Ok(_) =&gt; println!(\\\"\u2713 {}\u306e\u5165\u5b66\u5b8c\u4e86\\\", name),\n            Err(e) =&gt; println!(\\\"\u2717 {}\u306e\u5165\u5b66\u5931\u6557: {}\\\", name, e),\n        }\n    }\n\n    println!();\n\n    // \u5b66\u751f\u60c5\u5831\u306e\u8868\u793a\n    println!(\\\"=== \u767b\u9332\u5b66\u751f\u4e00\u89a7 ===\\\");\n    for student in academy.students.list_all() {\n        println!(\\\"{}: {} ({}\u5e74\u751f, \u546a\u529b: {}, \u8853\u5f0f\u6570: {})\\\",\n                 student.id(), student.name(), student.grade,\n                 student.power_level, student.techniques.len());\n    }\n\n    println!();\n\n    // \u7279\u5b9a\u5b66\u751f\u306e\u8a73\u7d30\u60c5\u5831\n    if let Some(gojo) = academy.get_student(\\\"S001\\\") {\n        println!(\\\"=== {}\u306e\u8a73\u7d30\u60c5\u5831 ===\\\", gojo.name());\n        println!(\\\"\u5b66\u751fID: {}\\\", gojo.id());\n        println!(\\\"\u5b66\u5e74: {}\u5e74\u751f\\\", gojo.grade);\n        println!(\\\"\u546a\u529b: {}\\\", gojo.power_level);\n        println!(\\\"\u7fd2\u5f97\u8853\u5f0f: {:?}\\\", gojo.techniques);\n        println!(\\\"\u5165\u5b66\u65e5: {}\\\", gojo.enrollment_date);\n        println!(\\\"\u6700\u7d42\u66f4\u65b0: {}\\\", gojo.last_updated);\n    }\n\n    println!();\n\n    // \u5b66\u751f\u306e\u6210\u9577\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\n    println!(\\\"=== \u6210\u9577\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3 ===\\\");\n\n    if let Some(yuji) = academy.get_student_mut(\\\"S002\\\") {\n        println!(\\\"{}\u306e\u8a13\u7df4\u524d: \u546a\u529b {}\\\", yuji.name(), yuji.power_level);\n        yuji.power_up(300);\n        yuji.add_technique(\\\"\u7c21\u6613\u9818\u57df\\\".to_string());\n        println!(\\\"{}\u306e\u8a13\u7df4\u5f8c: \u546a\u529b {}, \u65b0\u8853\u5f0f: \u7c21\u6613\u9818\u57df\\\", yuji.name(), yuji.power_level);\n    }\n\n    println!();\n\n    // \u7d71\u8a08\u30ec\u30dd\u30fc\u30c8\u306e\u751f\u6210\n    println!(\\\"{}\\\", academy.generate_report());\n\n    // \u546a\u529b\u30ec\u30d9\u30eb\u5225\u30b0\u30eb\u30fc\u30d7\u5316\n    println!(\\\"=== \u546a\u529b\u30ec\u30d9\u30eb\u5225\u5206\u985e ===\\\");\n\n    let all_students = academy.students.list_all();\n    let mut power_groups: HashMap&lt;&amp;str, Vec&lt;&amp;Student&gt;&gt; = HashMap::new();\n\n    for student in all_students {\n        let group = match student.power_level {\n            3000.. =&gt; \\\"\u6700\u5f37\u7d1a\\\",\n            2000..=2999 =&gt; \\\"\u7279\u7d1a\\\",\n            1500..=1999 =&gt; \\\"1\u7d1a\\\",\n            1000..=1499 =&gt; \\\"2\u7d1a\\\",\n            500..=999 =&gt; \\\"3\u7d1a\\\",\n            _ =&gt; \\\"4\u7d1a\\\",\n        };\n\n        power_groups.entry(group).or_insert_with(Vec::new).push(student);\n    }\n\n    for (group, students) in power_groups {\n        println!(\\\"{}:\\\", group);\n        for student in students {\n            println!(\\\"  {} (\u546a\u529b: {})\\\", student.name(), student.power_level);\n        }\n    }\n\n    println!(\\\"\\\\n=== \u546a\u8853\u5b66\u5712\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0\u5b8c\u4e86 ===\\\");\n}\n\n// \u6ce8\u610f: chrono \u30af\u30ec\u30fc\u30c8\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f Cargo.toml \u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0:\n// [dependencies]\n// chrono = { version = \\\"0.4\\\", features = [\\\"serde\\\"] }\n</code></pre>"},{"location":"chapter04/exercises/#_2","title":"\u7ae0\u672b\u7dcf\u62ec","text":"<p>\u7b2c4\u7ae0\u306e\u7df4\u7fd2\u554f\u984c\u3001\u7d20\u6674\u3089\u3057\u3044\u9818\u57df\u5c55\u958b\u3060\u3063\u305f\uff01\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3068\u30c8\u30ec\u30a4\u30c8\u306e\u5168\u3066\u306e\u6280\u8853\u3092\u5b9f\u8df5\u3067\u78ba\u8a8d\u3067\u304d\u305f\u306a\u3002</p> <p>\u3053\u308c\u3089\u306e\u554f\u984c\u3092\u901a\u3057\u3066\u5b66\u3093\u3060\u3053\u3068\uff1a</p> <ul> <li>\u30b8\u30a7\u30cd\u30ea\u30af\u30b9 - \u578b\u306e\u62bd\u8c61\u5316\u306b\u3088\u308b\u518d\u5229\u7528\u6027</li> <li>\u30c8\u30ec\u30a4\u30c8 - \u632f\u308b\u821e\u3044\u306e\u62bd\u8c61\u5316\u306b\u3088\u308b\u62e1\u5f35\u6027</li> <li>\u9ad8\u5ea6\u306a\u30c8\u30ec\u30a4\u30c8 - \u578b\u30b7\u30b9\u30c6\u30e0\u306e\u9650\u754c\u3078\u306e\u6311\u6226</li> <li>\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 - \u62bd\u8c61\u5316\u306e\u6975\u81f4</li> <li>\u578b\u5b89\u5168\u6027 - \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306e\u5b89\u5168\u6027\u4fdd\u8a3c</li> </ul> <p>\u4e94\u6761\u5148\u751f\u306e\u6700\u7d42\u30e1\u30c3\u30bb\u30fc\u30b8</p> <p>\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3068\u30c8\u30ec\u30a4\u30c8\u306f\u62bd\u8c61\u5316\u306e\u7a76\u6975\u5f62\u3060\u3002\u4e00\u5ea6\u30de\u30b9\u30bf\u30fc\u3059\u308c\u3070\u3001\u3069\u3093\u306a\u8907\u96d1\u306a\u30b7\u30b9\u30c6\u30e0\u3082\u7f8e\u3057\u304f\u8a2d\u8a08\u3067\u304d\u308b\u3002</p> <p>\u4ffa\u306e\u9818\u57df\u5c55\u958b\u300c\u7121\u91cf\u7a7a\u51e6\u300d\u306e\u3088\u3046\u306b\u3001\u7121\u9650\u306e\u53ef\u80fd\u6027\u3092\u5305\u542b\u3059\u308b\u529b\u3092\u624b\u306b\u5165\u308c\u305f\u3002\u3053\u306e\u529b\u3092\u4f7f\u3063\u3066\u3001\u578b\u5b89\u5168\u3067\u518d\u5229\u7528\u53ef\u80fd\u306a\u7f8e\u3057\u3044\u30b3\u30fc\u30c9\u3092\u66f8\u3051\u3002</p> <p>\u6b21\u306f\u7b2c5\u7ae0\u300c\u7121\u4e0b\u9650\u546a\u8853\u7de8\u300d\u3067\u975e\u540c\u671f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3068\u30de\u30af\u30ed\u3092\u5b66\u307c\u3046\u3002\u6700\u5f8c\u306e\u79d8\u5965\u7fa9\u306e\u7fd2\u5f97\u3060\u3002</p> <p>\u300c\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3068\u30c8\u30ec\u30a4\u30c8\u3092\u6975\u3081\u308c\u3070\u3001\u578b\u306e\u6982\u5ff5\u3059\u3089\u81ea\u5728\u306b\u64cd\u308c\u308b\u300d</p>"},{"location":"chapter04/generics/","title":"\u7b2c4\u7ae0\uff1a\u9818\u57df\u5c55\u958b\u7de8 - \u30b8\u30a7\u30cd\u30ea\u30af\u30b9","text":""},{"location":"chapter04/generics/#-","title":"\u9818\u57df\u5c55\u958b\u306e\u6982\u5ff5 - \u62bd\u8c61\u5316\u306e\u7a76\u6975\u5f62","text":"<p>\u3064\u3044\u306b\u6765\u305f\u306a\u3001\u9818\u57df\u5c55\u958b\u7de8\u3002\u3053\u308c\u307e\u3067\u306e\u57fa\u672c\u8853\u5f0f\u3001\u546a\u529b\u64cd\u4f5c\u3001\u53cd\u8ee2\u8853\u5f0f\u3092\u7fd2\u5f97\u3057\u305f\u541b\u306a\u3089\u3001\u3053\u306e\u6700\u9ad8\u4f4d\u306e\u6280\u8853\u3092\u7406\u89e3\u3067\u304d\u308b\u306f\u305a\u3060\u3002</p> <p>\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\uff08\u7dcf\u79f0\u578b\uff09\u306f\u4ffa\u306e\u9818\u57df\u5c55\u958b\u300c\u7121\u91cf\u7a7a\u51e6\u300d\u306e\u3088\u3046\u306b\u3001\u578b\u3068\u3044\u3046\u6982\u5ff5\u3092\u62bd\u8c61\u5316\u3057\u3001\u3042\u3089\u3086\u308b\u53ef\u80fd\u6027\u3092\u5305\u542b\u3059\u308b\u6280\u8853\u3060\u3002\u4e00\u3064\u306e\u30b3\u30fc\u30c9\u3067\u8907\u6570\u306e\u578b\u3092\u6271\u3048\u308b\u3001\u307e\u3055\u306b\u7121\u9650\u306e\u53ef\u80fd\u6027\u3092\u6301\u3064\u529b\u3060\u3002</p> <p>\u4e94\u6761\u5148\u751f\u306e\u89e3\u8aac</p> <p>\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u306f\u300c\u578b\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u300d\u3059\u308b\u6280\u8853\u3002\u540c\u3058\u30ed\u30b8\u30c3\u30af\u3092\u7570\u306a\u308b\u578b\u3067\u518d\u5229\u7528\u3067\u304d\u308b\u3002 <code>Vec&lt;i32&gt;</code>\u3001<code>Vec&lt;String&gt;</code>\u306e\u3088\u3046\u306b\u3001\u4e00\u3064\u306eVec\u3068\u3044\u3046\u6982\u5ff5\u3067\u69d8\u3005\u306a\u578b\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u8868\u73fe\u3067\u304d\u308b\u3002</p>"},{"location":"chapter04/generics/#_1","title":"\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u306e\u57fa\u672c","text":""},{"location":"chapter04/generics/#_2","title":"\u57fa\u672c\u7684\u306a\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u95a2\u6570","text":"<pre><code>// \u578b\u30d1\u30e9\u30e1\u30fc\u30bfT - \u3042\u3089\u3086\u308b\u578b\u3092\u53d7\u3051\u5165\u308c\u308b\nfn display_value&lt;T&gt;(value: T)\nwhere\n    T: std::fmt::Display,\n{\n    println!(\\\"\u5024: {}\\\", value);\n}\n\nfn main() {\n    display_value(42);              // i32\n    display_value(\\\"\u4e94\u6761\u609f\\\");       // &amp;str\n    display_value(3.14);            // f64\n    display_value(true);            // bool\n}\n</code></pre>"},{"location":"chapter04/generics/#_3","title":"\u8907\u6570\u306e\u578b\u30d1\u30e9\u30e1\u30fc\u30bf","text":"<pre><code>fn compare_and_display&lt;T, U&gt;(first: T, second: U)\nwhere\n    T: std::fmt::Display,\n    U: std::fmt::Display,\n{\n    println!(\\\"\u6bd4\u8f03: {} vs {}\\\", first, second);\n}\n\nfn main() {\n    compare_and_display(\\\"\u4e94\u6761\u609f\\\", 3000);\n    compare_and_display(1500, \\\"\u864e\u6756\u60a0\u4ec1\\\");\n    compare_and_display(true, false);\n}\n</code></pre>"},{"location":"chapter04/generics/#_4","title":"\u623b\u308a\u5024\u306e\u30b8\u30a7\u30cd\u30ea\u30c3\u30af","text":"<pre><code>fn get_maximum&lt;T&gt;(a: T, b: T) -&gt; T\nwhere\n    T: PartialOrd,\n{\n    if a &gt; b { a } else { b }\n}\n\nfn main() {\n    let max_power = get_maximum(2000, 3000);\n    let max_name = get_maximum(\\\"\u864e\u6756\\\", \\\"\u4e94\u6761\\\");  // \u8f9e\u66f8\u9806\n\n    println!(\\\"\u6700\u5927\u546a\u529b: {}\\\", max_power);\n    println!(\\\"\u5f8c\u306e\u540d\u524d: {}\\\", max_name);\n}\n</code></pre>"},{"location":"chapter04/generics/#_5","title":"\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u69cb\u9020\u4f53","text":""},{"location":"chapter04/generics/#_6","title":"\u57fa\u672c\u7684\u306a\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u69cb\u9020\u4f53","text":"<pre><code>#[derive(Debug)]\nstruct Container&lt;T&gt; {\n    value: T,\n}\n\nimpl&lt;T&gt; Container&lt;T&gt; {\n    fn new(value: T) -&gt; Self {\n        Container { value }\n    }\n\n    fn get(&amp;self) -&gt; &amp;T {\n        &amp;self.value\n    }\n\n    fn set(&amp;mut self, value: T) {\n        self.value = value;\n    }\n\n    // \u578b\u5909\u63db\u30e1\u30bd\u30c3\u30c9\n    fn map&lt;U, F&gt;(self, func: F) -&gt; Container&lt;U&gt;\n    where\n        F: FnOnce(T) -&gt; U,\n    {\n        Container {\n            value: func(self.value),\n        }\n    }\n}\n\nfn main() {\n    let mut power_container = Container::new(1500);\n    println!(\\\"\u546a\u529b: {:?}\\\", power_container.get());\n\n    power_container.set(2000);\n    println!(\\\"\u5f37\u5316\u5f8c: {:?}\\\", power_container);\n\n    // \u578b\u5909\u63db\n    let name_container = power_container.map(|power| {\n        format!(\\\"\u546a\u529b\u5024: {}\\\", power)\n    });\n\n    println!(\\\"\u5909\u63db\u5f8c: {:?}\\\", name_container);\n}\n</code></pre>"},{"location":"chapter04/generics/#_7","title":"\u8907\u96d1\u306a\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u69cb\u9020\u4f53","text":"<pre><code>#[derive(Debug)]\nstruct Pair&lt;T, U&gt; {\n    first: T,\n    second: U,\n}\n\nimpl&lt;T, U&gt; Pair&lt;T, U&gt; {\n    fn new(first: T, second: U) -&gt; Self {\n        Pair { first, second }\n    }\n\n    fn get_first(&amp;self) -&gt; &amp;T {\n        &amp;self.first\n    }\n\n    fn get_second(&amp;self) -&gt; &amp;U {\n        &amp;self.second\n    }\n\n    // \u8981\u7d20\u3092\u5165\u308c\u66ff\u3048\u308b\n    fn swap(self) -&gt; Pair&lt;U, T&gt; {\n        Pair {\n            first: self.second,\n            second: self.first,\n        }\n    }\n\n    // \u4e21\u65b9\u306e\u8981\u7d20\u306b\u95a2\u6570\u3092\u9069\u7528\n    fn map&lt;V, W, F, G&gt;(self, f: F, g: G) -&gt; Pair&lt;V, W&gt;\n    where\n        F: FnOnce(T) -&gt; V,\n        G: FnOnce(U) -&gt; W,\n    {\n        Pair {\n            first: f(self.first),\n            second: g(self.second),\n        }\n    }\n}\n\nfn main() {\n    let sorcerer_info = Pair::new(\\\"\u4e94\u6761\u609f\\\", 3000);\n    println!(\\\"\u546a\u8853\u5e2b\u60c5\u5831: {:?}\\\", sorcerer_info);\n\n    let swapped = sorcerer_info.swap();\n    println!(\\\"\u5165\u308c\u66ff\u3048\u5f8c: {:?}\\\", swapped);\n\n    let processed = Pair::new(\\\"\u864e\u6756\u60a0\u4ec1\\\", 1200).map(\n        |name| format!(\\\"\u546a\u8853\u5e2b: {}\\\", name),\n        |power| power * 2,\n    );\n\n    println!(\\\"\u51e6\u7406\u5f8c: {:?}\\\", processed);\n}\n</code></pre>"},{"location":"chapter04/generics/#-_1","title":"\u5b9f\u8df5\u4f8b - \u6c4e\u7528\u7684\u306a\u546a\u8853\u5e2b\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0","text":"<pre><code>use std::fmt::Display;\nuse std::collections::HashMap;\n\n// \u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306aID\u578b\u3092\u6301\u3064\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\n#[derive(Debug, Clone, PartialEq)]\nstruct Entity&lt;ID, DATA&gt; {\n    id: ID,\n    data: DATA,\n}\n\nimpl&lt;ID, DATA&gt; Entity&lt;ID, DATA&gt; {\n    fn new(id: ID, data: DATA) -&gt; Self {\n        Entity { id, data }\n    }\n\n    fn id(&amp;self) -&gt; &amp;ID {\n        &amp;self.id\n    }\n\n    fn data(&amp;self) -&gt; &amp;DATA {\n        &amp;self.data\n    }\n\n    fn data_mut(&amp;mut self) -&gt; &amp;mut DATA {\n        &amp;mut self.data\n    }\n\n    fn update_data(&amp;mut self, new_data: DATA) {\n        self.data = new_data;\n    }\n}\n\n// \u546a\u8853\u5e2b\u30c7\u30fc\u30bf\n#[derive(Debug, Clone)]\nstruct SorcererData {\n    name: String,\n    power: i32,\n    grade: String,\n    techniques: Vec&lt;String&gt;,\n}\n\nimpl SorcererData {\n    fn new(name: String, power: i32, grade: String) -&gt; Self {\n        SorcererData {\n            name,\n            power,\n            grade,\n            techniques: Vec::new(),\n        }\n    }\n\n    fn add_technique(&amp;mut self, technique: String) {\n        self.techniques.push(technique);\n    }\n}\n\nimpl Display for SorcererData {\n    fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter) -&gt; std::fmt::Result {\n        write!(f, \\\"{} (\u546a\u529b: {}, \u7b49\u7d1a: {}, \u6280\u6570: {})\\\",\n               self.name, self.power, self.grade, self.techniques.len())\n    }\n}\n\n// \u6c4e\u7528\u7684\u306a\u30ea\u30dd\u30b8\u30c8\u30ea\n#[derive(Debug)]\nstruct Repository&lt;ID, DATA&gt;\nwhere\n    ID: Clone + Eq + std::hash::Hash,\n{\n    entities: HashMap&lt;ID, Entity&lt;ID, DATA&gt;&gt;,\n}\n\nimpl&lt;ID, DATA&gt; Repository&lt;ID, DATA&gt;\nwhere\n    ID: Clone + Eq + std::hash::Hash,\n{\n    fn new() -&gt; Self {\n        Repository {\n            entities: HashMap::new(),\n        }\n    }\n\n    fn add(&amp;mut self, id: ID, data: DATA) -&gt; Result&lt;(), String&gt; {\n        if self.entities.contains_key(&amp;id) {\n            return Err(format!(\\\"ID {:?} \u306f\u65e2\u306b\u5b58\u5728\u3057\u307e\u3059\\\", id));\n        }\n\n        let entity = Entity::new(id.clone(), data);\n        self.entities.insert(id, entity);\n        Ok(())\n    }\n\n    fn get(&amp;self, id: &amp;ID) -&gt; Option&lt;&amp;Entity&lt;ID, DATA&gt;&gt; {\n        self.entities.get(id)\n    }\n\n    fn get_mut(&amp;mut self, id: &amp;ID) -&gt; Option&lt;&amp;mut Entity&lt;ID, DATA&gt;&gt; {\n        self.entities.get_mut(id)\n    }\n\n    fn remove(&amp;mut self, id: &amp;ID) -&gt; Option&lt;Entity&lt;ID, DATA&gt;&gt; {\n        self.entities.remove(id)\n    }\n\n    fn list_all(&amp;self) -&gt; Vec&lt;&amp;Entity&lt;ID, DATA&gt;&gt; {\n        self.entities.values().collect()\n    }\n\n    fn find_by&lt;F&gt;(&amp;self, predicate: F) -&gt; Vec&lt;&amp;Entity&lt;ID, DATA&gt;&gt;\n    where\n        F: Fn(&amp;Entity&lt;ID, DATA&gt;) -&gt; bool,\n    {\n        self.entities.values().filter(|entity| predicate(entity)).collect()\n    }\n\n    fn update&lt;F&gt;(&amp;mut self, id: &amp;ID, updater: F) -&gt; Result&lt;(), String&gt;\n    where\n        F: FnOnce(&amp;mut DATA),\n    {\n        match self.entities.get_mut(id) {\n            Some(entity) =&gt; {\n                updater(&amp;mut entity.data);\n                Ok(())\n            },\n            None =&gt; Err(format!(\\\"ID {:?} \u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\\\", id)),\n        }\n    }\n\n    fn count(&amp;self) -&gt; usize {\n        self.entities.len()\n    }\n\n    fn is_empty(&amp;self) -&gt; bool {\n        self.entities.is_empty()\n    }\n}\n\n// \u7d71\u8a08\u6a5f\u80fd\u4ed8\u304d\u30ea\u30dd\u30b8\u30c8\u30ea\nimpl&lt;ID, DATA&gt; Repository&lt;ID, DATA&gt;\nwhere\n    ID: Clone + Eq + std::hash::Hash + Display,\n    DATA: Clone,\n{\n    fn generate_report&lt;F&gt;(&amp;self, analyzer: F) -&gt; String\n    where\n        F: Fn(&amp;[&amp;Entity&lt;ID, DATA&gt;]) -&gt; String,\n    {\n        let entities: Vec&lt;&amp;Entity&lt;ID, DATA&gt;&gt; = self.list_all();\n        analyzer(&amp;entities)\n    }\n}\n\n// \u7279\u5316\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u5b9f\u88c5\nimpl Repository&lt;String, SorcererData&gt; {\n    fn find_by_power_range(&amp;self, min: i32, max: i32) -&gt; Vec&lt;&amp;Entity&lt;String, SorcererData&gt;&gt; {\n        self.find_by(|entity| {\n            let power = entity.data().power;\n            power &gt;= min &amp;&amp; power &lt;= max\n        })\n    }\n\n    fn find_by_grade(&amp;self, grade: &amp;str) -&gt; Vec&lt;&amp;Entity&lt;String, SorcererData&gt;&gt; {\n        self.find_by(|entity| entity.data().grade == grade)\n    }\n\n    fn get_average_power(&amp;self) -&gt; f64 {\n        if self.is_empty() {\n            return 0.0;\n        }\n\n        let total: i32 = self.entities.values()\n            .map(|entity| entity.data().power)\n            .sum();\n\n        total as f64 / self.count() as f64\n    }\n\n    fn get_most_powerful(&amp;self) -&gt; Option&lt;&amp;Entity&lt;String, SorcererData&gt;&gt; {\n        self.entities.values()\n            .max_by_key(|entity| entity.data().power)\n    }\n}\n\n// \u7570\u306a\u308b\u578b\u3067\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u4f7f\u7528\u4f8b\n#[derive(Debug, Clone)]\nstruct TechniqueData {\n    name: String,\n    power: i32,\n    element: String,\n    difficulty: u8,\n}\n\nimpl Display for TechniqueData {\n    fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter) -&gt; std::fmt::Result {\n        write!(f, \\\"{} (\u5a01\u529b: {}, \u5c5e\u6027: {}, \u96e3\u6613\u5ea6: {})\\\",\n               self.name, self.power, self.element, self.difficulty)\n    }\n}\n\nfn main() {\n    println!(\\\"=== \u6c4e\u7528\u7684\u306a\u546a\u8853\u5e2b\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0 ===\\\");\n\n    // \u546a\u8853\u5e2b\u30ea\u30dd\u30b8\u30c8\u30ea\n    let mut sorcerer_repo: Repository&lt;String, SorcererData&gt; = Repository::new();\n\n    // \u30c7\u30fc\u30bf\u306e\u8ffd\u52a0\n    let mut gojo_data = SorcererData::new(\\\"\u4e94\u6761\u609f\\\".to_string(), 3000, \\\"\u7279\u7d1a\\\".to_string());\n    gojo_data.add_technique(\\\"\u7121\u4e0b\u9650\u546a\u8853\\\".to_string());\n    gojo_data.add_technique(\\\"\u9818\u57df\u5c55\u958b\\\".to_string());\n\n    let mut yuji_data = SorcererData::new(\\\"\u864e\u6756\u60a0\u4ec1\\\".to_string(), 1200, \\\"1\u7d1a\\\".to_string());\n    yuji_data.add_technique(\\\"\u9ed2\u9583\\\".to_string());\n\n    let mut megumi_data = SorcererData::new(\\\"\u4f0f\u9ed2\u6075\\\".to_string(), 1000, \\\"2\u7d1a\\\".to_string());\n    megumi_data.add_technique(\\\"\u5341\u7a2e\u5f71\u6cd5\u8853\\\".to_string());\n\n    // \u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u8ffd\u52a0\n    sorcerer_repo.add(\\\"gojo\\\".to_string(), gojo_data).unwrap();\n    sorcerer_repo.add(\\\"yuji\\\".to_string(), yuji_data).unwrap();\n    sorcerer_repo.add(\\\"megumi\\\".to_string(), megumi_data).unwrap();\n\n    // \u691c\u7d22\u3068\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\n    println!(\\\"\\\\n=== \u691c\u7d22\u7d50\u679c ===\\\");\n\n    // \u7279\u7d1a\u546a\u8853\u5e2b\u3092\u691c\u7d22\n    let special_grade = sorcerer_repo.find_by_grade(\\\"\u7279\u7d1a\\\");\n    println!(\\\"\u7279\u7d1a\u546a\u8853\u5e2b: {}\\\", special_grade.len());\n    for sorcerer in special_grade {\n        println!(\\\"  {}: {}\\\", sorcerer.id(), sorcerer.data());\n    }\n\n    // \u546a\u529b\u7bc4\u56f2\u3067\u691c\u7d22\n    let mid_power = sorcerer_repo.find_by_power_range(1000, 2000);\n    println!(\\\"\\\\n\u546a\u529b1000-2000\u306e\u546a\u8853\u5e2b: {}\\\", mid_power.len());\n    for sorcerer in mid_power {\n        println!(\\\"  {}: {}\\\", sorcerer.id(), sorcerer.data());\n    }\n\n    // \u7d71\u8a08\u60c5\u5831\n    println!(\\\"\\\\n=== \u7d71\u8a08\u60c5\u5831 ===\\\");\n    println!(\\\"\u7dcf\u546a\u8853\u5e2b\u6570: {}\\\", sorcerer_repo.count());\n    println!(\\\"\u5e73\u5747\u546a\u529b: {:.1}\\\", sorcerer_repo.get_average_power());\n\n    if let Some(strongest) = sorcerer_repo.get_most_powerful() {\n        println!(\\\"\u6700\u5f37: {}: {}\\\", strongest.id(), strongest.data());\n    }\n\n    // \u546a\u8853\u5e2b\u30c7\u30fc\u30bf\u306e\u66f4\u65b0\n    sorcerer_repo.update(&amp;\\\"yuji\\\".to_string(), |data| {\n        data.power += 300;  // \u30d1\u30ef\u30fc\u30a2\u30c3\u30d7\n        data.add_technique(\\\"\u767a\u6563\\\".to_string());\n    }).unwrap();\n\n    println!(\\\"\\\\n=== \u66f4\u65b0\u5f8c\u306e\u864e\u6756\u60a0\u4ec1 ===\\\");\n    if let Some(yuji) = sorcerer_repo.get(&amp;\\\"yuji\\\".to_string()) {\n        println!(\\\"{}: {}\\\", yuji.id(), yuji.data());\n    }\n\n    // \u30ec\u30dd\u30fc\u30c8\u751f\u6210\n    let report = sorcerer_repo.generate_report(|entities| {\n        let mut report = String::from(\\\"=== \u546a\u8853\u5e2b\u30ea\u30dd\u30fc\u30c8 ===\\\\n\\\");\n\n        let total = entities.len();\n        let avg_power: f64 = entities.iter()\n            .map(|e| e.data().power)\n            .sum::&lt;i32&gt;() as f64 / total as f64;\n\n        report.push_str(&amp;format!(\\\"\u7dcf\u6570: {}\\\\n\\\", total));\n        report.push_str(&amp;format!(\\\"\u5e73\u5747\u546a\u529b: {:.1}\\\\n\\\", avg_power));\n\n        // \u7b49\u7d1a\u5206\u5e03\n        let mut grade_counts = std::collections::HashMap::new();\n        for entity in entities {\n            *grade_counts.entry(&amp;entity.data().grade).or_insert(0) += 1;\n        }\n\n        report.push_str(\\\"\\\\n\u7b49\u7d1a\u5206\u5e03:\\\\n\\\");\n        for (grade, count) in grade_counts {\n            report.push_str(&amp;format!(\\\"  {}: {}\u4eba\\\\n\\\", grade, count));\n        }\n\n        report\n    });\n\n    println!(\\\"\\\\n{}\\\", report);\n\n    // \u8853\u5f0f\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u4f8b\n    println!(\\\"\\\\n=== \u8853\u5f0f\u30ea\u30dd\u30b8\u30c8\u30ea ===\\\");\n\n    let mut technique_repo: Repository&lt;u32, TechniqueData&gt; = Repository::new();\n\n    technique_repo.add(1, TechniqueData {\n        name: \\\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\\\".to_string(),\n        power: 1000,\n        element: \\\"\u7121\u4e0b\u9650\\\".to_string(),\n        difficulty: 8,\n    }).unwrap();\n\n    technique_repo.add(2, TechniqueData {\n        name: \\\"\u9ed2\u9583\\\".to_string(),\n        power: 800,\n        element: \\\"\u7269\u7406\\\".to_string(),\n        difficulty: 6,\n    }).unwrap();\n\n    println!(\\\"\u767b\u9332\u3055\u308c\u305f\u8853\u5f0f:\\\");\n    for technique in technique_repo.list_all() {\n        println!(\\\"  ID {}: {}\\\", technique.id(), technique.data());\n    }\n}\n</code></pre>"},{"location":"chapter04/generics/#optionresult","title":"Option\u578b\u3068Result\u578b\u306e\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u5b9f\u88c5","text":"<pre><code>// Option\u578b\u306e\u3088\u3046\u306a\u72ec\u81ea\u5b9f\u88c5\n#[derive(Debug, Clone, PartialEq)]\nenum Maybe&lt;T&gt; {\n    Some(T),\n    None,\n}\n\nimpl&lt;T&gt; Maybe&lt;T&gt; {\n    fn is_some(&amp;self) -&gt; bool {\n        matches!(self, Maybe::Some(_))\n    }\n\n    fn is_none(&amp;self) -&gt; bool {\n        matches!(self, Maybe::None)\n    }\n\n    fn map&lt;U, F&gt;(self, func: F) -&gt; Maybe&lt;U&gt;\n    where\n        F: FnOnce(T) -&gt; U,\n    {\n        match self {\n            Maybe::Some(value) =&gt; Maybe::Some(func(value)),\n            Maybe::None =&gt; Maybe::None,\n        }\n    }\n\n    fn and_then&lt;U, F&gt;(self, func: F) -&gt; Maybe&lt;U&gt;\n    where\n        F: FnOnce(T) -&gt; Maybe&lt;U&gt;,\n    {\n        match self {\n            Maybe::Some(value) =&gt; func(value),\n            Maybe::None =&gt; Maybe::None,\n        }\n    }\n\n    fn unwrap_or(self, default: T) -&gt; T {\n        match self {\n            Maybe::Some(value) =&gt; value,\n            Maybe::None =&gt; default,\n        }\n    }\n}\n\n// Result\u578b\u306e\u3088\u3046\u306a\u72ec\u81ea\u5b9f\u88c5\n#[derive(Debug, Clone, PartialEq)]\nenum Outcome&lt;T, E&gt; {\n    Success(T),\n    Failure(E),\n}\n\nimpl&lt;T, E&gt; Outcome&lt;T, E&gt; {\n    fn is_success(&amp;self) -&gt; bool {\n        matches!(self, Outcome::Success(_))\n    }\n\n    fn is_failure(&amp;self) -&gt; bool {\n        matches!(self, Outcome::Failure(_))\n    }\n\n    fn map&lt;U, F&gt;(self, func: F) -&gt; Outcome&lt;U, E&gt;\n    where\n        F: FnOnce(T) -&gt; U,\n    {\n        match self {\n            Outcome::Success(value) =&gt; Outcome::Success(func(value)),\n            Outcome::Failure(error) =&gt; Outcome::Failure(error),\n        }\n    }\n\n    fn map_err&lt;F, G&gt;(self, func: G) -&gt; Outcome&lt;T, F&gt;\n    where\n        G: FnOnce(E) -&gt; F,\n    {\n        match self {\n            Outcome::Success(value) =&gt; Outcome::Success(value),\n            Outcome::Failure(error) =&gt; Outcome::Failure(func(error)),\n        }\n    }\n\n    fn and_then&lt;U, F&gt;(self, func: F) -&gt; Outcome&lt;U, E&gt;\n    where\n        F: FnOnce(T) -&gt; Outcome&lt;U, E&gt;,\n    {\n        match self {\n            Outcome::Success(value) =&gt; func(value),\n            Outcome::Failure(error) =&gt; Outcome::Failure(error),\n        }\n    }\n}\n\nfn main() {\n    println!(\\\"=== \u30ab\u30b9\u30bf\u30e0\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u578b ===\\\");\n\n    // Maybe\u578b\u306e\u4f7f\u7528\u4f8b\n    let power: Maybe&lt;i32&gt; = Maybe::Some(1500);\n    let no_power: Maybe&lt;i32&gt; = Maybe::None;\n\n    let doubled_power = power.map(|p| p * 2);\n    let doubled_no_power = no_power.map(|p| p * 2);\n\n    println!(\\\"\u500d\u5897\u3057\u305f\u546a\u529b: {:?}\\\", doubled_power);      // Some(3000)\n    println!(\\\"\u500d\u5897\u3057\u305f\u7a7a\u306e\u546a\u529b: {:?}\\\", doubled_no_power); // None\n\n    // \u30c1\u30a7\u30fc\u30f3\u64cd\u4f5c\n    let result = Maybe::Some(\\\"\u4e94\u6761\u609f\\\")\n        .map(|name| format!(\\\"\u546a\u8853\u5e2b: {}\\\", name))\n        .map(|formatted| formatted.len());\n\n    println!(\\\"\u30c1\u30a7\u30fc\u30f3\u7d50\u679c: {:?}\\\", result);\n\n    // Outcome\u578b\u306e\u4f7f\u7528\u4f8b\n    let success: Outcome&lt;String, &amp;str&gt; = Outcome::Success(\\\"\u8853\u5f0f\u767a\u52d5\u6210\u529f\\\".to_string());\n    let failure: Outcome&lt;String, &amp;str&gt; = Outcome::Failure(\\\"\u546a\u529b\u4e0d\u8db3\\\");\n\n    let success_result = success.map(|msg| format!(\\\"[LOG] {}\\\", msg));\n    let failure_result = failure.map_err(|err| format!(\\\"[ERROR] {}\\\", err));\n\n    println!(\\\"\u6210\u529f\u7d50\u679c: {:?}\\\", success_result);\n    println!(\\\"\u5931\u6557\u7d50\u679c: {:?}\\\", failure_result);\n}\n</code></pre>"},{"location":"chapter04/generics/#_8","title":"\u578b\u63a8\u8ad6\u3068\u30bf\u30fc\u30dc\u30d5\u30a3\u30c3\u30b7\u30e5","text":"<pre><code>fn main() {\n    println!(\\\"=== \u578b\u63a8\u8ad6\u3068\u30bf\u30fc\u30dc\u30d5\u30a3\u30c3\u30b7\u30e5 ===\\\");\n\n    // \u578b\u63a8\u8ad6\u304c\u52b9\u304f\u5834\u5408\n    let numbers = vec![1, 2, 3, 4, 5];\n    let doubled: Vec&lt;i32&gt; = numbers.iter().map(|x| x * 2).collect();\n\n    // \u578b\u63a8\u8ad6\u304c\u52b9\u304b\u306a\u3044\u5834\u5408 - \u30bf\u30fc\u30dc\u30d5\u30a3\u30c3\u30b7\u30e5\u69cb\u6587\u304c\u5fc5\u8981\n    let parsed_numbers: Vec&lt;i32&gt; = vec![\\\"1\\\", \\\"2\\\", \\\"3\\\"]\n        .iter()\n        .map(|s| s.parse::&lt;i32&gt;().unwrap())\n        .collect();\n\n    // \u307e\u305f\u306f\n    let parsed_numbers2 = vec![\\\"4\\\", \\\"5\\\", \\\"6\\\"]\n        .iter()\n        .map(|s| s.parse().unwrap())\n        .collect::&lt;Vec&lt;i32&gt;&gt;();\n\n    println!(\\\"\u500d\u5897: {:?}\\\", doubled);\n    println!(\\\"\u30d1\u30fc\u30b91: {:?}\\\", parsed_numbers);\n    println!(\\\"\u30d1\u30fc\u30b92: {:?}\\\", parsed_numbers2);\n\n    // \u3088\u308a\u8907\u96d1\u306a\u4f8b\n    let sorcerer_powers: std::collections::HashMap&lt;String, i32&gt; =\n        [(\\\"\u4e94\u6761\u609f\\\", 3000), (\\\"\u864e\u6756\u60a0\u4ec1\\\", 1200)]\n        .iter()\n        .map(|(name, power)| (name.to_string(), *power))\n        .collect();\n\n    println!(\\\"\u546a\u8853\u5e2b\u306e\u546a\u529b: {:?}\\\", sorcerer_powers);\n}\n</code></pre>"},{"location":"chapter04/generics/#_9","title":"\u307e\u3068\u3081","text":"<p>\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u306e\u57fa\u672c\u306f\u30de\u30b9\u30bf\u30fc\u3067\u304d\u305f\u304b\uff1f\u91cd\u8981\u306a\u30dd\u30a4\u30f3\u30c8\uff1a</p> <ol> <li>\u578b\u30d1\u30e9\u30e1\u30fc\u30bf - <code>&lt;T&gt;</code>\u3067\u578b\u3092\u62bd\u8c61\u5316</li> <li>\u578b\u5236\u7d04 - <code>where</code>\u53e5\u3067\u30c8\u30ec\u30a4\u30c8\u5883\u754c\u3092\u6307\u5b9a</li> <li>\u578b\u63a8\u8ad6 - \u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u9069\u5207\u306a\u578b\u3092\u63a8\u8ad6</li> <li>\u518d\u5229\u7528\u6027 - \u540c\u3058\u30b3\u30fc\u30c9\u3067\u8907\u6570\u306e\u578b\u3092\u6271\u3048\u308b</li> <li>\u578b\u5b89\u5168\u6027 - \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u578b\u306e\u6574\u5408\u6027\u3092\u4fdd\u8a3c</li> </ol> <p>\u3053\u308c\u3067\u578b\u306e\u6982\u5ff5\u3092\u62bd\u8c61\u5316\u3057\u3001\u7121\u9650\u306e\u53ef\u80fd\u6027\u3092\u6301\u3064\u30b3\u30fc\u30c9\u304c\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\u307e\u3055\u306b\u4ffa\u306e\u9818\u57df\u5c55\u958b\u300c\u7121\u91cf\u7a7a\u51e6\u300d\u306e\u3088\u3046\u306b\u3001\u5168\u3066\u306e\u578b\u3092\u5305\u542b\u3059\u308b\u529b\u3092\u624b\u306b\u5165\u308c\u305f\u306a\u3002</p> <p>\u6b21\u306f\u30c8\u30ec\u30a4\u30c8\u306b\u3064\u3044\u3066\u5b66\u307c\u3046\u3002\u578b\u306b\u632f\u308b\u821e\u3044\u3092\u4e0e\u3048\u308b\u3001\u3055\u3089\u306b\u5f37\u529b\u306a\u62bd\u8c61\u5316\u6280\u8853\u3060\u3002</p> <p>\u300c\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3092\u6975\u3081\u308c\u3070\u3001\u578b\u306e\u5236\u7d04\u304b\u3089\u89e3\u653e\u3055\u308c\u308b\u300d</p>"},{"location":"chapter04/traits/","title":"\u30c8\u30ec\u30a4\u30c8 - \u632f\u308b\u821e\u3044\u306e\u62bd\u8c61\u5316","text":""},{"location":"chapter04/traits/#-_1","title":"\u30c8\u30ec\u30a4\u30c8\u3068\u306f - \u8853\u5f0f\u306e\u578b","text":"<p>\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3067\u578b\u3092\u62bd\u8c61\u5316\u3057\u305f\u304c\u3001\u4eca\u5ea6\u306f\u632f\u308b\u821e\u3044\u3092\u62bd\u8c61\u5316\u3059\u308b\u756a\u3060\u3002\u30c8\u30ec\u30a4\u30c8\uff08Trait\uff09\u306f\u4ffa\u306e\u7121\u4e0b\u9650\u8853\u5f0f\u306e\u3088\u3046\u306b\u3001\u300c\u4f55\u304c\u3067\u304d\u308b\u304b\u300d\u3092\u5b9a\u7fa9\u3059\u308b\u578b\u3060\u3002</p> <p>\u4ed6\u306e\u8a00\u8a9e\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306b\u4f3c\u3066\u3044\u308b\u304c\u3001Rust\u306e\u30c8\u30ec\u30a4\u30c8\u306f\u3082\u3063\u3068\u5f37\u529b\u3060\u3002\u65e2\u5b58\u306e\u578b\u306b\u5f8c\u304b\u3089\u6a5f\u80fd\u3092\u8ffd\u52a0\u3067\u304d\u308b\u3057\u3001\u578b\u5b89\u5168\u6027\u3082\u4fdd\u8a3c\u3055\u308c\u308b\u3002\u307e\u3055\u306b\u546a\u8853\u306e\u578b\u3092\u5b9a\u7fa9\u3059\u308b\u6280\u8853\u3060\u3002</p> <p>\u4e94\u6761\u5148\u751f\u306e\u89e3\u8aac</p> <p>\u30c8\u30ec\u30a4\u30c8\u306f\u300c\u5171\u901a\u306e\u632f\u308b\u821e\u3044\u300d\u3092\u5b9a\u7fa9\u3059\u308b\u3002\u4f8b\u3048\u3070<code>Display</code>\u30c8\u30ec\u30a4\u30c8\u306f\u300c\u8868\u793a\u3067\u304d\u308b\u300d\u3001<code>Clone</code>\u30c8\u30ec\u30a4\u30c8\u306f\u300c\u8907\u88fd\u3067\u304d\u308b\u300d\u3068\u3044\u3046\u80fd\u529b\u3092\u8868\u3059\u3002 \u578b\u304c\u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3067\u3001\u305d\u306e\u80fd\u529b\u3092\u7372\u5f97\u3059\u308b\u3002</p>"},{"location":"chapter04/traits/#_1","title":"\u57fa\u672c\u7684\u306a\u30c8\u30ec\u30a4\u30c8\u5b9a\u7fa9","text":""},{"location":"chapter04/traits/#_2","title":"\u30b7\u30f3\u30d7\u30eb\u306a\u30c8\u30ec\u30a4\u30c8","text":"<pre><code>// \u6226\u95d8\u80fd\u529b\u3092\u8868\u3059\u30c8\u30ec\u30a4\u30c8\ntrait Combatant {\n    fn attack(&amp;self) -&gt; i32;\n    fn defend(&amp;self) -&gt; i32;\n    fn health(&amp;self) -&gt; i32;\n\n    // \u30c7\u30d5\u30a9\u30eb\u30c8\u5b9f\u88c5\u3092\u6301\u3064\u30e1\u30bd\u30c3\u30c9\n    fn is_alive(&amp;self) -&gt; bool {\n        self.health() &gt; 0\n    }\n\n    fn battle_power(&amp;self) -&gt; i32 {\n        self.attack() + self.defend()\n    }\n}\n\n// \u546a\u8853\u5e2b\u69cb\u9020\u4f53\nstruct Sorcerer {\n    name: String,\n    attack_power: i32,\n    defense_power: i32,\n    current_health: i32,\n}\n\nimpl Sorcerer {\n    fn new(name: &amp;str, attack: i32, defense: i32, health: i32) -&gt; Self {\n        Sorcerer {\n            name: name.to_string(),\n            attack_power: attack,\n            defense_power: defense,\n            current_health: health,\n        }\n    }\n}\n\n// \u30c8\u30ec\u30a4\u30c8\u306e\u5b9f\u88c5\nimpl Combatant for Sorcerer {\n    fn attack(&amp;self) -&gt; i32 {\n        self.attack_power\n    }\n\n    fn defend(&amp;self) -&gt; i32 {\n        self.defense_power\n    }\n\n    fn health(&amp;self) -&gt; i32 {\n        self.current_health\n    }\n\n    // \u30c7\u30d5\u30a9\u30eb\u30c8\u5b9f\u88c5\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\n    fn battle_power(&amp;self) -&gt; i32 {\n        // \u546a\u8853\u5e2b\u306f\u540d\u524d\u306b\u30dc\u30fc\u30ca\u30b9\u304c\u3042\u308b\n        let name_bonus = if self.name.contains(\"\u4e94\u6761\") { 1000 } else { 0 };\n        self.attack() + self.defend() + name_bonus\n    }\n}\n\nfn main() {\n    let gojo = Sorcerer::new(\"\u4e94\u6761\u609f\", 1500, 1000, 2000);\n    let yuji = Sorcerer::new(\"\u864e\u6756\u60a0\u4ec1\", 800, 600, 1200);\n\n    println!(\"{}: \u653b\u6483{}, \u9632\u5fa1{}, \u6226\u95d8\u529b{}\",\n             gojo.name, gojo.attack(), gojo.defend(), gojo.battle_power());\n\n    println!(\"{}: \u653b\u6483{}, \u9632\u5fa1{}, \u6226\u95d8\u529b{}\",\n             yuji.name, yuji.attack(), yuji.defend(), yuji.battle_power());\n\n    println!(\"{}\u306f\u751f\u304d\u3066\u3044\u308b\u304b: {}\", gojo.name, gojo.is_alive());\n}\n</code></pre>"},{"location":"chapter04/traits/#_3","title":"\u8907\u6570\u306e\u578b\u3067\u306e\u5b9f\u88c5","text":"<pre><code>// \u546a\u970a\u69cb\u9020\u4f53\nstruct Curse {\n    grade: String,\n    attack_power: i32,\n    defense_power: i32,\n    current_health: i32,\n}\n\nimpl Curse {\n    fn new(grade: &amp;str, attack: i32, defense: i32, health: i32) -&gt; Self {\n        Curse {\n            grade: grade.to_string(),\n            attack_power: attack,\n            defense_power: defense,\n            current_health: health,\n        }\n    }\n}\n\n// \u546a\u970a\u3082\u6226\u95d8\u53ef\u80fd\nimpl Combatant for Curse {\n    fn attack(&amp;self) -&gt; i32 {\n        self.attack_power\n    }\n\n    fn defend(&amp;self) -&gt; i32 {\n        self.defense_power\n    }\n\n    fn health(&amp;self) -&gt; i32 {\n        self.current_health\n    }\n\n    fn battle_power(&amp;self) -&gt; i32 {\n        // \u546a\u970a\u306f\u7b49\u7d1a\u306b\u3088\u3063\u3066\u30dc\u30fc\u30ca\u30b9\n        let grade_bonus = match self.grade.as_str() {\n            \"\u7279\u7d1a\" =&gt; 500,\n            \"1\u7d1a\" =&gt; 200,\n            \"2\u7d1a\" =&gt; 100,\n            _ =&gt; 0,\n        };\n        self.attack() + self.defend() + grade_bonus\n    }\n}\n\n// \u30c8\u30ec\u30a4\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u6271\u3046\u95a2\u6570\nfn simulate_battle(fighter1: &amp;dyn Combatant, fighter2: &amp;dyn Combatant) {\n    println!(\"=== \u6226\u95d8\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3 ===\");\n    println!(\"\u6226\u95d8\u80051: \u653b\u6483{}, \u9632\u5fa1{}, HP{}, \u6226\u95d8\u529b{}\",\n             fighter1.attack(), fighter1.defend(), fighter1.health(), fighter1.battle_power());\n    println!(\"\u6226\u95d8\u80052: \u653b\u6483{}, \u9632\u5fa1{}, HP{}, \u6226\u95d8\u529b{}\",\n             fighter2.attack(), fighter2.defend(), fighter2.health(), fighter2.battle_power());\n\n    if fighter1.battle_power() &gt; fighter2.battle_power() {\n        println!(\"\u6226\u95d8\u80051\u306e\u52dd\u5229\uff01\");\n    } else if fighter2.battle_power() &gt; fighter1.battle_power() {\n        println!(\"\u6226\u95d8\u80052\u306e\u52dd\u5229\uff01\");\n    } else {\n        println!(\"\u5f15\u304d\u5206\u3051\uff01\");\n    }\n}\n\nfn main() {\n    let gojo = Sorcerer::new(\"\u4e94\u6761\u609f\", 1500, 1000, 2000);\n    let special_curse = Curse::new(\"\u7279\u7d1a\", 1200, 800, 1800);\n\n    // \u7570\u306a\u308b\u578b\u540c\u58eb\u306e\u6226\u95d8\n    simulate_battle(&amp;gojo, &amp;special_curse);\n}\n</code></pre>"},{"location":"chapter04/traits/#_4","title":"\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30c8\u30ec\u30a4\u30c8","text":""},{"location":"chapter04/traits/#display-debug","title":"Display \u3068 Debug","text":"<pre><code>use std::fmt;\n\n#[derive(Debug)]  // Debug\u30c8\u30ec\u30a4\u30c8\u3092\u81ea\u52d5\u5b9f\u88c5\nstruct Technique {\n    name: String,\n    power: i32,\n    element: String,\n}\n\nimpl Technique {\n    fn new(name: &amp;str, power: i32, element: &amp;str) -&gt; Self {\n        Technique {\n            name: name.to_string(),\n            power,\n            element: element.to_string(),\n        }\n    }\n}\n\n// Display\u30c8\u30ec\u30a4\u30c8\u306e\u624b\u52d5\u5b9f\u88c5\nimpl fmt::Display for Technique {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        write!(f, \"{}\uff08\u5a01\u529b: {}, \u5c5e\u6027: {}\uff09\", self.name, self.power, self.element)\n    }\n}\n\nfn main() {\n    let blue = Technique::new(\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\", 1000, \"\u7121\u4e0b\u9650\");\n\n    println!(\"Display: {}\", blue);     // Display\u30c8\u30ec\u30a4\u30c8\u4f7f\u7528\n    println!(\"Debug: {:?}\", blue);     // Debug\u30c8\u30ec\u30a4\u30c8\u4f7f\u7528\n    println!(\"Pretty Debug: {:#?}\", blue);  // \u6574\u5f62\u3055\u308c\u305fDebug\n}\n</code></pre>"},{"location":"chapter04/traits/#clone-copy","title":"Clone \u3068 Copy","text":"<pre><code>#[derive(Debug, Clone)]\nstruct SorcererStats {\n    power: i32,\n    level: i32,\n}\n\n#[derive(Debug, Clone, Copy)]  // Copy\u3082\u5b9f\u88c5\nstruct Position {\n    x: f64,\n    y: f64,\n}\n\nfn main() {\n    let stats = SorcererStats { power: 1500, level: 10 };\n    let cloned_stats = stats.clone();  // \u660e\u793a\u7684\u306b\u30af\u30ed\u30fc\u30f3\n\n    println!(\"\u5143: {:?}\", stats);\n    println!(\"\u30af\u30ed\u30fc\u30f3: {:?}\", cloned_stats);\n\n    let pos1 = Position { x: 1.0, y: 2.0 };\n    let pos2 = pos1;  // Copy\u30c8\u30ec\u30a4\u30c8\u306b\u3088\u308a\u81ea\u52d5\u30b3\u30d4\u30fc\n\n    println!(\"\u4f4d\u7f6e1: {:?}\", pos1);  // \u307e\u3060\u4f7f\u3048\u308b\n    println!(\"\u4f4d\u7f6e2: {:?}\", pos2);\n}\n</code></pre>"},{"location":"chapter04/traits/#partialeq-eq","title":"PartialEq \u3068 Eq","text":"<pre><code>#[derive(Debug, PartialEq, Eq)]\nstruct Grade {\n    level: u8,\n    name: String,\n}\n\nimpl Grade {\n    fn new(level: u8, name: &amp;str) -&gt; Self {\n        Grade {\n            level,\n            name: name.to_string(),\n        }\n    }\n}\n\nfn main() {\n    let special = Grade::new(0, \"\u7279\u7d1a\");\n    let special2 = Grade::new(0, \"\u7279\u7d1a\");\n    let first = Grade::new(1, \"1\u7d1a\");\n\n    println!(\"\u7279\u7d1a == \u7279\u7d1a: {}\", special == special2);  // true\n    println!(\"\u7279\u7d1a == 1\u7d1a: {}\", special == first);     // false\n}\n</code></pre>"},{"location":"chapter04/traits/#partialord-ord","title":"PartialOrd \u3068 Ord","text":"<pre><code>#[derive(Debug, PartialEq, Eq, PartialOrd, Ord)]\nstruct PowerLevel(i32);\n\nimpl PowerLevel {\n    fn new(power: i32) -&gt; Self {\n        PowerLevel(power)\n    }\n}\n\nfn main() {\n    let weak = PowerLevel::new(500);\n    let strong = PowerLevel::new(1500);\n    let strongest = PowerLevel::new(3000);\n\n    println!(\"{:?} &lt; {:?}: {}\", weak, strong, weak &lt; strong);\n\n    let mut powers = vec![strongest, weak, strong];\n    powers.sort();  // Ord\u30c8\u30ec\u30a4\u30c8\u306b\u3088\u308a\u81ea\u52d5\u30bd\u30fc\u30c8\n\n    println!(\"\u30bd\u30fc\u30c8\u5f8c: {:?}\", powers);\n}\n</code></pre>"},{"location":"chapter04/traits/#_5","title":"\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u30c8\u30ec\u30a4\u30c8","text":""},{"location":"chapter04/traits/#_6","title":"\u95a2\u9023\u578b\u3092\u6301\u3064\u30c8\u30ec\u30a4\u30c8","text":"<pre><code>trait Technique {\n    type Output;  // \u95a2\u9023\u578b\n    type Error;\n\n    fn cast(&amp;self, power: i32) -&gt; Result&lt;Self::Output, Self::Error&gt;;\n    fn required_power(&amp;self) -&gt; i32;\n}\n\nstruct FireTechnique {\n    name: String,\n    base_power: i32,\n}\n\nimpl FireTechnique {\n    fn new(name: &amp;str, base_power: i32) -&gt; Self {\n        FireTechnique {\n            name: name.to_string(),\n            base_power,\n        }\n    }\n}\n\nimpl Technique for FireTechnique {\n    type Output = String;  // \u6210\u529f\u6642\u306f\u8aac\u660e\u6587\u5b57\u5217\n    type Error = String;   // \u30a8\u30e9\u30fc\u6642\u306f\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\n\n    fn cast(&amp;self, power: i32) -&gt; Result&lt;Self::Output, Self::Error&gt; {\n        if power &gt;= self.required_power() {\n            Ok(format!(\"{}\u3092\u767a\u52d5\uff01\u30c0\u30e1\u30fc\u30b8: {}\", self.name, power))\n        } else {\n            Err(format!(\"\u546a\u529b\u4e0d\u8db3\u3002\u5fc5\u8981: {}, \u73fe\u5728: {}\", self.required_power(), power))\n        }\n    }\n\n    fn required_power(&amp;self) -&gt; i32 {\n        self.base_power\n    }\n}\n\nfn execute_technique&lt;T: Technique&gt;(technique: &amp;T, available_power: i32)\nwhere\n    T::Output: std::fmt::Display,\n    T::Error: std::fmt::Display,\n{\n    match technique.cast(available_power) {\n        Ok(result) =&gt; println!(\"\u2713 {}\", result),\n        Err(error) =&gt; println!(\"\u2717 {}\", error),\n    }\n}\n\nfn main() {\n    let fire_blast = FireTechnique::new(\"\u706b\u708e\u8853\", 800);\n\n    execute_technique(&amp;fire_blast, 1000);  // \u6210\u529f\n    execute_technique(&amp;fire_blast, 500);   // \u5931\u6557\n}\n</code></pre>"},{"location":"chapter04/traits/#_7","title":"\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u3064\u30c8\u30ec\u30a4\u30c8","text":"<pre><code>trait Converter&lt;T, U&gt; {\n    fn convert(&amp;self, input: T) -&gt; U;\n}\n\nstruct PowerConverter;\n\nimpl Converter&lt;i32, String&gt; for PowerConverter {\n    fn convert(&amp;self, power: i32) -&gt; String {\n        match power {\n            0..=500 =&gt; \"\u5f31\u3044\".to_string(),\n            501..=1500 =&gt; \"\u666e\u901a\".to_string(),\n            1501..=3000 =&gt; \"\u5f37\u3044\".to_string(),\n            _ =&gt; \"\u6700\u5f37\".to_string(),\n        }\n    }\n}\n\nimpl Converter&lt;String, i32&gt; for PowerConverter {\n    fn convert(&amp;self, grade: String) -&gt; i32 {\n        match grade.as_str() {\n            \"4\u7d1a\" =&gt; 200,\n            \"3\u7d1a\" =&gt; 500,\n            \"2\u7d1a\" =&gt; 800,\n            \"1\u7d1a\" =&gt; 1200,\n            \"\u7279\u7d1a\" =&gt; 2500,\n            _ =&gt; 0,\n        }\n    }\n}\n\nfn main() {\n    let converter = PowerConverter;\n\n    // i32 -&gt; String\n    let description = converter.convert(1800);\n    println!(\"\u546a\u529b1800: {}\", description);\n\n    // String -&gt; i32\n    let power = converter.convert(\"\u7279\u7d1a\".to_string());\n    println!(\"\u7279\u7d1a\u306e\u546a\u529b: {}\", power);\n}\n</code></pre>"},{"location":"chapter04/traits/#_8","title":"\u9ad8\u5ea6\u306a\u30c8\u30ec\u30a4\u30c8\u4f7f\u7528\u6cd5","text":""},{"location":"chapter04/traits/#where","title":"\u30c8\u30ec\u30a4\u30c8\u5883\u754c\u3068where\u53e5","text":"<pre><code>use std::fmt::Display;\n\n// \u8907\u96d1\u306a\u30c8\u30ec\u30a4\u30c8\u5883\u754c\nfn analyze_and_display&lt;T&gt;(item: T)\nwhere\n    T: Display + Clone + PartialOrd,\n{\n    let cloned = item.clone();\n    println!(\"\u30a2\u30a4\u30c6\u30e0: {}\", item);\n    println!(\"\u30af\u30ed\u30fc\u30f3: {}\", cloned);\n\n    if item &gt; cloned {\n        println!(\"\u5143 &gt; \u30af\u30ed\u30fc\u30f3\");\n    } else {\n        println!(\"\u5143 &lt;= \u30af\u30ed\u30fc\u30f3\");\n    }\n}\n\n// \u8907\u6570\u306e\u30c8\u30ec\u30a4\u30c8\u5883\u754c\nfn compare_and_process&lt;T, U&gt;(item1: T, item2: U) -&gt; String\nwhere\n    T: Display + PartialOrd&lt;U&gt;,\n    U: Display,\n{\n    if item1 &gt; item2 {\n        format!(\"{} \u306f {} \u3088\u308a\u5927\u304d\u3044\", item1, item2)\n    } else {\n        format!(\"{} \u306f {} \u4ee5\u4e0b\", item1, item2)\n    }\n}\n\nfn main() {\n    analyze_and_display(42);\n    analyze_and_display(\"\u4e94\u6761\u609f\");\n\n    let result = compare_and_process(1500, 1000);\n    println!(\"{}\", result);\n}\n</code></pre>"},{"location":"chapter04/traits/#_9","title":"\u30c8\u30ec\u30a4\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8","text":"<pre><code>trait Ability {\n    fn name(&amp;self) -&gt; &amp;str;\n    fn activate(&amp;self, power: i32) -&gt; String;\n}\n\nstruct Limitless {\n    technique_name: String,\n}\n\nimpl Limitless {\n    fn new(name: &amp;str) -&gt; Self {\n        Limitless {\n            technique_name: name.to_string(),\n        }\n    }\n}\n\nimpl Ability for Limitless {\n    fn name(&amp;self) -&gt; &amp;str {\n        &amp;self.technique_name\n    }\n\n    fn activate(&amp;self, power: i32) -&gt; String {\n        format!(\"\u7121\u4e0b\u9650\u8853\u5f0f\u300e{}\u300f\u767a\u52d5\uff01\u5a01\u529b: {}\", self.technique_name, power * 2)\n    }\n}\n\nstruct BlackFlash;\n\nimpl Ability for BlackFlash {\n    fn name(&amp;self) -&gt; &amp;str {\n        \"\u9ed2\u9583\"\n    }\n\n    fn activate(&amp;self, power: i32) -&gt; String {\n        format!(\"\u9ed2\u9583\u767a\u52d5\uff01\u5a01\u529b: {}\", power * power / 100)\n    }\n}\n\n// \u30c8\u30ec\u30a4\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30d9\u30af\u30bf\u30fc\nfn main() {\n    let abilities: Vec&lt;Box&lt;dyn Ability&gt;&gt; = vec![\n        Box::new(Limitless::new(\"\u84bc\")),\n        Box::new(Limitless::new(\"\u8d6b\")),\n        Box::new(BlackFlash),\n    ];\n\n    for ability in abilities {\n        println!(\"\u80fd\u529b: {}\", ability.name());\n        println!(\"\u7d50\u679c: {}\", ability.activate(1000));\n        println!();\n    }\n}\n</code></pre>"},{"location":"chapter04/traits/#-_2","title":"\u5b9f\u8df5\u4f8b - \u7dcf\u5408\u7684\u306a\u546a\u8853\u30b7\u30b9\u30c6\u30e0","text":"<pre><code>use std::fmt;\n\n// \u57fa\u672c\u7684\u306a\u80fd\u529b\u30c8\u30ec\u30a4\u30c8\ntrait Entity {\n    fn name(&amp;self) -&gt; &amp;str;\n    fn power_level(&amp;self) -&gt; i32;\n    fn entity_type(&amp;self) -&gt; &amp;str;\n}\n\n// \u6226\u95d8\u80fd\u529b\u30c8\u30ec\u30a4\u30c8\ntrait Combat {\n    fn attack_power(&amp;self) -&gt; i32;\n    fn defense_power(&amp;self) -&gt; i32;\n\n    fn battle_effectiveness(&amp;self) -&gt; f64 {\n        (self.attack_power() + self.defense_power()) as f64 / 2.0\n    }\n}\n\n// \u8853\u5f0f\u4f7f\u7528\u80fd\u529b\u30c8\u30ec\u30a4\u30c8\ntrait TechniqueUser {\n    fn available_techniques(&amp;self) -&gt; &amp;[String];\n    fn cast_technique(&amp;self, technique: &amp;str) -&gt; Result&lt;String, String&gt;;\n    fn learn_technique(&amp;mut self, technique: String) -&gt; Result&lt;(), String&gt;;\n}\n\n// \u6210\u9577\u80fd\u529b\u30c8\u30ec\u30a4\u30c8\ntrait Growable {\n    fn experience(&amp;self) -&gt; i32;\n    fn add_experience(&amp;mut self, exp: i32);\n    fn level_up(&amp;mut self) -&gt; Option&lt;String&gt;;\n}\n\n// \u8868\u793a\u30c8\u30ec\u30a4\u30c8\ntrait DetailedDisplay {\n    fn display_stats(&amp;self) -&gt; String;\n    fn display_summary(&amp;self) -&gt; String;\n}\n\n// \u546a\u8853\u5e2b\u5b9f\u88c5\n#[derive(Debug, Clone)]\nstruct Sorcerer {\n    name: String,\n    base_power: i32,\n    techniques: Vec&lt;String&gt;,\n    experience: i32,\n    level: i32,\n}\n\nimpl Sorcerer {\n    fn new(name: &amp;str, base_power: i32) -&gt; Self {\n        Sorcerer {\n            name: name.to_string(),\n            base_power,\n            techniques: Vec::new(),\n            experience: 0,\n            level: 1,\n        }\n    }\n}\n\nimpl Entity for Sorcerer {\n    fn name(&amp;self) -&gt; &amp;str {\n        &amp;self.name\n    }\n\n    fn power_level(&amp;self) -&gt; i32 {\n        self.base_power + (self.level * 100)\n    }\n\n    fn entity_type(&amp;self) -&gt; &amp;str {\n        \"\u546a\u8853\u5e2b\"\n    }\n}\n\nimpl Combat for Sorcerer {\n    fn attack_power(&amp;self) -&gt; i32 {\n        self.power_level() + (self.techniques.len() as i32 * 200)\n    }\n\n    fn defense_power(&amp;self) -&gt; i32 {\n        self.power_level() / 2 + (self.level * 50)\n    }\n}\n\nimpl TechniqueUser for Sorcerer {\n    fn available_techniques(&amp;self) -&gt; &amp;[String] {\n        &amp;self.techniques\n    }\n\n    fn cast_technique(&amp;self, technique: &amp;str) -&gt; Result&lt;String, String&gt; {\n        if self.techniques.contains(&amp;technique.to_string()) {\n            let power = self.attack_power();\n            Ok(format!(\"{}\u304c{}\u3092\u767a\u52d5\uff01\u5a01\u529b: {}\", self.name, technique, power))\n        } else {\n            Err(format!(\"{}\u306f{}\u3092\u7fd2\u5f97\u3057\u3066\u3044\u307e\u305b\u3093\", self.name, technique))\n        }\n    }\n\n    fn learn_technique(&amp;mut self, technique: String) -&gt; Result&lt;(), String&gt; {\n        if self.techniques.contains(&amp;technique) {\n            Err(format!(\"{}\u306f\u65e2\u306b\u7fd2\u5f97\u6e08\u307f\u3067\u3059\", technique))\n        } else if self.techniques.len() &gt;= (self.level as usize * 2) {\n            Err(\"\u3053\u308c\u4ee5\u4e0a\u306e\u8853\u5f0f\u306f\u7fd2\u5f97\u3067\u304d\u307e\u305b\u3093\".to_string())\n        } else {\n            self.techniques.push(technique.clone());\n            Ok(())\n        }\n    }\n}\n\nimpl Growable for Sorcerer {\n    fn experience(&amp;self) -&gt; i32 {\n        self.experience\n    }\n\n    fn add_experience(&amp;mut self, exp: i32) {\n        self.experience += exp;\n    }\n\n    fn level_up(&amp;mut self) -&gt; Option&lt;String&gt; {\n        let required_exp = self.level * 1000;\n        if self.experience &gt;= required_exp {\n            self.level += 1;\n            self.experience -= required_exp;\n            Some(format!(\"{}\u304c\u30ec\u30d9\u30eb{}\u306b\u4e0a\u304c\u308a\u307e\u3057\u305f\uff01\", self.name, self.level))\n        } else {\n            None\n        }\n    }\n}\n\nimpl DetailedDisplay for Sorcerer {\n    fn display_stats(&amp;self) -&gt; String {\n        format!(\n            \"=== {} ===\\n\u7a2e\u5225: {}\\n\u57fa\u672c\u546a\u529b: {}\\n\u7dcf\u5408\u546a\u529b: {}\\n\u653b\u6483\u529b: {}\\n\u9632\u5fa1\u529b: {}\\n\u30ec\u30d9\u30eb: {}\\n\u7d4c\u9a13\u5024: {}\\n\u7fd2\u5f97\u8853\u5f0f: {:?}\\n\u6226\u95d8\u52b9\u679c: {:.1}\",\n            self.name(),\n            self.entity_type(),\n            self.base_power,\n            self.power_level(),\n            self.attack_power(),\n            self.defense_power(),\n            self.level,\n            self.experience(),\n            self.available_techniques(),\n            self.battle_effectiveness()\n        )\n    }\n\n    fn display_summary(&amp;self) -&gt; String {\n        format!(\"{} (Lv.{}, \u546a\u529b: {}, \u8853\u5f0f\u6570: {})\",\n                 self.name(), self.level, self.power_level(), self.techniques.len())\n    }\n}\n\nimpl fmt::Display for Sorcerer {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        write!(f, \"{}\", self.display_summary())\n    }\n}\n\n// \u6c4e\u7528\u7684\u306a\u6226\u95d8\u30b7\u30b9\u30c6\u30e0\nfn conduct_battle&lt;T1, T2&gt;(fighter1: &amp;T1, fighter2: &amp;T2) -&gt; String\nwhere\n    T1: Entity + Combat + DetailedDisplay,\n    T2: Entity + Combat + DetailedDisplay,\n{\n    let mut result = String::new();\n\n    result.push_str(&amp;format!(\"=== \u6226\u95d8: {} vs {} ===\\n\",\n                            fighter1.name(), fighter2.name()));\n\n    result.push_str(&amp;format!(\"{}\u306e\u6226\u95d8\u52b9\u679c: {:.1}\\n\",\n                            fighter1.name(), fighter1.battle_effectiveness()));\n    result.push_str(&amp;format!(\"{}\u306e\u6226\u95d8\u52b9\u679c: {:.1}\\n\",\n                            fighter2.name(), fighter2.battle_effectiveness()));\n\n    if fighter1.battle_effectiveness() &gt; fighter2.battle_effectiveness() {\n        result.push_str(&amp;format!(\"\u52dd\u8005: {}\\n\", fighter1.name()));\n    } else if fighter2.battle_effectiveness() &gt; fighter1.battle_effectiveness() {\n        result.push_str(&amp;format!(\"\u52dd\u8005: {}\\n\", fighter2.name()));\n    } else {\n        result.push_str(\"\u5f15\u304d\u5206\u3051\\n\");\n    }\n\n    result\n}\n\n// \u8a13\u7df4\u30b7\u30b9\u30c6\u30e0\nfn training_session&lt;T&gt;(trainee: &amp;mut T, technique_name: &amp;str, exp_gain: i32) -&gt; Vec&lt;String&gt;\nwhere\n    T: TechniqueUser + Growable + Entity,\n{\n    let mut results = Vec::new();\n\n    // \u8853\u5f0f\u7fd2\u5f97\u306e\u8a66\u884c\n    match trainee.learn_technique(technique_name.to_string()) {\n        Ok(_) =&gt; results.push(format!(\"{}\u304c{}\u3092\u7fd2\u5f97\u3057\u307e\u3057\u305f\uff01\", trainee.name(), technique_name)),\n        Err(e) =&gt; results.push(format!(\"\u7fd2\u5f97\u5931\u6557: {}\", e)),\n    }\n\n    // \u7d4c\u9a13\u5024\u7372\u5f97\n    trainee.add_experience(exp_gain);\n    results.push(format!(\"{}\u304c{}\u306e\u7d4c\u9a13\u5024\u3092\u7372\u5f97\", trainee.name(), exp_gain));\n\n    // \u30ec\u30d9\u30eb\u30a2\u30c3\u30d7\u5224\u5b9a\n    if let Some(levelup_msg) = trainee.level_up() {\n        results.push(levelup_msg);\n    }\n\n    results\n}\n\nfn main() {\n    println!(\"=== \u7dcf\u5408\u546a\u8853\u30b7\u30b9\u30c6\u30e0 ===\");\n\n    // \u546a\u8853\u5e2b\u306e\u4f5c\u6210\n    let mut gojo = Sorcerer::new(\"\u4e94\u6761\u609f\", 2500);\n    let mut yuji = Sorcerer::new(\"\u864e\u6756\u60a0\u4ec1\", 1000);\n\n    println!(\"{}\", gojo.display_stats());\n    println!();\n    println!(\"{}\", yuji.display_stats());\n    println!();\n\n    // \u521d\u671f\u6226\u95d8\n    println!(\"{}\", conduct_battle(&amp;gojo, &amp;yuji));\n\n    // \u8a13\u7df4\u30bb\u30c3\u30b7\u30e7\u30f3\n    println!(\"=== \u864e\u6756\u306e\u8a13\u7df4 ===\");\n    let training_results = training_session(&amp;mut yuji, \"\u9ed2\u9583\", 800);\n    for result in training_results {\n        println!(\"{}\", result);\n    }\n\n    let training_results2 = training_session(&amp;mut yuji, \"\u767a\u6563\", 600);\n    for result in training_results2 {\n        println!(\"{}\", result);\n    }\n\n    println!(\"\\n=== \u8a13\u7df4\u5f8c\u306e\u864e\u6756 ===\");\n    println!(\"{}\", yuji.display_stats());\n\n    // \u518d\u6226\n    println!(\"\\n=== \u518d\u6226 ===\");\n    println!(\"{}\", conduct_battle(&amp;gojo, &amp;yuji));\n\n    // \u8853\u5f0f\u4f7f\u7528\u30c6\u30b9\u30c8\n    println!(\"\\n=== \u8853\u5f0f\u4f7f\u7528\u30c6\u30b9\u30c8 ===\");\n    match yuji.cast_technique(\"\u9ed2\u9583\") {\n        Ok(result) =&gt; println!(\"\u2713 {}\", result),\n        Err(error) =&gt; println!(\"\u2717 {}\", error),\n    }\n\n    match yuji.cast_technique(\"\u5b58\u5728\u3057\u306a\u3044\u8853\u5f0f\") {\n        Ok(result) =&gt; println!(\"\u2713 {}\", result),\n        Err(error) =&gt; println!(\"\u2717 {}\", error),\n    }\n}\n</code></pre>"},{"location":"chapter04/traits/#_10","title":"\u307e\u3068\u3081","text":"<p>\u30c8\u30ec\u30a4\u30c8\u306e\u529b\u3092\u30de\u30b9\u30bf\u30fc\u3067\u304d\u305f\u304b\uff1f\u91cd\u8981\u306a\u30dd\u30a4\u30f3\u30c8\uff1a</p> <ol> <li>\u632f\u308b\u821e\u3044\u306e\u62bd\u8c61\u5316 - \u300c\u4f55\u304c\u3067\u304d\u308b\u304b\u300d\u3092\u578b\u3067\u8868\u73fe</li> <li>\u30b3\u30fc\u30c9\u306e\u518d\u5229\u7528 - \u540c\u3058\u30c8\u30ec\u30a4\u30c8\u3092\u8907\u6570\u306e\u578b\u3067\u5b9f\u88c5</li> <li>\u578b\u5b89\u5168\u6027 - \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u80fd\u529b\u306e\u6709\u7121\u3092\u4fdd\u8a3c</li> <li>\u95a2\u9023\u578b - \u30c8\u30ec\u30a4\u30c8\u56fa\u6709\u306e\u578b\u5b9a\u7fa9</li> <li>\u30c8\u30ec\u30a4\u30c8\u5883\u754c - \u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3068\u306e\u7d44\u307f\u5408\u308f\u305b</li> </ol> <p>\u3053\u308c\u3067\u578b\u306b\u632f\u308b\u821e\u3044\u3092\u4e0e\u3048\u308b\u529b\u3092\u624b\u306b\u5165\u308c\u305f\u3002\u307e\u3055\u306b\u4ffa\u306e\u9818\u57df\u5c55\u958b\u306e\u3088\u3046\u306b\u3001\u62bd\u8c61\u7684\u306a\u6982\u5ff5\u3092\u5177\u4f53\u7684\u306a\u529b\u306b\u5909\u63db\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306a\u3002</p> <p>\u6b21\u306f\u9ad8\u5ea6\u306a\u30c8\u30ec\u30a4\u30c8\u30c6\u30af\u30cb\u30c3\u30af\u3092\u5b66\u307c\u3046\u3002\u3088\u308a\u8907\u96d1\u3067\u5f37\u529b\u306a\u62bd\u8c61\u5316\u306e\u4e16\u754c\u3060\u3002</p> <p>\u300c\u30c8\u30ec\u30a4\u30c8\u3092\u6975\u3081\u308c\u3070\u3001\u578b\u306b\u9b42\u3092\u5bbf\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u300d</p>"},{"location":"chapter05/async/","title":"\u975e\u540c\u671f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 - \u7121\u4e0b\u9650\u306e\u6642\u7a7a\u9593\u64cd\u4f5c","text":""},{"location":"chapter05/async/#-_1","title":"\u975e\u540c\u671f\u306e\u6982\u5ff5 - \u6642\u7a7a\u3092\u64cd\u308b\u529b","text":"<p>\u3064\u3044\u306b\u6765\u305f\u306a\u3001\u6700\u7d42\u7ae0\u300c\u7121\u4e0b\u9650\u546a\u8853\u7de8\u300d\u3060\u3002\u3053\u308c\u307e\u3067\u306e\u5168\u3066\u306e\u6280\u8853\u3092\u7fd2\u5f97\u3057\u305f\u541b\u306a\u3089\u3001\u3053\u306e\u6700\u9ad8\u4f4d\u306e\u5965\u7fa9\u3092\u7406\u89e3\u3067\u304d\u308b\u306f\u305a\u3060\u3002</p> <p>\u975e\u540c\u671f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306f\u4ffa\u306e\u7121\u4e0b\u9650\u546a\u8853\u306e\u3088\u3046\u306b\u3001\u6642\u9593\u3068\u7a7a\u9593\u306e\u6982\u5ff5\u3092\u64cd\u4f5c\u3059\u308b\u6280\u8853\u3060\u3002\u8907\u6570\u306e\u51e6\u7406\u3092\u540c\u6642\u306b\u9032\u884c\u3055\u305b\u3001\u5f85\u6a5f\u6642\u9593\u3092\u7121\u306b\u3057\u3066\u3001\u7121\u9650\u306e\u52b9\u7387\u3092\u5b9f\u73fe\u3059\u308b\u3002</p> <p>\u4e94\u6761\u5148\u751f\u306e\u89e3\u8aac</p> <p>\u975e\u540c\u671f\u51e6\u7406\u3067\u306f\u3001\u4e00\u3064\u306e\u51e6\u7406\u304c\u7d42\u308f\u308b\u306e\u3092\u5f85\u3064\u9593\u306b\u3001\u4ed6\u306e\u51e6\u7406\u3092\u9032\u3081\u3089\u308c\u308b\u3002 \u4f8b\u3048\u3070\u3001\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\u4e2d\u306b\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u901a\u4fe1\u3092\u884c\u3063\u305f\u308a\u3001\u8907\u6570\u306eAPI\u3092\u4e26\u884c\u3057\u3066\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3002</p>"},{"location":"chapter05/async/#_1","title":"\u57fa\u672c\u7684\u306a\u975e\u540c\u671f\u6982\u5ff5","text":""},{"location":"chapter05/async/#future-asyncawait","title":"Future \u3068 async/await","text":"<pre><code>use std::time::Duration;\n\n// \u975e\u540c\u671f\u95a2\u6570\u306e\u5b9a\u7fa9\nasync fn basic_technique() -&gt; String {\n    \"\u57fa\u672c\u8853\u5f0f\u5b8c\u4e86\".to_string()\n}\n\n// \u6642\u9593\u306e\u304b\u304b\u308b\u975e\u540c\u671f\u51e6\u7406\nasync fn time_consuming_technique(power: i32) -&gt; String {\n    // \u546a\u529b\u30c1\u30e3\u30fc\u30b8\u6642\u9593\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\n    tokio::time::sleep(Duration::from_millis(1000)).await;\n    format!(\"{}\u306e\u546a\u529b\u3067\u8853\u5f0f\u767a\u52d5\u5b8c\u4e86\", power)\n}\n\n// \u30a8\u30e9\u30fc\u304c\u767a\u751f\u3059\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u975e\u540c\u671f\u95a2\u6570\nasync fn risky_technique(success_rate: f32) -&gt; Result&lt;String, String&gt; {\n    tokio::time::sleep(Duration::from_millis(500)).await;\n\n    if success_rate &gt; 0.7 {\n        Ok(\"\u9ad8\u96e3\u5ea6\u8853\u5f0f\u6210\u529f\uff01\".to_string())\n    } else {\n        Err(\"\u8853\u5f0f\u767a\u52d5\u5931\u6557 - \u546a\u529b\u4e0d\u8db3\".to_string())\n    }\n}\n\n#[tokio::main]\nasync fn main() {\n    println!(\"=== \u57fa\u672c\u7684\u306a\u975e\u540c\u671f\u51e6\u7406 ===\");\n\n    // \u57fa\u672c\u7684\u306a\u975e\u540c\u671f\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\n    let result = basic_technique().await;\n    println!(\"\u7d50\u679c: {}\", result);\n\n    // \u6642\u9593\u306e\u304b\u304b\u308b\u51e6\u7406\n    println!(\"\u546a\u529b\u30c1\u30e3\u30fc\u30b8\u958b\u59cb...\");\n    let power_result = time_consuming_technique(1500).await;\n    println!(\"\u7d50\u679c: {}\", power_result);\n\n    // \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\n    match risky_technique(0.8).await {\n        Ok(success) =&gt; println!(\"\u2713 {}\", success),\n        Err(error) =&gt; println!(\"\u2717 {}\", error),\n    }\n\n    match risky_technique(0.5).await {\n        Ok(success) =&gt; println!(\"\u2713 {}\", success),\n        Err(error) =&gt; println!(\"\u2717 {}\", error),\n    }\n}\n</code></pre>"},{"location":"chapter05/async/#_2","title":"\u4e26\u884c\u51e6\u7406\u306e\u57fa\u672c","text":"<pre><code>use std::time::{Duration, Instant};\nuse tokio::time::sleep;\n\nasync fn cast_blue() -&gt; String {\n    println!(\"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\u8a60\u5531\u958b\u59cb...\");\n    sleep(Duration::from_millis(800)).await;\n    \"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\u767a\u52d5\u5b8c\u4e86\uff01\".to_string()\n}\n\nasync fn cast_red() -&gt; String {\n    println!(\"\u8853\u5f0f\u53cd\u8ee2\u300e\u8d6b\u300f\u8a60\u5531\u958b\u59cb...\");\n    sleep(Duration::from_millis(1200)).await;\n    \"\u8853\u5f0f\u53cd\u8ee2\u300e\u8d6b\u300f\u767a\u52d5\u5b8c\u4e86\uff01\".to_string()\n}\n\nasync fn cast_hollow() -&gt; String {\n    println!(\"\u865a\u5f0f\u300e\u8308\u300f\u8a60\u5531\u958b\u59cb...\");\n    sleep(Duration::from_millis(1500)).await;\n    \"\u865a\u5f0f\u300e\u8308\u300f\u767a\u52d5\u5b8c\u4e86\uff01\".to_string()\n}\n\n#[tokio::main]\nasync fn main() {\n    println!(\"=== \u4e26\u884c\u51e6\u7406\u30c7\u30e2 ===\");\n\n    // \u9010\u6b21\u51e6\u7406\uff08\u9045\u3044\uff09\n    let start = Instant::now();\n\n    println!(\"\\n--- \u9010\u6b21\u51e6\u7406 ---\");\n    let blue_result = cast_blue().await;\n    let red_result = cast_red().await;\n    let hollow_result = cast_hollow().await;\n\n    println!(\"{}\", blue_result);\n    println!(\"{}\", red_result);\n    println!(\"{}\", hollow_result);\n\n    let sequential_duration = start.elapsed();\n    println!(\"\u9010\u6b21\u51e6\u7406\u6642\u9593: {:?}\", sequential_duration);\n\n    // \u4e26\u884c\u51e6\u7406\uff08\u901f\u3044\uff09\n    let start = Instant::now();\n\n    println!(\"\\n--- \u4e26\u884c\u51e6\u7406 ---\");\n    let (blue_result, red_result, hollow_result) = tokio::join!(\n        cast_blue(),\n        cast_red(),\n        cast_hollow()\n    );\n\n    println!(\"{}\", blue_result);\n    println!(\"{}\", red_result);\n    println!(\"{}\", hollow_result);\n\n    let concurrent_duration = start.elapsed();\n    println!(\"\u4e26\u884c\u51e6\u7406\u6642\u9593: {:?}\", concurrent_duration);\n\n    println!(\"\\n\u52b9\u7387\u5411\u4e0a: {:.1}x\",\n             sequential_duration.as_millis() as f64 / concurrent_duration.as_millis() as f64);\n}\n</code></pre>"},{"location":"chapter05/async/#_3","title":"\u9ad8\u5ea6\u306a\u4e26\u884c\u5236\u5fa1","text":""},{"location":"chapter05/async/#select","title":"select! \u30de\u30af\u30ed\u306b\u3088\u308b\u7af6\u5408\u51e6\u7406","text":"<pre><code>use tokio::time::{sleep, Duration};\nuse tokio::select;\n\nasync fn gojo_technique() -&gt; String {\n    sleep(Duration::from_millis(800)).await;\n    \"\u4e94\u6761\u306e\u7121\u4e0b\u9650\u8853\u5f0f\u767a\u52d5\uff01\".to_string()\n}\n\nasync fn sukuna_technique() -&gt; String {\n    sleep(Duration::from_millis(1200)).await;\n    \"\u5bbf\u513a\u306e\u65ac\u6483\u767a\u52d5\uff01\".to_string()\n}\n\nasync fn timeout_guard(duration: Duration) -&gt; String {\n    sleep(duration).await;\n    \"\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8 - \u8853\u5f0f\u767a\u52d5\u6642\u9593\u5207\u308c\".to_string()\n}\n\n#[tokio::main]\nasync fn main() {\n    println!(\"=== select! \u30de\u30af\u30ed\u30c7\u30e2 ===\");\n\n    // \u6700\u521d\u306b\u5b8c\u4e86\u3057\u305f\u51e6\u7406\u304c\u52dd\u5229\n    let result = select! {\n        gojo_result = gojo_technique() =&gt; {\n            format!(\"\u52dd\u8005: {}\", gojo_result)\n        },\n        sukuna_result = sukuna_technique() =&gt; {\n            format!(\"\u52dd\u8005: {}\", sukuna_result)\n        },\n        timeout_result = timeout_guard(Duration::from_millis(1000)) =&gt; {\n            format!(\"\u7d50\u679c: {}\", timeout_result)\n        }\n    };\n\n    println!(\"{}\", result);\n\n    // \u6761\u4ef6\u4ed8\u304dselect\n    let mut counter = 0;\n\n    loop {\n        select! {\n            _ = sleep(Duration::from_millis(200)) =&gt; {\n                counter += 1;\n                println!(\"\u30ab\u30a6\u30f3\u30bf\u30fc: {}\", counter);\n\n                if counter &gt;= 5 {\n                    println!(\"\u30ab\u30a6\u30f3\u30bf\u30fc\u5b8c\u4e86\");\n                    break;\n                }\n            },\n            _ = sleep(Duration::from_millis(1500)), if counter &lt; 3 =&gt; {\n                println!(\"\u65e9\u671f\u7d42\u4e86\u6761\u4ef6\u767a\u52d5\");\n                break;\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"chapter05/async/#mutex","title":"Mutex \u3068\u30c1\u30e3\u30f3\u30cd\u30eb\u306b\u3088\u308b\u72b6\u614b\u7ba1\u7406","text":"<pre><code>use std::sync::Arc;\nuse tokio::sync::{Mutex, mpsc};\nuse tokio::time::{sleep, Duration};\nuse std::collections::HashMap;\n\n// \u5171\u6709\u72b6\u614b\u3092\u6301\u3064\u546a\u8853\u5e2b\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0\n#[derive(Debug, Clone)]\nstruct Sorcerer {\n    name: String,\n    power: i32,\n    is_fighting: bool,\n}\n\nimpl Sorcerer {\n    fn new(name: &amp;str, power: i32) -&gt; Self {\n        Sorcerer {\n            name: name.to_string(),\n            power,\n            is_fighting: false,\n        }\n    }\n\n    fn start_fighting(&amp;mut self) {\n        self.is_fighting = true;\n    }\n\n    fn stop_fighting(&amp;mut self) {\n        self.is_fighting = false;\n    }\n\n    fn gain_experience(&amp;mut self, exp: i32) {\n        self.power += exp;\n    }\n}\n\n// \u6226\u95d8\u30b7\u30b9\u30c6\u30e0\nstruct BattleSystem {\n    sorcerers: Arc&lt;Mutex&lt;HashMap&lt;String, Sorcerer&gt;&gt;&gt;,\n}\n\nimpl BattleSystem {\n    fn new() -&gt; Self {\n        BattleSystem {\n            sorcerers: Arc::new(Mutex::new(HashMap::new())),\n        }\n    }\n\n    async fn add_sorcerer(&amp;self, name: &amp;str, power: i32) {\n        let mut sorcerers = self.sorcerers.lock().await;\n        sorcerers.insert(name.to_string(), Sorcerer::new(name, power));\n        println!(\"{}\u304c\u6226\u5834\u306b\u53c2\u6226\uff08\u546a\u529b: {}\uff09\", name, power);\n    }\n\n    async fn start_battle(&amp;self, name: &amp;str) -&gt; Result&lt;(), String&gt; {\n        let mut sorcerers = self.sorcerers.lock().await;\n\n        match sorcerers.get_mut(name) {\n            Some(sorcerer) =&gt; {\n                if sorcerer.is_fighting {\n                    Err(format!(\"{}\u306f\u65e2\u306b\u6226\u95d8\u4e2d\u3067\u3059\", name))\n                } else {\n                    sorcerer.start_fighting();\n                    println!(\"{}\u304c\u6226\u95d8\u3092\u958b\u59cb\", name);\n                    Ok(())\n                }\n            },\n            None =&gt; Err(format!(\"{}\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\", name)),\n        }\n    }\n\n    async fn end_battle(&amp;self, name: &amp;str, exp_gained: i32) -&gt; Result&lt;(), String&gt; {\n        let mut sorcerers = self.sorcerers.lock().await;\n\n        match sorcerers.get_mut(name) {\n            Some(sorcerer) =&gt; {\n                sorcerer.stop_fighting();\n                sorcerer.gain_experience(exp_gained);\n                println!(\"{}\u304c\u6226\u95d8\u7d42\u4e86\uff08\u7d4c\u9a13\u5024+{}, \u73fe\u5728\u546a\u529b: {}\uff09\",\n                        name, exp_gained, sorcerer.power);\n                Ok(())\n            },\n            None =&gt; Err(format!(\"{}\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\", name)),\n        }\n    }\n\n    async fn get_status(&amp;self, name: &amp;str) -&gt; Option&lt;Sorcerer&gt; {\n        let sorcerers = self.sorcerers.lock().await;\n        sorcerers.get(name).cloned()\n    }\n\n    async fn list_all(&amp;self) -&gt; Vec&lt;Sorcerer&gt; {\n        let sorcerers = self.sorcerers.lock().await;\n        sorcerers.values().cloned().collect()\n    }\n}\n\n// \u6226\u95d8\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\nasync fn simulate_battle(\n    system: Arc&lt;BattleSystem&gt;,\n    name: String,\n    duration: Duration,\n    sender: mpsc::Sender&lt;String&gt;\n) {\n    // \u6226\u95d8\u958b\u59cb\n    if let Err(e) = system.start_battle(&amp;name).await {\n        let _ = sender.send(format!(\"\u6226\u95d8\u958b\u59cb\u30a8\u30e9\u30fc: {}\", e)).await;\n        return;\n    }\n\n    // \u6226\u95d8\u6642\u9593\n    sleep(duration).await;\n\n    // \u6226\u95d8\u7d42\u4e86\u3068\u7d4c\u9a13\u5024\u7372\u5f97\n    let exp = (duration.as_millis() / 10) as i32;\n    if let Err(e) = system.end_battle(&amp;name, exp).await {\n        let _ = sender.send(format!(\"\u6226\u95d8\u7d42\u4e86\u30a8\u30e9\u30fc: {}\", e)).await;\n        return;\n    }\n\n    let _ = sender.send(format!(\"{}\u306e\u6226\u95d8\u5b8c\u4e86\", name)).await;\n}\n\n#[tokio::main]\nasync fn main() {\n    println!(\"=== \u4e26\u884c\u6226\u95d8\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0 ===\");\n\n    let system = Arc::new(BattleSystem::new());\n\n    // \u546a\u8853\u5e2b\u3092\u8ffd\u52a0\n    system.add_sorcerer(\"\u4e94\u6761\u609f\", 3000).await;\n    system.add_sorcerer(\"\u864e\u6756\u60a0\u4ec1\", 1200).await;\n    system.add_sorcerer(\"\u4f0f\u9ed2\u6075\", 1000).await;\n    system.add_sorcerer(\"\u91d8\u5d0e\u91ce\u8594\u8587\", 900).await;\n\n    // \u30c1\u30e3\u30f3\u30cd\u30eb\u306e\u4f5c\u6210\n    let (tx, mut rx) = mpsc::channel::&lt;String&gt;(32);\n\n    // \u4e26\u884c\u6226\u95d8\u306e\u958b\u59cb\n    let battles = vec![\n        (system.clone(), \"\u4e94\u6761\u609f\".to_string(), Duration::from_millis(1000), tx.clone()),\n        (system.clone(), \"\u864e\u6756\u60a0\u4ec1\".to_string(), Duration::from_millis(1500), tx.clone()),\n        (system.clone(), \"\u4f0f\u9ed2\u6075\".to_string(), Duration::from_millis(800), tx.clone()),\n        (system.clone(), \"\u91d8\u5d0e\u91ce\u8594\u8587\".to_string(), Duration::from_millis(1200), tx.clone()),\n    ];\n\n    // \u5168\u3066\u306e\u6226\u95d8\u3092\u4e26\u884c\u5b9f\u884c\n    for (sys, name, duration, sender) in battles {\n        tokio::spawn(simulate_battle(sys, name, duration, sender));\n    }\n\n    // \u30c1\u30e3\u30f3\u30cd\u30eb\u3092\u9589\u3058\u308b\n    drop(tx);\n\n    // \u6226\u95d8\u7d50\u679c\u3092\u53d7\u4fe1\n    while let Some(message) = rx.recv().await {\n        println!(\"\ud83d\udce8 {}\", message);\n    }\n\n    // \u6700\u7d42\u72b6\u614b\u3092\u8868\u793a\n    println!(\"\\n=== \u6700\u7d42\u6226\u95d8\u7d50\u679c ===\");\n    let all_sorcerers = system.list_all().await;\n    for sorcerer in all_sorcerers {\n        println!(\"{}: \u546a\u529b{} (\u6226\u95d8\u4e2d: {})\",\n                sorcerer.name, sorcerer.power, sorcerer.is_fighting);\n    }\n}\n</code></pre>"},{"location":"chapter05/async/#-web-api","title":"\u5b9f\u8df5\u4f8b - \u975e\u540c\u671fWeb API\u30af\u30e9\u30a4\u30a2\u30f3\u30c8","text":"<pre><code>use std::collections::HashMap;\nuse std::time::Duration;\nuse tokio::time::sleep;\nuse serde::{Deserialize, Serialize};\n\n// \u30e2\u30c3\u30afAPI\u30ec\u30b9\u30dd\u30f3\u30b9\n#[derive(Debug, Serialize, Deserialize, Clone)]\nstruct CurseData {\n    id: u32,\n    name: String,\n    grade: String,\n    power_level: i32,\n    location: String,\n}\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct ApiResponse&lt;T&gt; {\n    success: bool,\n    data: Option&lt;T&gt;,\n    error: Option&lt;String&gt;,\n}\n\n// \u975e\u540c\u671fAPI\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\nstruct CurseApiClient {\n    base_url: String,\n    timeout: Duration,\n}\n\nimpl CurseApiClient {\n    fn new(base_url: &amp;str) -&gt; Self {\n        CurseApiClient {\n            base_url: base_url.to_string(),\n            timeout: Duration::from_secs(5),\n        }\n    }\n\n    // \u30e2\u30c3\u30afAPI\u30b3\u30fc\u30eb - \u5358\u4e00\u306e\u546a\u970a\u30c7\u30fc\u30bf\u53d6\u5f97\n    async fn get_curse(&amp;self, id: u32) -&gt; Result&lt;CurseData, String&gt; {\n        println!(\"\ud83d\udd0d \u546a\u970aID{}\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u4e2d...\", id);\n\n        // \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u9045\u5ef6\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\n        sleep(Duration::from_millis(300 + (id * 50) as u64)).await;\n\n        // \u30e2\u30c3\u30af\u30c7\u30fc\u30bf\n        let mock_data = match id {\n            1 =&gt; CurseData {\n                id: 1,\n                name: \"\u7279\u7d1a\u546a\u970a\u300e\u30ea\u30ab\u300f\".to_string(),\n                grade: \"\u7279\u7d1a\".to_string(),\n                power_level: 2500,\n                location: \"\u6771\u4eac\u90fd\u7acb\u546a\u8853\u9ad8\u7b49\u5c02\u9580\u5b66\u6821\".to_string(),\n            },\n            2 =&gt; CurseData {\n                id: 2,\n                name: \"\u82b1\u5fa1\".to_string(),\n                grade: \"\u7279\u7d1a\".to_string(),\n                power_level: 2200,\n                location: \"\u6e0b\u8c37\".to_string(),\n            },\n            3 =&gt; CurseData {\n                id: 3,\n                name: \"\u6f0f\u745a\".to_string(),\n                grade: \"\u7279\u7d1a\".to_string(),\n                power_level: 2000,\n                location: \"\u5bcc\u58eb\u5c71\".to_string(),\n            },\n            _ =&gt; return Err(format!(\"\u546a\u970aID{}\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\", id)),\n        };\n\n        Ok(mock_data)\n    }\n\n    // \u8907\u6570\u306e\u546a\u970a\u30c7\u30fc\u30bf\u3092\u4e26\u884c\u53d6\u5f97\n    async fn get_multiple_curses(&amp;self, ids: Vec&lt;u32&gt;) -&gt; HashMap&lt;u32, Result&lt;CurseData, String&gt;&gt; {\n        let mut results = HashMap::new();\n        let futures: Vec&lt;_&gt; = ids.iter().map(|&amp;id| async move {\n            (id, self.get_curse(id).await)\n        }).collect();\n\n        // \u5168\u3066\u306e\u975e\u540c\u671f\u51e6\u7406\u3092\u4e26\u884c\u5b9f\u884c\n        let completed = futures::future::join_all(futures).await;\n\n        for (id, result) in completed {\n            results.insert(id, result);\n        }\n\n        results\n    }\n\n    // \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u4ed8\u304dAPI\u547c\u3073\u51fa\u3057\n    async fn get_curse_with_timeout(&amp;self, id: u32) -&gt; Result&lt;CurseData, String&gt; {\n        match tokio::time::timeout(self.timeout, self.get_curse(id)).await {\n            Ok(result) =&gt; result,\n            Err(_) =&gt; Err(format!(\"\u546a\u970aID{}\u306e\u53d6\u5f97\u304c\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3057\u307e\u3057\u305f\", id)),\n        }\n    }\n\n    // \u546a\u970a\u306e\u8105\u5a01\u30ec\u30d9\u30eb\u5206\u6790\n    async fn analyze_threat_level(&amp;self, ids: Vec&lt;u32&gt;) -&gt; Result&lt;String, String&gt; {\n        let results = self.get_multiple_curses(ids).await;\n\n        let mut total_power = 0;\n        let mut curse_count = 0;\n        let mut special_grade_count = 0;\n        let mut locations = Vec::new();\n\n        for (id, result) in results {\n            match result {\n                Ok(curse) =&gt; {\n                    total_power += curse.power_level;\n                    curse_count += 1;\n\n                    if curse.grade == \"\u7279\u7d1a\" {\n                        special_grade_count += 1;\n                    }\n\n                    locations.push(curse.location);\n                    println!(\"\u2713 {}: {} (\u546a\u529b: {})\", id, curse.name, curse.power_level);\n                },\n                Err(e) =&gt; {\n                    println!(\"\u2717 ID {}: {}\", id, e);\n                }\n            }\n        }\n\n        if curse_count == 0 {\n            return Err(\"\u6709\u52b9\u306a\u546a\u970a\u30c7\u30fc\u30bf\u304c\u53d6\u5f97\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\".to_string());\n        }\n\n        let average_power = total_power / curse_count;\n        let threat_level = match average_power {\n            0..=500 =&gt; \"\u4f4e\",\n            501..=1500 =&gt; \"\u4e2d\",\n            1501..=2000 =&gt; \"\u9ad8\",\n            _ =&gt; \"\u6975\u9ad8\",\n        };\n\n        Ok(format!(\n            \"=== \u8105\u5a01\u30ec\u30d9\u30eb\u5206\u6790\u7d50\u679c ===\\n\\\n            \u5206\u6790\u5bfe\u8c61: {}\u4f53\\n\\\n            \u7279\u7d1a\u546a\u970a: {}\u4f53\\n\\\n            \u5e73\u5747\u546a\u529b: {}\\n\\\n            \u8105\u5a01\u30ec\u30d9\u30eb: {}\\n\\\n            \u51fa\u73fe\u5730\u57df: {:?}\",\n            curse_count, special_grade_count, average_power, threat_level, locations\n        ))\n    }\n}\n\n// \u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u51e6\u7406\nasync fn stream_curse_monitoring(client: &amp;CurseApiClient) {\n    println!(\"\\n=== \u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u546a\u970a\u76e3\u8996\u958b\u59cb ===\");\n\n    let curse_ids = vec![1, 2, 3];\n\n    for round in 1..=3 {\n        println!(\"\\n--- \u76e3\u8996\u30e9\u30a6\u30f3\u30c9 {} ---\", round);\n\n        let futures: Vec&lt;_&gt; = curse_ids.iter().map(|&amp;id| async move {\n            let start = std::time::Instant::now();\n            let result = client.get_curse_with_timeout(id).await;\n            let duration = start.elapsed();\n            (id, result, duration)\n        }).collect();\n\n        // \u7d50\u679c\u3092\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u5f62\u5f0f\u3067\u8868\u793a\n        for (id, result, duration) in futures::future::join_all(futures).await {\n            match result {\n                Ok(curse) =&gt; {\n                    println!(\"\ud83d\udcca [{}ms] {}: {} (\u8105\u5a01\u5ea6: {})\",\n                            duration.as_millis(), curse.name, curse.location, curse.power_level);\n                },\n                Err(e) =&gt; {\n                    println!(\"\u274c [{}ms] ID {}: {}\", duration.as_millis(), id, e);\n                }\n            }\n        }\n\n        // \u6b21\u306e\u30e9\u30a6\u30f3\u30c9\u307e\u3067\u5f85\u6a5f\n        if round &lt; 3 {\n            sleep(Duration::from_millis(1000)).await;\n        }\n    }\n}\n\n#[tokio::main]\nasync fn main() {\n    println!(\"=== \u975e\u540c\u671f\u546a\u970a\u60c5\u5831\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0 ===\");\n\n    let client = CurseApiClient::new(\"https://api.jujutsu-kaisen.com\");\n\n    // \u5358\u4e00\u306e\u546a\u970a\u30c7\u30fc\u30bf\u53d6\u5f97\n    println!(\"\\n--- \u5358\u4e00\u30c7\u30fc\u30bf\u53d6\u5f97 ---\");\n    match client.get_curse(1).await {\n        Ok(curse) =&gt; println!(\"\u53d6\u5f97\u6210\u529f: {:?}\", curse),\n        Err(e) =&gt; println!(\"\u53d6\u5f97\u5931\u6557: {}\", e),\n    }\n\n    // \u8907\u6570\u30c7\u30fc\u30bf\u306e\u4e26\u884c\u53d6\u5f97\n    println!(\"\\n--- \u8907\u6570\u30c7\u30fc\u30bf\u4e26\u884c\u53d6\u5f97 ---\");\n    let start = std::time::Instant::now();\n    let results = client.get_multiple_curses(vec![1, 2, 3, 4]).await;\n    let duration = start.elapsed();\n\n    println!(\"\u53d6\u5f97\u6642\u9593: {:?}\", duration);\n    for (id, result) in results {\n        match result {\n            Ok(curse) =&gt; println!(\"\u2713 ID {}: {}\", id, curse.name),\n            Err(e) =&gt; println!(\"\u2717 ID {}: {}\", id, e),\n        }\n    }\n\n    // \u8105\u5a01\u30ec\u30d9\u30eb\u5206\u6790\n    println!(\"\\n--- \u8105\u5a01\u30ec\u30d9\u30eb\u5206\u6790 ---\");\n    match client.analyze_threat_level(vec![1, 2, 3]).await {\n        Ok(analysis) =&gt; println!(\"{}\", analysis),\n        Err(e) =&gt; println!(\"\u5206\u6790\u30a8\u30e9\u30fc: {}\", e),\n    }\n\n    // \u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u76e3\u8996\n    stream_curse_monitoring(&amp;client).await;\n}\n\n// \u5916\u90e8\u30af\u30ec\u30fc\u30c8\u4f9d\u5b58\u306e\u4f8b\uff08Cargo.toml\u306b\u8ffd\u52a0\u304c\u5fc5\u8981\uff09\n/*\n[dependencies]\ntokio = { version = \"1.0\", features = [\"full\"] }\nserde = { version = \"1.0\", features = [\"derive\"] }\nfutures = \"0.3\"\n*/\n</code></pre>"},{"location":"chapter05/async/#_4","title":"\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3068\u56de\u5fa9\u6226\u7565","text":"<pre><code>use std::time::Duration;\nuse tokio::time::{sleep, timeout};\n\n#[derive(Debug)]\nenum TechniqueError {\n    PowerInsufficient(i32, i32), // (required, available)\n    ConnectionLost,\n    Timeout,\n    SystemOverload,\n}\n\nimpl std::fmt::Display for TechniqueError {\n    fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter) -&gt; std::fmt::Result {\n        match self {\n            TechniqueError::PowerInsufficient(req, avail) =&gt; {\n                write!(f, \"\u546a\u529b\u4e0d\u8db3: \u5fc5\u8981{}, \u5229\u7528\u53ef\u80fd{}\", req, avail)\n            },\n            TechniqueError::ConnectionLost =&gt; write!(f, \"\u546a\u529b\u306e\u6d41\u308c\u304c\u9014\u7d76\"),\n            TechniqueError::Timeout =&gt; write!(f, \"\u8853\u5f0f\u767a\u52d5\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\"),\n            TechniqueError::SystemOverload =&gt; write!(f, \"\u8853\u5f0f\u30b7\u30b9\u30c6\u30e0\u904e\u8ca0\u8377\"),\n        }\n    }\n}\n\nimpl std::error::Error for TechniqueError {}\n\n// \u56de\u5fa9\u53ef\u80fd\u306a\u975e\u540c\u671f\u51e6\u7406\nasync fn unstable_technique(power: i32, attempt: u32) -&gt; Result&lt;String, TechniqueError&gt; {\n    // \u9045\u5ef6\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\n    let delay = Duration::from_millis(500 + (attempt * 200) as u64);\n    sleep(delay).await;\n\n    // \u5931\u6557\u30d1\u30bf\u30fc\u30f3\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\n    match attempt {\n        1 =&gt; Err(TechniqueError::PowerInsufficient(1500, power)),\n        2 =&gt; Err(TechniqueError::ConnectionLost),\n        3 =&gt; Err(TechniqueError::SystemOverload),\n        _ =&gt; Ok(format!(\"\u8853\u5f0f\u6210\u529f\uff01\u5a01\u529b: {}\", power * attempt as i32)),\n    }\n}\n\n// \u30ea\u30c8\u30e9\u30a4\u6226\u7565\u4ed8\u304d\u975e\u540c\u671f\u95a2\u6570\nasync fn reliable_technique_with_retry(\n    power: i32,\n    max_retries: u32,\n    timeout_duration: Duration\n) -&gt; Result&lt;String, TechniqueError&gt; {\n    for attempt in 1..=max_retries {\n        println!(\"\u8853\u5f0f\u8a66\u884c {}/{}\", attempt, max_retries);\n\n        let result = timeout(timeout_duration, unstable_technique(power, attempt)).await;\n\n        match result {\n            Ok(Ok(success)) =&gt; {\n                println!(\"\u2713 \u8a66\u884c{}\u3067\u6210\u529f: {}\", attempt, success);\n                return Ok(success);\n            },\n            Ok(Err(e)) =&gt; {\n                println!(\"\u2717 \u8a66\u884c{}\u3067\u5931\u6557: {}\", attempt, e);\n\n                // \u30a8\u30e9\u30fc\u306e\u7a2e\u985e\u306b\u5fdc\u3058\u3066\u5f85\u6a5f\u6642\u9593\u3092\u8abf\u6574\n                let wait_time = match e {\n                    TechniqueError::PowerInsufficient(_, _) =&gt; Duration::from_millis(100),\n                    TechniqueError::ConnectionLost =&gt; Duration::from_millis(500),\n                    TechniqueError::SystemOverload =&gt; Duration::from_millis(1000),\n                    TechniqueError::Timeout =&gt; Duration::from_millis(200),\n                };\n\n                if attempt &lt; max_retries {\n                    println!(\"{}ms\u5f8c\u306b\u518d\u8a66\u884c...\", wait_time.as_millis());\n                    sleep(wait_time).await;\n                } else {\n                    return Err(e);\n                }\n            },\n            Err(_) =&gt; {\n                println!(\"\u2717 \u8a66\u884c{}\u3067\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\", attempt);\n                if attempt == max_retries {\n                    return Err(TechniqueError::Timeout);\n                }\n                sleep(Duration::from_millis(300)).await;\n            }\n        }\n    }\n\n    Err(TechniqueError::Timeout)\n}\n\n// \u30b5\u30fc\u30ad\u30c3\u30c8\u30d6\u30ec\u30fc\u30ab\u30fc\u30d1\u30bf\u30fc\u30f3\n#[derive(Debug)]\nstruct CircuitBreaker {\n    failure_count: u32,\n    failure_threshold: u32,\n    recovery_timeout: Duration,\n    last_failure_time: Option&lt;std::time::Instant&gt;,\n    state: CircuitState,\n}\n\n#[derive(Debug, PartialEq)]\nenum CircuitState {\n    Closed,    // \u6b63\u5e38\u72b6\u614b\n    Open,      // \u6545\u969c\u72b6\u614b\n    HalfOpen,  // \u56de\u5fa9\u8a66\u884c\u72b6\u614b\n}\n\nimpl CircuitBreaker {\n    fn new(failure_threshold: u32, recovery_timeout: Duration) -&gt; Self {\n        CircuitBreaker {\n            failure_count: 0,\n            failure_threshold,\n            recovery_timeout,\n            last_failure_time: None,\n            state: CircuitState::Closed,\n        }\n    }\n\n    async fn call&lt;F, T, E&gt;(&amp;mut self, operation: F) -&gt; Result&lt;T, String&gt;\n    where\n        F: std::future::Future&lt;Output = Result&lt;T, E&gt;&gt;,\n        E: std::fmt::Display,\n    {\n        match self.state {\n            CircuitState::Open =&gt; {\n                if let Some(last_failure) = self.last_failure_time {\n                    if last_failure.elapsed() &gt;= self.recovery_timeout {\n                        println!(\"\u30b5\u30fc\u30ad\u30c3\u30c8\u30d6\u30ec\u30fc\u30ab\u30fc: \u56de\u5fa9\u8a66\u884c\u72b6\u614b\u306b\u79fb\u884c\");\n                        self.state = CircuitState::HalfOpen;\n                    } else {\n                        return Err(\"\u30b5\u30fc\u30ad\u30c3\u30c8\u30d6\u30ec\u30fc\u30ab\u30fc\u958b\u653e\u4e2d - \u51e6\u7406\u62d2\u5426\".to_string());\n                    }\n                }\n            },\n            _ =&gt; {}\n        }\n\n        match operation.await {\n            Ok(result) =&gt; {\n                // \u6210\u529f\u6642\u306e\u51e6\u7406\n                if self.state == CircuitState::HalfOpen {\n                    println!(\"\u30b5\u30fc\u30ad\u30c3\u30c8\u30d6\u30ec\u30fc\u30ab\u30fc: \u6b63\u5e38\u72b6\u614b\u306b\u5fa9\u5e30\");\n                    self.state = CircuitState::Closed;\n                    self.failure_count = 0;\n                }\n                Ok(result)\n            },\n            Err(e) =&gt; {\n                // \u5931\u6557\u6642\u306e\u51e6\u7406\n                self.failure_count += 1;\n                self.last_failure_time = Some(std::time::Instant::now());\n\n                if self.failure_count &gt;= self.failure_threshold {\n                    println!(\"\u30b5\u30fc\u30ad\u30c3\u30c8\u30d6\u30ec\u30fc\u30ab\u30fc: \u6545\u969c\u72b6\u614b\u306b\u79fb\u884c\");\n                    self.state = CircuitState::Open;\n                }\n\n                Err(format!(\"\u51e6\u7406\u5931\u6557: {}\", e))\n            }\n        }\n    }\n}\n\n#[tokio::main]\nasync fn main() {\n    println!(\"=== \u9ad8\u5ea6\u306a\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0 ===\");\n\n    // \u30ea\u30c8\u30e9\u30a4\u6226\u7565\u306e\u30c6\u30b9\u30c8\n    println!(\"\\n--- \u30ea\u30c8\u30e9\u30a4\u6226\u7565\u30c6\u30b9\u30c8 ---\");\n    match reliable_technique_with_retry(\n        1000,\n        4,\n        Duration::from_secs(2)\n    ).await {\n        Ok(result) =&gt; println!(\"\u6700\u7d42\u6210\u529f: {}\", result),\n        Err(e) =&gt; println!(\"\u6700\u7d42\u5931\u6557: {}\", e),\n    }\n\n    // \u30b5\u30fc\u30ad\u30c3\u30c8\u30d6\u30ec\u30fc\u30ab\u30fc\u306e\u30c6\u30b9\u30c8\n    println!(\"\\n--- \u30b5\u30fc\u30ad\u30c3\u30c8\u30d6\u30ec\u30fc\u30ab\u30fc\u30c6\u30b9\u30c8 ---\");\n    let mut breaker = CircuitBreaker::new(2, Duration::from_millis(1000));\n\n    // \u6545\u969c\u3092\u767a\u751f\u3055\u305b\u308b\n    for i in 1..=5 {\n        let result = breaker.call(async {\n            if i &lt;= 3 {\n                Err(\"\u6a21\u64ec\u6545\u969c\")\n            } else {\n                Ok(format!(\"\u6210\u529f {}\", i))\n            }\n        }).await;\n\n        println!(\"\u547c\u3073\u51fa\u3057 {}: {:?} (\u72b6\u614b: {:?})\", i, result, breaker.state);\n        sleep(Duration::from_millis(500)).await;\n    }\n\n    // \u56de\u5fa9\u3092\u5f85\u3064\n    println!(\"\\n\u56de\u5fa9\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u5f85\u6a5f\u4e2d...\");\n    sleep(Duration::from_millis(600)).await;\n\n    // \u56de\u5fa9\u5f8c\u306e\u30c6\u30b9\u30c8\n    for i in 6..=7 {\n        let result = breaker.call(async {\n            Ok(format!(\"\u56de\u5fa9\u5f8c\u6210\u529f {}\", i))\n        }).await;\n\n        println!(\"\u56de\u5fa9\u30c6\u30b9\u30c8 {}: {:?} (\u72b6\u614b: {:?})\", i, result, breaker.state);\n    }\n}\n</code></pre>"},{"location":"chapter05/async/#_5","title":"\u307e\u3068\u3081","text":"<p>\u975e\u540c\u671f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u790e\u3092\u30de\u30b9\u30bf\u30fc\u3067\u304d\u305f\u304b\uff1f\u91cd\u8981\u306a\u30dd\u30a4\u30f3\u30c8\uff1a</p> <ol> <li>async/await - \u975e\u540c\u671f\u95a2\u6570\u306e\u5b9a\u7fa9\u3068\u5b9f\u884c</li> <li>\u4e26\u884c\u51e6\u7406 - join!\u3068select!\u306b\u3088\u308b\u52b9\u7387\u7684\u306a\u51e6\u7406</li> <li>\u5171\u6709\u72b6\u614b - Mutex\u3068Channel\u306b\u3088\u308b\u5b89\u5168\u306a\u72b6\u614b\u7ba1\u7406</li> <li>\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0 - \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3068\u30ea\u30c8\u30e9\u30a4\u6226\u7565</li> <li>\u5b9f\u8df5\u30d1\u30bf\u30fc\u30f3 - \u30b5\u30fc\u30ad\u30c3\u30c8\u30d6\u30ec\u30fc\u30ab\u30fc\u3084\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u51e6\u7406</li> </ol> <p>\u3053\u308c\u3067\u6642\u7a7a\u9593\u3092\u64cd\u308b\u529b\u3092\u624b\u306b\u5165\u308c\u305f\u3002\u4ffa\u306e\u7121\u4e0b\u9650\u8853\u5f0f\u306e\u3088\u3046\u306b\u3001\u6642\u9593\u306e\u5236\u7d04\u3092\u8d85\u8d8a\u3057\u3001\u8907\u6570\u306e\u51e6\u7406\u3092\u540c\u6642\u306b\u5236\u5fa1\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306a\u3002</p> <p>\u6b21\u306f\u30de\u30af\u30ed\u306b\u3064\u3044\u3066\u5b66\u307c\u3046\u3002\u30b3\u30fc\u30c9\u81ea\u4f53\u3092\u751f\u6210\u3059\u308b\u3001\u7a76\u6975\u306e\u62bd\u8c61\u5316\u6280\u8853\u3060\u3002</p> <p>\u300c\u975e\u540c\u671f\u3092\u6975\u3081\u308c\u3070\u3001\u6642\u9593\u3055\u3048\u3082\u601d\u3044\u306e\u307e\u307e\u306b\u3067\u304d\u308b\u300d</p>"},{"location":"chapter05/final_exercises/","title":"\u6700\u7d42\u7df4\u7fd2\u554f\u984c - \u6700\u5f37\u3078\u306e\u8a66\u7df4","text":""},{"location":"chapter05/final_exercises/#_1","title":"\u6700\u7d42\u8a66\u9a13\u306e\u59cb\u307e\u308a","text":"<p>\u6700\u5f8c\u306e\u8a66\u7df4\u3060\u3002\u3053\u308c\u307e\u3067\u5b66\u3093\u3060\u5168\u3066\u306e\u6280\u8853\u3092\u7d71\u5408\u3057\u3001\u541b\u306e\u5b9f\u529b\u3092\u8a3c\u660e\u305b\u3088\u3002</p> <p>\u3053\u308c\u3089\u306e\u554f\u984c\u306f\u3001\u57fa\u672c\u6587\u6cd5\u3001\u6240\u6709\u6a29\u3001\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3001\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3001\u30c8\u30ec\u30a4\u30c8\u3001\u975e\u540c\u671f\u51e6\u7406\u3001\u30de\u30af\u30ed\u306e\u5168\u3066\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u3001\u771f\u306e\u5b9f\u8df5\u554f\u984c\u3060\u3002\u4ffa\u306e\u671f\u5f85\u3092\u88cf\u5207\u308b\u306a\u3088\u3002</p> <p>\u4e94\u6761\u5148\u751f\u304b\u3089\u306e\u6700\u7d42\u52a9\u8a00</p> <p>\u3053\u308c\u3089\u306e\u554f\u984c\u306b\u6b63\u89e3\u306f\u306a\u3044\u3002\u91cd\u8981\u306a\u306e\u306f\u3001\u6280\u8853\u3092\u9069\u5207\u306b\u7d44\u307f\u5408\u308f\u305b\u3001\u7f8e\u3057\u304f\u5b9f\u7528\u7684\u306a\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308b\u3053\u3068\u3060\u3002 \u30b3\u30fc\u30c9\u306e\u54c1\u8cea\u3001\u6027\u80fd\u3001\u4fdd\u5b88\u6027\u3001\u305d\u3057\u3066\u5275\u9020\u6027\u3092\u5168\u3066\u767a\u63ee\u305b\u3088\u3002</p>"},{"location":"chapter05/final_exercises/#-_1","title":"\u521d\u7d1a\u7de8 - \u7d71\u5408\u6280\u8853\u306e\u78ba\u8a8d","text":""},{"location":"chapter05/final_exercises/#1","title":"\u554f\u984c1: \u30de\u30af\u30ed\u99c6\u52d5\u958b\u767a","text":"<p>\u72ec\u81ea\u306eDSL\uff08\u30c9\u30e1\u30a4\u30f3\u56fa\u6709\u8a00\u8a9e\uff09\u3092\u4f5c\u6210\u3057\u3001\u546a\u8853\u5e2b\u306e\u6226\u95d8\u30b7\u30ca\u30ea\u30aa\u3092\u8a18\u8ff0\u3067\u304d\u308b\u30b7\u30b9\u30c6\u30e0\u3092\u69cb\u7bc9\u305b\u3088\u3002</p> <pre><code>// \u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8a18\u6cd5\u3067\u6226\u95d8\u30b7\u30ca\u30ea\u30aa\u3092\u8a18\u8ff0\u3067\u304d\u308b\u30de\u30af\u30ed\u3092\u4f5c\u6210\n// \u8981\u4ef6\uff1a\n// 1. \u53c2\u6226\u8005\u306e\u5b9a\u7fa9\n// 2. \u30bf\u30fc\u30f3\u5236\u306e\u884c\u52d5\u5b9a\u7fa9\n// 3. \u81ea\u52d5\u7684\u306a\u7d50\u679c\u8a08\u7b97\n// 4. \u975e\u540c\u671f\u3067\u306e\u5b9f\u884c\n\nbattle_scenario! {\n    arena: \"\u6e0b\u8c37\u4e8b\u5909\",\n    participants: {\n        gojo: Sorcerer { power: 3000, grade: \"\u7279\u7d1a\" },\n        sukuna: Curse { power: 2800, grade: \"\u7279\u7d1a\" },\n        yuji: Sorcerer { power: 1200, grade: \"1\u7d1a\" }\n    },\n    rounds: [\n        turn 1 =&gt; {\n            gojo.attack(sukuna, technique: \"\u7121\u4e0b\u9650\u8853\u5f0f\", power: 1500);\n            sukuna.counter(gojo, technique: \"\u65ac\u6483\", power: 1200);\n            yuji.support(gojo, technique: \"\u9ed2\u9583\", power: 800);\n        },\n        turn 2 =&gt; {\n            if gojo.health &gt; 1000 {\n                gojo.domain_expansion(\"\u7121\u91cf\u7a7a\u51e6\");\n            } else {\n                gojo.heal(500);\n            }\n            sukuna.domain_expansion(\"\u4f0f\u9b54\u5fa1\u5eda\u5b50\");\n        }\n    ],\n    victory_condition: last_standing,\n    async_execution: true\n}\n\nfn main() {\n    // \u30de\u30af\u30ed\u3067\u751f\u6210\u3055\u308c\u305f\u30b3\u30fc\u30c9\u304c\u975e\u540c\u671f\u3067\u5b9f\u884c\u3055\u308c\u308b\n}\n</code></pre> \u30d2\u30f3\u30c8\u3092\u898b\u308b  - `macro_rules!`\u3067\u8907\u96d1\u306a\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0\u3092\u4f7f\u7528 - \u69cb\u9020\u4f53\u3068\u30c8\u30ec\u30a4\u30c8\u3092\u81ea\u52d5\u751f\u6210 - `tokio::spawn`\u3067\u975e\u540c\u671f\u5b9f\u884c - `enum`\u3067\u884c\u52d5\u306e\u7a2e\u985e\u3092\u5b9a\u7fa9 - \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u7d44\u307f\u8fbc\u3080"},{"location":"chapter05/final_exercises/#2","title":"\u554f\u984c2: \u578b\u5b89\u5168\u306a\u8a2d\u5b9a\u30b7\u30b9\u30c6\u30e0","text":"<p>\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u8a2d\u5b9a\u306e\u59a5\u5f53\u6027\u3092\u691c\u8a3c\u3059\u308b\u3001\u578b\u5b89\u5168\u306a\u8a2d\u5b9a\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u6210\u305b\u3088\u3002</p> <pre><code>// \u8981\u4ef6\uff1a\n// 1. \u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3068\u30c8\u30ec\u30a4\u30c8\u3092\u4f7f\u3063\u305f\u578b\u5b89\u5168\u6027\n// 2. \u30de\u30af\u30ed\u306b\u3088\u308b\u8a2d\u5b9a\u306e\u81ea\u52d5\u751f\u6210\n// 3. \u5b9f\u884c\u6642\u306e\u52d5\u7684\u8a2d\u5b9a\u5909\u66f4\n// 4. \u975e\u540c\u671f\u3067\u306e\u8a2d\u5b9a\u8aad\u307f\u8fbc\u307f\n\n// \u4f7f\u7528\u4f8b\uff1a\nconfig_system! {\n    SorcererConfig {\n        max_power: RangeValue&lt;i32, 0, 10000&gt; = 3000,\n        techniques: ListValue&lt;String, 1, 10&gt; = [\"\u57fa\u672c\u8853\u5f0f\"],\n        active: BoolValue = true,\n        grade: EnumValue&lt;Grade&gt; = Grade::FirstClass,\n        update_interval: DurationValue = Duration::from_secs(60)\n    }\n}\n\nasync fn main() -&gt; Result&lt;(), ConfigError&gt; {\n    let mut config = SorcererConfig::load_from_file(\"config.toml\").await?;\n\n    // \u578b\u5b89\u5168\u306a\u8a2d\u5b9a\u30a2\u30af\u30bb\u30b9\n    let power = config.max_power().get();\n\n    // \u52d5\u7684\u8a2d\u5b9a\u5909\u66f4\uff08\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u4ed8\u304d\uff09\n    config.max_power().set(3500).await?;\n\n    // \u8a2d\u5b9a\u306e\u6c38\u7d9a\u5316\n    config.save().await?;\n\n    Ok(())\n}\n</code></pre>"},{"location":"chapter05/final_exercises/#3","title":"\u554f\u984c3: \u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u76e3\u8996\u30b7\u30b9\u30c6\u30e0","text":"<p>\u975e\u540c\u671f\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u3068\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u3001\u546a\u8853\u5e2b\u306e\u6d3b\u52d5\u76e3\u8996\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u6210\u305b\u3088\u3002</p> <pre><code>// \u8981\u4ef6\uff1a\n// 1. \u8907\u6570\u306e\u546a\u8853\u5e2b\u3092\u4e26\u884c\u76e3\u8996\n// 2. \u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3067\u306e\u72b6\u614b\u66f4\u65b0\n// 3. \u7570\u5e38\u691c\u77e5\u3068\u30a2\u30e9\u30fc\u30c8\n// 4. \u56de\u5fa9\u51e6\u7406\u3068\u30b5\u30fc\u30ad\u30c3\u30c8\u30d6\u30ec\u30fc\u30ab\u30fc\n// 5. \u30e1\u30c8\u30ea\u30af\u30b9\u53ce\u96c6\n\nuse tokio::stream::StreamExt;\n\n#[derive(Debug)]\nstruct MonitoringSystem&lt;T: Monitorable&gt; {\n    targets: Vec&lt;T&gt;,\n    alert_threshold: f64,\n    // \u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u5b9a\u7fa9\n}\n\ntrait Monitorable {\n    type Metric: Clone + Send + Sync;\n\n    async fn get_current_metric(&amp;self) -&gt; Result&lt;Self::Metric, MonitoringError&gt;;\n    fn is_healthy(&amp;self, metric: &amp;Self::Metric) -&gt; bool;\n    fn metric_name(&amp;self) -&gt; &amp;str;\n}\n\nimpl&lt;T: Monitorable&gt; MonitoringSystem&lt;T&gt; {\n    async fn start_monitoring(&amp;self) -&gt; impl Stream&lt;Item = MonitoringEvent&gt; {\n        // \u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u76e3\u8996\u306e\u5b9f\u88c5\n    }\n\n    async fn handle_alert(&amp;self, event: AlertEvent) -&gt; Result&lt;(), AlertError&gt; {\n        // \u30a2\u30e9\u30fc\u30c8\u51e6\u7406\u306e\u5b9f\u88c5\n    }\n}\n\n// \u4f7f\u7528\u4f8b\nasync fn main() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {\n    let monitoring = MonitoringSystem::new()\n        .add_target(SorcererMonitor::new(\"\u4e94\u6761\u609f\"))\n        .add_target(SorcererMonitor::new(\"\u864e\u6756\u60a0\u4ec1\"))\n        .with_alert_threshold(0.3);\n\n    let mut stream = monitoring.start_monitoring().await;\n\n    while let Some(event) = stream.next().await {\n        match event {\n            MonitoringEvent::Healthy(target) =&gt; {\n                println!(\"\u2705 {} \u306f\u6b63\u5e38\", target);\n            },\n            MonitoringEvent::Warning(target, metric) =&gt; {\n                println!(\"\u26a0\ufe0f {} \u306b\u8b66\u544a: {:?}\", target, metric);\n            },\n            MonitoringEvent::Critical(target, error) =&gt; {\n                println!(\"\ud83d\udea8 {} \u306b\u91cd\u5927\u306a\u554f\u984c: {}\", target, error);\n                // \u7dca\u6025\u5bfe\u5fdc\n            }\n        }\n    }\n\n    Ok(())\n}\n</code></pre>"},{"location":"chapter05/final_exercises/#-_2","title":"\u4e2d\u7d1a\u7de8 - \u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u8a2d\u8a08","text":""},{"location":"chapter05/final_exercises/#4","title":"\u554f\u984c4: \u30d7\u30e9\u30b0\u30a4\u30f3\u30b7\u30b9\u30c6\u30e0","text":"<p>\u52d5\u7684\u30ed\u30fc\u30c7\u30a3\u30f3\u30b0\u53ef\u80fd\u306a\u30d7\u30e9\u30b0\u30a4\u30f3\u30b7\u30b9\u30c6\u30e0\u3092\u8a2d\u8a08\u305b\u3088\u3002</p> <pre><code>// \u8981\u4ef6\uff1a\n// 1. \u30c8\u30ec\u30a4\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u3088\u308b\u52d5\u7684\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\n// 2. \u30d7\u30e9\u30b0\u30a4\u30f3\u306e\u5b89\u5168\u306a\u8aad\u307f\u8fbc\u307f\n// 3. \u30d7\u30e9\u30b0\u30a4\u30f3\u9593\u306e\u4f9d\u5b58\u95a2\u4fc2\u7ba1\u7406\n// 4. \u30db\u30c3\u30c8\u30ea\u30ed\u30fc\u30c9\u6a5f\u80fd\n// 5. \u30d7\u30e9\u30b0\u30a4\u30f3\u306e\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u7ba1\u7406\n\n// \u30d7\u30e9\u30b0\u30a4\u30f3\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\ntrait TechniquePlugin: Send + Sync {\n    fn name(&amp;self) -&gt; &amp;str;\n    fn version(&amp;self) -&gt; &amp;str;\n    fn dependencies(&amp;self) -&gt; Vec&lt;&amp;str&gt;;\n\n    async fn initialize(&amp;self, context: &amp;PluginContext) -&gt; Result&lt;(), PluginError&gt;;\n    async fn execute(&amp;self, input: &amp;PluginInput) -&gt; Result&lt;PluginOutput, PluginError&gt;;\n    async fn cleanup(&amp;self) -&gt; Result&lt;(), PluginError&gt;;\n}\n\nstruct PluginManager {\n    // \u30d7\u30e9\u30b0\u30a4\u30f3\u7ba1\u7406\u306e\u5b9f\u88c5\n}\n\nimpl PluginManager {\n    async fn load_plugin(&amp;mut self, path: &amp;str) -&gt; Result&lt;(), PluginError&gt; {\n        // \u30d7\u30e9\u30b0\u30a4\u30f3\u8aad\u307f\u8fbc\u307f\u306e\u5b9f\u88c5\n    }\n\n    async fn execute_technique(&amp;self, name: &amp;str, input: PluginInput) -&gt; Result&lt;PluginOutput, PluginError&gt; {\n        // \u8853\u5f0f\u5b9f\u884c\u306e\u5b9f\u88c5\n    }\n\n    async fn reload_plugin(&amp;mut self, name: &amp;str) -&gt; Result&lt;(), PluginError&gt; {\n        // \u30db\u30c3\u30c8\u30ea\u30ed\u30fc\u30c9\u306e\u5b9f\u88c5\n    }\n}\n\n// \u4f7f\u7528\u4f8b\nasync fn main() -&gt; Result&lt;(), PluginError&gt; {\n    let mut manager = PluginManager::new();\n\n    // \u30d7\u30e9\u30b0\u30a4\u30f3\u306e\u8aad\u307f\u8fbc\u307f\n    manager.load_plugin(\"plugins/gojo_techniques.so\").await?;\n    manager.load_plugin(\"plugins/yuji_techniques.so\").await?;\n\n    // \u8853\u5f0f\u306e\u5b9f\u884c\n    let result = manager.execute_technique(\"\u7121\u4e0b\u9650\u8853\u5f0f\", input).await?;\n    println!(\"\u7d50\u679c: {:?}\", result);\n\n    // \u30d7\u30e9\u30b0\u30a4\u30f3\u306e\u66f4\u65b0\n    manager.reload_plugin(\"gojo_techniques\").await?;\n\n    Ok(())\n}\n</code></pre>"},{"location":"chapter05/final_exercises/#5","title":"\u554f\u984c5: \u5206\u6563\u30b7\u30b9\u30c6\u30e0\u901a\u4fe1","text":"<p>\u8907\u6570\u306e\u30ce\u30fc\u30c9\u9593\u3067\u546a\u8853\u5e2b\u60c5\u5831\u3092\u540c\u671f\u3059\u308b\u5206\u6563\u30b7\u30b9\u30c6\u30e0\u3092\u69cb\u7bc9\u305b\u3088\u3002</p> <pre><code>// \u8981\u4ef6\uff1a\n// 1. \u30ce\u30fc\u30c9\u9593\u3067\u306e\u72b6\u614b\u540c\u671f\n// 2. \u5206\u6563\u30ed\u30c3\u30af\u6a5f\u80fd\n// 3. \u30d1\u30fc\u30c6\u30a3\u30b7\u30e7\u30f3\u8010\u6027\n// 4. \u6700\u7d42\u7684\u4e00\u8cab\u6027\u306e\u4fdd\u8a3c\n// 5. \u969c\u5bb3\u56de\u5fa9\u6a5f\u80fd\n\nuse std::collections::HashMap;\n\n#[derive(Debug, Clone)]\nstruct DistributedSorcererRegistry {\n    node_id: NodeId,\n    nodes: HashMap&lt;NodeId, NodeInfo&gt;,\n    // \u5b9f\u88c5\u306b\u5fc5\u8981\u306a\u30d5\u30a3\u30fc\u30eb\u30c9\n}\n\ntrait DistributedConsensus {\n    async fn propose_change(&amp;self, change: RegistryChange) -&gt; Result&lt;ConsensusResult, ConsensusError&gt;;\n    async fn sync_with_peers(&amp;self) -&gt; Result&lt;(), SyncError&gt;;\n    async fn handle_node_failure(&amp;self, failed_node: NodeId) -&gt; Result&lt;(), RecoveryError&gt;;\n}\n\nimpl DistributedSorcererRegistry {\n    async fn register_sorcerer(&amp;self, sorcerer: Sorcerer) -&gt; Result&lt;(), RegistryError&gt; {\n        // \u5206\u6563\u767b\u9332\u306e\u5b9f\u88c5\n    }\n\n    async fn update_sorcerer(&amp;self, id: SorcererId, update: SorcererUpdate) -&gt; Result&lt;(), RegistryError&gt; {\n        // \u5206\u6563\u66f4\u65b0\u306e\u5b9f\u88c5\n    }\n\n    async fn find_sorcerer(&amp;self, id: SorcererId) -&gt; Result&lt;Option&lt;Sorcerer&gt;, RegistryError&gt; {\n        // \u5206\u6563\u691c\u7d22\u306e\u5b9f\u88c5\n    }\n}\n\n// \u4f7f\u7528\u4f8b\nasync fn main() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {\n    let registry = DistributedSorcererRegistry::new(NodeId::new(\"node1\"))\n        .add_peer(\"node2\", \"127.0.0.1:8002\")\n        .add_peer(\"node3\", \"127.0.0.1:8003\")\n        .start().await?;\n\n    // \u5206\u6563\u74b0\u5883\u3067\u306e\u64cd\u4f5c\n    registry.register_sorcerer(sorcerer).await?;\n    registry.sync_with_peers().await?;\n\n    Ok(())\n}\n</code></pre>"},{"location":"chapter05/final_exercises/#-_3","title":"\u4e0a\u7d1a\u7de8 - \u6700\u9ad8\u96e3\u5ea6\u306e\u6311\u6226","text":""},{"location":"chapter05/final_exercises/#6","title":"\u554f\u984c6: \u81ea\u52d5\u6700\u9069\u5316\u30b3\u30f3\u30d1\u30a4\u30e9","text":"<p>Rust\u30b3\u30fc\u30c9\u3092\u89e3\u6790\u3057\u3001\u81ea\u52d5\u7684\u306b\u6700\u9069\u5316\u3092\u63d0\u6848\u3059\u308b\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u6210\u305b\u3088\u3002</p> <pre><code>// \u8981\u4ef6\uff1a\n// 1. \u62bd\u8c61\u69cb\u6587\u6728\uff08AST\uff09\u306e\u89e3\u6790\n// 2. \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u306e\u691c\u51fa\n// 3. \u6700\u9069\u5316\u30d1\u30bf\u30fc\u30f3\u306e\u9069\u7528\n// 4. \u30d9\u30f3\u30c1\u30de\u30fc\u30af\u7d50\u679c\u306e\u6bd4\u8f03\n// 5. \u81ea\u52d5\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u63d0\u6848\n\nuse syn::{parse_file, Item, Expr};\nuse quote::quote;\n\nstruct OptimizationEngine {\n    rules: Vec&lt;Box&lt;dyn OptimizationRule&gt;&gt;,\n    benchmarker: BenchmarkRunner,\n}\n\ntrait OptimizationRule: Send + Sync {\n    fn name(&amp;self) -&gt; &amp;str;\n    fn analyze(&amp;self, ast: &amp;syn::File) -&gt; Vec&lt;OptimizationSuggestion&gt;;\n    fn apply(&amp;self, code: &amp;str) -&gt; Result&lt;String, OptimizationError&gt;;\n    fn estimated_improvement(&amp;self) -&gt; f64;\n}\n\n#[derive(Debug)]\nstruct OptimizationSuggestion {\n    rule_name: String,\n    location: Location,\n    description: String,\n    estimated_improvement: f64,\n    confidence: f64,\n}\n\nimpl OptimizationEngine {\n    fn new() -&gt; Self {\n        OptimizationEngine {\n            rules: vec![\n                Box::new(AllocatorOptimizationRule),\n                Box::new(LoopUnrollingRule),\n                Box::new(InliningRule),\n                Box::new(BorrowOptimizationRule),\n            ],\n            benchmarker: BenchmarkRunner::new(),\n        }\n    }\n\n    async fn analyze_code(&amp;self, source: &amp;str) -&gt; Result&lt;Vec&lt;OptimizationSuggestion&gt;, AnalysisError&gt; {\n        // \u30b3\u30fc\u30c9\u89e3\u6790\u306e\u5b9f\u88c5\n    }\n\n    async fn apply_optimizations(&amp;self, source: &amp;str, suggestions: &amp;[OptimizationSuggestion]) -&gt; Result&lt;String, OptimizationError&gt; {\n        // \u6700\u9069\u5316\u9069\u7528\u306e\u5b9f\u88c5\n    }\n\n    async fn benchmark_comparison(&amp;self, original: &amp;str, optimized: &amp;str) -&gt; Result&lt;BenchmarkResult, BenchmarkError&gt; {\n        // \u30d9\u30f3\u30c1\u30de\u30fc\u30af\u6bd4\u8f03\u306e\u5b9f\u88c5\n    }\n}\n\n// \u4f7f\u7528\u4f8b\nasync fn main() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {\n    let engine = OptimizationEngine::new();\n    let source_code = std::fs::read_to_string(\"src/main.rs\")?;\n\n    // \u6700\u9069\u5316\u306e\u5206\u6790\n    let suggestions = engine.analyze_code(&amp;source_code).await?;\n\n    for suggestion in &amp;suggestions {\n        println!(\"\ud83d\udd0d \u6700\u9069\u5316\u63d0\u6848: {}\", suggestion.description);\n        println!(\"   \u63a8\u5b9a\u6539\u5584: {:.1}%\", suggestion.estimated_improvement * 100.0);\n        println!(\"   \u4fe1\u983c\u5ea6: {:.1}%\", suggestion.confidence * 100.0);\n    }\n\n    // \u6700\u9069\u5316\u306e\u9069\u7528\n    let optimized_code = engine.apply_optimizations(&amp;source_code, &amp;suggestions).await?;\n\n    // \u30d9\u30f3\u30c1\u30de\u30fc\u30af\u6bd4\u8f03\n    let benchmark_result = engine.benchmark_comparison(&amp;source_code, &amp;optimized_code).await?;\n\n    println!(\"\ud83d\udcca \u30d9\u30f3\u30c1\u30de\u30fc\u30af\u7d50\u679c:\");\n    println!(\"   \u5b9f\u884c\u6642\u9593\u6539\u5584: {:.1}%\", benchmark_result.execution_time_improvement);\n    println!(\"   \u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u6539\u5584: {:.1}%\", benchmark_result.memory_improvement);\n\n    Ok(())\n}\n</code></pre>"},{"location":"chapter05/final_exercises/#7","title":"\u554f\u984c7: \u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af","text":"<p>\u5b9f\u884c\u6642\u306b\u30b3\u30fc\u30c9\u3092\u751f\u6210\u30fb\u30b3\u30f3\u30d1\u30a4\u30eb\u30fb\u5b9f\u884c\u3067\u304d\u308b\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u69cb\u7bc9\u305b\u3088\u3002</p> <pre><code>// \u8981\u4ef6\uff1a\n// 1. \u5b9f\u884c\u6642\u3067\u306eRust\u30b3\u30fc\u30c9\u751f\u6210\n// 2. \u52d5\u7684\u30b3\u30f3\u30d1\u30a4\u30eb\u6a5f\u80fd\n// 3. \u5b89\u5168\u306a\u5b9f\u884c\u74b0\u5883\uff08\u30b5\u30f3\u30c9\u30dc\u30c3\u30af\u30b9\uff09\n// 4. \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6700\u9069\u5316\n// 5. \u30c7\u30d0\u30c3\u30b0\u30fb\u30d7\u30ed\u30d5\u30a1\u30a4\u30ea\u30f3\u30b0\u6a5f\u80fd\n\nstruct MetaProgrammingFramework {\n    compiler: DynamicCompiler,\n    sandbox: SafeExecutionEnvironment,\n    cache: CompiledCodeCache,\n}\n\ntrait CodeGenerator {\n    fn generate_function(&amp;self, spec: FunctionSpec) -&gt; Result&lt;String, GenerationError&gt;;\n    fn generate_struct(&amp;self, spec: StructSpec) -&gt; Result&lt;String, GenerationError&gt;;\n    fn generate_trait_impl(&amp;self, spec: TraitImplSpec) -&gt; Result&lt;String, GenerationError&gt;;\n}\n\ntrait DynamicCompiler {\n    async fn compile(&amp;self, source: &amp;str) -&gt; Result&lt;CompiledModule, CompilationError&gt;;\n    async fn compile_optimized(&amp;self, source: &amp;str, optimization_level: u8) -&gt; Result&lt;CompiledModule, CompilationError&gt;;\n}\n\n#[derive(Debug)]\nstruct CompiledModule {\n    binary: Vec&lt;u8&gt;,\n    metadata: ModuleMetadata,\n    exports: Vec&lt;ExportedFunction&gt;,\n}\n\nimpl MetaProgrammingFramework {\n    async fn generate_and_execute&lt;T&gt;(&amp;self, template: &amp;str, context: &amp;Context) -&gt; Result&lt;T, ExecutionError&gt;\n    where\n        T: serde::de::DeserializeOwned,\n    {\n        // 1. \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304b\u3089\u30b3\u30fc\u30c9\u751f\u6210\n        let source = self.generate_code(template, context)?;\n\n        // 2. \u52d5\u7684\u30b3\u30f3\u30d1\u30a4\u30eb\n        let module = self.compiler.compile(&amp;source).await?;\n\n        // 3. \u5b89\u5168\u306a\u5b9f\u884c\n        let result = self.sandbox.execute(module).await?;\n\n        // 4. \u7d50\u679c\u306e\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\n        Ok(serde_json::from_value(result)?)\n    }\n\n    async fn create_optimized_technique(&amp;self, spec: TechniqueSpec) -&gt; Result&lt;Box&lt;dyn Technique&gt;, CreationError&gt; {\n        // \u8853\u5f0f\u306e\u52d5\u7684\u751f\u6210\u3068\u6700\u9069\u5316\n    }\n}\n\n// \u4f7f\u7528\u4f8b\nasync fn main() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {\n    let framework = MetaProgrammingFramework::new();\n\n    // \u52d5\u7684\u306a\u95a2\u6570\u751f\u6210\n    let custom_function = framework.generate_and_execute::&lt;i32&gt;(\n        r#\"\n        fn calculate_power(base: i32, multiplier: f32) -&gt; i32 {\n            (base as f32 * multiplier * {{boost_factor}}) as i32\n        }\n        \"#,\n        &amp;context!{\"boost_factor\" =&gt; 1.5}\n    ).await?;\n\n    // \u52d5\u7684\u306a\u8853\u5f0f\u751f\u6210\n    let technique_spec = TechniqueSpec {\n        name: \"Dynamic Limitless\".to_string(),\n        power_calculation: \"base_power * (1.0 + experience_factor)\".to_string(),\n        effects: vec![\"time_distortion\".to_string(), \"space_manipulation\".to_string()],\n        optimization_level: 3,\n    };\n\n    let technique = framework.create_optimized_technique(technique_spec).await?;\n    let result = technique.execute(TechniqueInput::new(2000)).await?;\n\n    println!(\"\u52d5\u7684\u8853\u5f0f\u7d50\u679c: {:?}\", result);\n\n    Ok(())\n}\n</code></pre>"},{"location":"chapter05/final_exercises/#8","title":"\u554f\u984c8: \u7a76\u6975\u306e\u7d71\u5408\u30b7\u30b9\u30c6\u30e0","text":"<p>\u3053\u308c\u307e\u3067\u306e\u5168\u3066\u306e\u6280\u8853\u3092\u7d71\u5408\u3057\u305f\u3001\u5b8c\u5168\u306a\u546a\u8853\u5e2b\u7ba1\u7406\u30fb\u6226\u95d8\u30fb\u5206\u6790\u30b7\u30b9\u30c6\u30e0\u3092\u69cb\u7bc9\u305b\u3088\u3002</p> <pre><code>// \u8981\u4ef6\uff1a\n// 1. \u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u5206\u6563\u546a\u8853\u5e2b\u7ba1\u7406\n// 2. \u975e\u540c\u671f\u6226\u95d8\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\n// 3. AI\u99c6\u52d5\u6226\u7565\u5206\u6790\n// 4. \u52d5\u7684\u30d7\u30e9\u30b0\u30a4\u30f3\u30b7\u30b9\u30c6\u30e0\n// 5. \u81ea\u52d5\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\n// 6. \u5b8c\u5168\u306a\u30e1\u30c8\u30ea\u30af\u30b9\u30fb\u30ed\u30b0\u30fb\u76e3\u8996\n// 7. Web API \u3068\u30b0\u30e9\u30d5\u30a3\u30ab\u30eb\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\n// 8. \u30d6\u30ed\u30c3\u30af\u30c1\u30a7\u30fc\u30f3\u9023\u643a\uff08\u30aa\u30d7\u30b7\u30e7\u30f3\uff09\n\n// \u3053\u308c\u306f\u5358\u306a\u308b\u9aa8\u683c\u3067\u3059\u3002\u5b8c\u5168\u306a\u5b9f\u88c5\u3092\u6c42\u3081\u3066\u3044\u307e\u3059\u3002\n\nmod ultimate_system {\n    use std::sync::Arc;\n    use tokio::sync::RwLock;\n\n    pub struct UltimateSorcererSystem {\n        // Core Services\n        sorcerer_service: Arc&lt;SorcererManagementService&gt;,\n        battle_engine: Arc&lt;AdvancedBattleEngine&gt;,\n        analytics_engine: Arc&lt;AIAnalyticsEngine&gt;,\n\n        // Infrastructure\n        distributed_registry: Arc&lt;DistributedRegistry&gt;,\n        plugin_manager: Arc&lt;DynamicPluginManager&gt;,\n        monitoring_system: Arc&lt;ComprehensiveMonitoringSystem&gt;,\n\n        // Interfaces\n        web_api: Arc&lt;RESTAPIServer&gt;,\n        websocket_server: Arc&lt;RealtimeWebSocketServer&gt;,\n        grpc_server: Arc&lt;GRPCServer&gt;,\n\n        // Advanced Features\n        auto_scaler: Arc&lt;AutoScalingManager&gt;,\n        ml_predictor: Arc&lt;MachineLearningPredictor&gt;,\n        blockchain_connector: Option&lt;Arc&lt;BlockchainConnector&gt;&gt;,\n    }\n\n    impl UltimateSorcererSystem {\n        pub async fn new(config: SystemConfig) -&gt; Result&lt;Self, SystemError&gt; {\n            // \u30b7\u30b9\u30c6\u30e0\u306e\u5b8c\u5168\u306a\u521d\u671f\u5316\n            todo!(\"\u5b8c\u5168\u306a\u30b7\u30b9\u30c6\u30e0\u5b9f\u88c5\")\n        }\n\n        pub async fn start(&amp;self) -&gt; Result&lt;(), SystemError&gt; {\n            // \u5168\u30b5\u30fc\u30d3\u30b9\u306e\u4e26\u884c\u8d77\u52d5\n            todo!(\"\u30b7\u30b9\u30c6\u30e0\u8d77\u52d5\u30ed\u30b8\u30c3\u30af\")\n        }\n\n        pub async fn simulate_large_scale_battle(\n            &amp;self,\n            scenario: LargeScaleBattleScenario\n        ) -&gt; Result&lt;BattleAnalysisReport, BattleError&gt; {\n            // \u5927\u898f\u6a21\u6226\u95d8\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\n            todo!(\"\u5927\u898f\u6a21\u6226\u95d8\u5b9f\u88c5\")\n        }\n\n        pub async fn predict_future_power_levels(\n            &amp;self,\n            timeframe: Duration\n        ) -&gt; Result&lt;PowerPredictionReport, PredictionError&gt; {\n            // AI \u306b\u3088\u308b\u5c06\u6765\u4e88\u6e2c\n            todo!(\"AI\u4e88\u6e2c\u5b9f\u88c5\")\n        }\n\n        pub async fn optimize_system_performance(&amp;self) -&gt; Result&lt;OptimizationReport, OptimizationError&gt; {\n            // \u81ea\u52d5\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6700\u9069\u5316\n            todo!(\"\u6700\u9069\u5316\u5b9f\u88c5\")\n        }\n    }\n}\n\nasync fn main() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {\n    // \u7a76\u6975\u30b7\u30b9\u30c6\u30e0\u306e\u8d77\u52d5\n    let config = SystemConfig::load_from_env()?;\n    let system = UltimateSorcererSystem::new(config).await?;\n\n    system.start().await?;\n\n    // \u30b7\u30b9\u30c6\u30e0\u306e\u30d8\u30eb\u30b9\u30c1\u30a7\u30c3\u30af\n    system.health_check().await?;\n\n    println!(\"\ud83c\udf1f \u7a76\u6975\u306e\u546a\u8853\u5e2b\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0\u304c\u8d77\u52d5\u3057\u307e\u3057\u305f\");\n\n    // \u30b7\u30b9\u30c6\u30e0\u306e\u7121\u9650\u5b9f\u884c\n    system.run_forever().await?;\n\n    Ok(())\n}\n</code></pre>  **\u3053\u306e\u30b7\u30b9\u30c6\u30e0\u306b\u306f\u4ee5\u4e0b\u306e\u5168\u3066\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff1a**  1. **\u5b8c\u5168\u306a\u5206\u6563\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3** 1. **\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u51e6\u7406\u80fd\u529b** 1. **\u6a5f\u68b0\u5b66\u7fd2\u7d71\u5408** 1. **\u81ea\u52d5\u5316\u6a5f\u80fd** 1. **\u5b8c\u5168\u306aAPI\u8a2d\u8a08** 1. **\u5305\u62ec\u7684\u306a\u30c6\u30b9\u30c8** 1. **\u8a73\u7d30\u306a\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8** 1. **\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6700\u9069\u5316**"},{"location":"chapter05/final_exercises/#_2","title":"\u8a55\u4fa1\u57fa\u6e96","text":"<p>\u541b\u306e\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u306f\u4ee5\u4e0b\u306e\u57fa\u6e96\u3067\u8a55\u4fa1\u3055\u308c\u308b\uff1a</p>"},{"location":"chapter05/final_exercises/#40","title":"\u6280\u8853\u7684\u54c1\u8cea (40%)","text":"<ul> <li>\u30b3\u30fc\u30c9\u306e\u7f8e\u3057\u3055\uff1a\u8aad\u307f\u3084\u3059\u304f\u3001\u4fdd\u5b88\u3057\u3084\u3059\u3044\u30b3\u30fc\u30c9</li> <li>\u52b9\u7387\u6027\uff1a\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u3068\u5b9f\u884c\u901f\u5ea6\u306e\u6700\u9069\u5316</li> <li>\u5b89\u5168\u6027\uff1a\u30e1\u30e2\u30ea\u5b89\u5168\u6027\u3068\u30b9\u30ec\u30c3\u30c9\u5b89\u5168\u6027</li> <li>\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\uff1a\u5805\u7262\u3067\u9069\u5207\u306a\u30a8\u30e9\u30fc\u51e6\u7406</li> </ul>"},{"location":"chapter05/final_exercises/#30","title":"\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u8a2d\u8a08 (30%)","text":"<ul> <li>\u30e2\u30b8\u30e5\u30fc\u30eb\u6027\uff1a\u9069\u5207\u306a\u8cac\u4efb\u5206\u96e2</li> <li>\u62e1\u5f35\u6027\uff1a\u5c06\u6765\u306e\u8981\u6c42\u5909\u66f4\u3078\u306e\u5bfe\u5fdc</li> <li>\u518d\u5229\u7528\u6027\uff1a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u518d\u5229\u7528\u53ef\u80fd\u6027</li> <li>\u30c6\u30b9\u30c8\u53ef\u80fd\u6027\uff1a\u30c6\u30b9\u30c8\u3057\u3084\u3059\u3044\u8a2d\u8a08</li> </ul>"},{"location":"chapter05/final_exercises/#20","title":"\u6280\u8853\u7d71\u5408 (20%)","text":"<ul> <li>\u6982\u5ff5\u306e\u7d71\u5408\uff1a\u5168\u6280\u8853\u306e\u9069\u5207\u306a\u7d44\u307f\u5408\u308f\u305b</li> <li>\u30d1\u30bf\u30fc\u30f3\u306e\u6d3b\u7528\uff1a\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u306e\u52b9\u679c\u7684\u4f7f\u7528</li> <li>\u62bd\u8c61\u5316\u30ec\u30d9\u30eb\uff1a\u9069\u5207\u306a\u62bd\u8c61\u5316\u30ec\u30d9\u30eb\u306e\u9078\u629e</li> </ul>"},{"location":"chapter05/final_exercises/#10","title":"\u5275\u9020\u6027\u3068\u5b9f\u7528\u6027 (10%)","text":"<ul> <li>\u72ec\u5275\u7684\u30a2\u30d7\u30ed\u30fc\u30c1\uff1a\u65b0\u3057\u3044\u30a2\u30a4\u30c7\u30a2\u3084\u624b\u6cd5</li> <li>\u5b9f\u4e16\u754c\u9069\u7528\u6027\uff1a\u73fe\u5b9f\u306e\u554f\u984c\u3078\u306e\u9069\u7528\u53ef\u80fd\u6027</li> <li>\u30e6\u30fc\u30b6\u30fc\u4f53\u9a13\uff1a\u4f7f\u3044\u3084\u3059\u3055\u3068\u308f\u304b\u308a\u3084\u3059\u3055</li> </ul>"},{"location":"chapter05/final_exercises/#_3","title":"\u63d0\u51fa\u3068\u6b21\u306e\u30b9\u30c6\u30c3\u30d7","text":"<p>\u3053\u308c\u3089\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3067\u304d\u305f\u306a\u3089\u3001\u541b\u306f\u771f\u306e\u6700\u5f37\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u3060\u3002</p> <p>\u3057\u304b\u3057\u3001\u6700\u5f37\u3078\u306e\u9053\u306f\u3053\u3053\u3067\u7d42\u308f\u308a\u3067\u306f\u306a\u3044\uff1a</p> <ol> <li>\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u3078\u306e\u8ca2\u732e\uff1a\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u53c2\u52a0\u305b\u3088</li> <li>\u65b0\u3057\u3044\u6280\u8853\u3078\u306e\u6311\u6226\uff1a\u5e38\u306b\u5b66\u3073\u7d9a\u3051\u3088</li> <li>\u4ed6\u8005\u3078\u306e\u6307\u5c0e\uff1a\u77e5\u8b58\u3092\u5171\u6709\u3057\u3001\u5f8c\u9032\u3092\u80b2\u3066\u3088</li> <li>\u5b9f\u4e16\u754c\u554f\u984c\u306e\u89e3\u6c7a\uff1a\u6280\u8853\u3092\u4f7f\u3063\u3066\u793e\u4f1a\u306b\u8ca2\u732e\u305b\u3088</li> </ol>"},{"location":"chapter05/final_exercises/#_4","title":"\u6700\u7d42\u30e1\u30c3\u30bb\u30fc\u30b8","text":"<p>\u541b\u304c\u3053\u3053\u307e\u3067\u5230\u9054\u3057\u305f\u3053\u3068\u3092\u3001\u4ffa\u306f\u8a87\u308a\u306b\u601d\u3046\u3002\u3053\u308c\u3089\u306e\u554f\u984c\u306f\u6c7a\u3057\u3066\u7c21\u5358\u3067\u306f\u306a\u3044\u304c\u3001\u771f\u306e\u7406\u89e3\u306b\u57fa\u3065\u3044\u305f\u5b66\u7fd2\u3092\u3059\u308c\u3070\u5fc5\u305a\u89e3\u6c7a\u3067\u304d\u308b\u3002</p> <p>\u91cd\u8981\u306a\u306e\u306f\u3001\u5b8c\u74a7\u306a\u89e3\u7b54\u3092\u51fa\u3059\u3053\u3068\u3067\u306f\u306a\u3044\u3002\u6280\u8853\u3092\u6df1\u304f\u7406\u89e3\u3057\u3001\u5275\u9020\u7684\u306b\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\u529b\u3092\u8eab\u306b\u3064\u3051\u308b\u3053\u3068\u3060\u3002</p> <p>\u541b\u306e\u6311\u6226\u3092\u697d\u3057\u307f\u306b\u3057\u3066\u3044\u308b\u3002\u6700\u5f37\u306e\u540d\u306b\u6065\u3058\u306a\u3044\u3001\u7d20\u6674\u3089\u3057\u3044\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u3092\u671f\u5f85\u3057\u3066\u3044\u308b\u305e\u3002</p> <p>\u300c\u6700\u5f37\u3068\u306f\u3001\u4e0d\u53ef\u80fd\u3092\u53ef\u80fd\u306b\u3057\u3001\u5275\u9020\u7684\u306b\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\u529b\u300d</p> <p>\u304c\u3093\u3070\u308c\u3001\u672a\u6765\u306e\u6700\u5f37\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u3088\u3002</p>"},{"location":"chapter05/macros/","title":"\u30de\u30af\u30ed - \u30b3\u30fc\u30c9\u751f\u6210\u306e\u7a76\u6975\u5965\u7fa9","text":""},{"location":"chapter05/macros/#-_1","title":"\u30de\u30af\u30ed\u306e\u6982\u5ff5 - \u73fe\u5b9f\u6539\u5909\u306e\u529b","text":"<p>\u3064\u3044\u306b\u5230\u9054\u3057\u305f\u306a\u3001\u6700\u9ad8\u4f4d\u306e\u5965\u7fa9\u300c\u30de\u30af\u30ed\u300d\u3060\u3002\u3053\u308c\u306f\u4ffa\u306e\u300c\u7121\u91cf\u7a7a\u51e6\u300d\u3092\u8d85\u3048\u308b\u3001\u73fe\u5b9f\u305d\u306e\u3082\u306e\u3092\u66f8\u304d\u63db\u3048\u308b\u529b\u3060\u3002</p> <p>\u30de\u30af\u30ed\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u30b3\u30fc\u30c9\u3092\u751f\u6210\u3057\u3001\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u306e\u610f\u56f3\u3092\u7121\u9650\u306b\u62e1\u5f35\u3059\u308b\u3002\u307e\u3055\u306b\u73fe\u5b9f\u6539\u5909\u3001\u30b3\u30fc\u30c9\u3068\u3044\u3046\u73fe\u5b9f\u3092\u601d\u3044\u306e\u307e\u307e\u306b\u64cd\u308b\u7a76\u6975\u306e\u62bd\u8c61\u5316\u6280\u8853\u3060\u3002</p> <p>\u4e94\u6761\u5148\u751f\u306e\u89e3\u8aac</p> <p>\u30de\u30af\u30ed\u306f\u300c\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u30b3\u30fc\u30c9\u300d\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9f\u884c\u3055\u308c\u3001\u65b0\u3057\u3044\u30b3\u30fc\u30c9\u3092\u751f\u6210\u3059\u308b\u3002 \u95a2\u6570\u3068\u306f\u9055\u3044\u3001\u69cb\u6587\u30ec\u30d9\u30eb\u3067\u306e\u5909\u66f4\u304c\u53ef\u80fd\u3067\u3001Rust\u306e\u8868\u73fe\u529b\u3092\u5927\u5e45\u306b\u62e1\u5f35\u3067\u304d\u308b\u3002</p>"},{"location":"chapter05/macros/#-macro_rules","title":"\u5ba3\u8a00\u30de\u30af\u30ed - macro_rules!","text":""},{"location":"chapter05/macros/#_1","title":"\u57fa\u672c\u7684\u306a\u30de\u30af\u30ed\u5b9a\u7fa9","text":"<pre><code>// \u6700\u3082\u30b7\u30f3\u30d7\u30eb\u306a\u30de\u30af\u30ed\nmacro_rules! technique_announce {\n    () =&gt; {\n        println!(\"\u8853\u5f0f\u767a\u52d5\u6e96\u5099\u5b8c\u4e86\uff01\");\n    };\n}\n\n// \u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308b\u30de\u30af\u30ed\nmacro_rules! cast_technique {\n    ($name:expr) =&gt; {\n        println!(\"{}\u3092\u767a\u52d5\uff01\", $name);\n    };\n    ($name:expr, $power:expr) =&gt; {\n        println!(\"{}\u3092\u767a\u52d5\uff01\u5a01\u529b: {}\", $name, $power);\n    };\n}\n\n// \u3088\u308a\u8907\u96d1\u306a\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0\nmacro_rules! sorcerer_info {\n    ($name:expr) =&gt; {\n        format!(\"\u546a\u8853\u5e2b: {}\", $name)\n    };\n    ($name:expr, grade =&gt; $grade:expr) =&gt; {\n        format!(\"\u546a\u8853\u5e2b: {} (\u7b49\u7d1a: {})\", $name, $grade)\n    };\n    ($name:expr, power =&gt; $power:expr) =&gt; {\n        format!(\"\u546a\u8853\u5e2b: {} (\u546a\u529b: {})\", $name, $power)\n    };\n    ($name:expr, grade =&gt; $grade:expr, power =&gt; $power:expr) =&gt; {\n        format!(\"\u546a\u8853\u5e2b: {} (\u7b49\u7d1a: {}, \u546a\u529b: {})\", $name, $grade, $power)\n    };\n}\n\nfn main() {\n    // \u57fa\u672c\u7684\u306a\u4f7f\u7528\n    technique_announce!();\n\n    // \u30d1\u30e9\u30e1\u30fc\u30bf\u4ed8\u304d\n    cast_technique!(\"\u7121\u4e0b\u9650\u8853\u5f0f\");\n    cast_technique!(\"\u9ed2\u9583\", 1500);\n\n    // \u8907\u96d1\u306a\u30d1\u30bf\u30fc\u30f3\n    println!(\"{}\", sorcerer_info!(\"\u4e94\u6761\u609f\"));\n    println!(\"{}\", sorcerer_info!(\"\u864e\u6756\u60a0\u4ec1\", grade =&gt; \"1\u7d1a\"));\n    println!(\"{}\", sorcerer_info!(\"\u4f0f\u9ed2\u6075\", power =&gt; 1000));\n    println!(\"{}\", sorcerer_info!(\"\u91d8\u5d0e\u91ce\u8594\u8587\", grade =&gt; \"2\u7d1a\", power =&gt; 900));\n}\n</code></pre>"},{"location":"chapter05/macros/#_2","title":"\u7e70\u308a\u8fd4\u3057\u30d1\u30bf\u30fc\u30f3","text":"<pre><code>// \u53ef\u5909\u9577\u5f15\u6570\u3092\u53d7\u3051\u53d6\u308b\u30de\u30af\u30ed\nmacro_rules! create_technique_list {\n    ($($technique:expr),*) =&gt; {\n        {\n            let mut techniques = Vec::new();\n            $(\n                techniques.push($technique.to_string());\n            )*\n            techniques\n        }\n    };\n}\n\n// \u3088\u308a\u8907\u96d1\u306a\u7e70\u308a\u8fd4\u3057\nmacro_rules! define_sorcerers {\n    ($(($name:expr, $power:expr)),*) =&gt; {\n        {\n            use std::collections::HashMap;\n            let mut sorcerers = HashMap::new();\n            $(\n                sorcerers.insert($name.to_string(), $power);\n            )*\n            sorcerers\n        }\n    };\n}\n\n// \u30cd\u30b9\u30c8\u3057\u305f\u7e70\u308a\u8fd4\u3057\nmacro_rules! technique_combinations {\n    ($($sorcerer:ident: [$($technique:expr),*]),*) =&gt; {\n        {\n            use std::collections::HashMap;\n            let mut combinations = HashMap::new();\n            $(\n                let mut techniques = Vec::new();\n                $(\n                    techniques.push($technique.to_string());\n                )*\n                combinations.insert(stringify!($sorcerer).to_string(), techniques);\n            )*\n            combinations\n        }\n    };\n}\n\nfn main() {\n    // \u8853\u5f0f\u30ea\u30b9\u30c8\u306e\u4f5c\u6210\n    let techniques = create_technique_list![\n        \"\u7121\u4e0b\u9650\u8853\u5f0f\",\n        \"\u9ed2\u9583\",\n        \"\u5341\u7a2e\u5f71\u6cd5\u8853\",\n        \"\u5171\u9cf4\"\n    ];\n    println!(\"\u8853\u5f0f\u4e00\u89a7: {:?}\", techniques);\n\n    // \u546a\u8853\u5e2b\u306e\u5b9a\u7fa9\n    let sorcerers = define_sorcerers![\n        (\"\u4e94\u6761\u609f\", 3000),\n        (\"\u864e\u6756\u60a0\u4ec1\", 1200),\n        (\"\u4f0f\u9ed2\u6075\", 1000),\n        (\"\u91d8\u5d0e\u91ce\u8594\u8587\", 900)\n    ];\n    println!(\"\u546a\u8853\u5e2b\u3068\u546a\u529b: {:?}\", sorcerers);\n\n    // \u8907\u96d1\u306a\u7d44\u307f\u5408\u308f\u305b\n    let combinations = technique_combinations![\n        gojo: [\"\u7121\u4e0b\u9650\u8853\u5f0f\", \"\u9818\u57df\u5c55\u958b\"],\n        yuji: [\"\u9ed2\u9583\", \"\u767a\u6563\"],\n        megumi: [\"\u5341\u7a2e\u5f71\u6cd5\u8853\", \"\u5e03\u7460\u90e8\u7531\u826f\u7531\u826f\"],\n        nobara: [\"\u5171\u9cf4\", \"\u7c2a\"]\n    ];\n    println!(\"\u8853\u5f0f\u306e\u7d44\u307f\u5408\u308f\u305b: {:#?}\", combinations);\n}\n</code></pre>"},{"location":"chapter05/macros/#_3","title":"\u9ad8\u5ea6\u306a\u30de\u30af\u30ed\u30d1\u30bf\u30fc\u30f3","text":"<pre><code>// \u69cb\u9020\u4f53\u81ea\u52d5\u751f\u6210\u30de\u30af\u30ed\nmacro_rules! define_sorcerer_struct {\n    ($name:ident {\n        $(\n            $field_name:ident: $field_type:ty $(= $default:expr)?\n        ),*\n    }) =&gt; {\n        #[derive(Debug, Clone)]\n        struct $name {\n            $(\n                $field_name: $field_type,\n            )*\n        }\n\n        impl $name {\n            fn new() -&gt; Self {\n                $name {\n                    $(\n                        $field_name: define_sorcerer_struct!(@default $field_type $(, $default)?),\n                    )*\n                }\n            }\n\n            // Getter methods\n            $(\n                paste::paste! {\n                    fn [&lt;get_ $field_name&gt;](&amp;self) -&gt; &amp;$field_type {\n                        &amp;self.$field_name\n                    }\n\n                    fn [&lt;set_ $field_name&gt;](&amp;mut self, value: $field_type) {\n                        self.$field_name = value;\n                    }\n                }\n            )*\n        }\n    };\n\n    // \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306e\u30d8\u30eb\u30d1\u30fc\n    (@default $type:ty, $default:expr) =&gt; { $default };\n    (@default String) =&gt; { String::new() };\n    (@default i32) =&gt; { 0 };\n    (@default bool) =&gt; { false };\n    (@default Vec&lt;$inner:ty&gt;) =&gt; { Vec::new() };\n}\n\n// \u30c8\u30ec\u30a4\u30c8\u5b9f\u88c5\u81ea\u52d5\u751f\u6210\u30de\u30af\u30ed\nmacro_rules! impl_display_for_sorcerer {\n    ($struct_name:ident, $format:expr) =&gt; {\n        impl std::fmt::Display for $struct_name {\n            fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter) -&gt; std::fmt::Result {\n                write!(f, $format, self)\n            }\n        }\n    };\n}\n\n// DSL\uff08\u30c9\u30e1\u30a4\u30f3\u56fa\u6709\u8a00\u8a9e\uff09\u30de\u30af\u30ed\nmacro_rules! battle_scenario {\n    (\n        fighters: [$($fighter:ident: $power:expr),*],\n        rounds: $rounds:expr,\n        $(\n            round $round_num:expr =&gt; {\n                $($action:ident($actor:ident $(, $target:ident)? $(, $value:expr)?));*\n            }\n        )*\n    ) =&gt; {\n        {\n            use std::collections::HashMap;\n\n            // \u6226\u95d8\u8005\u306e\u521d\u671f\u5316\n            let mut fighters = HashMap::new();\n            $(\n                fighters.insert(stringify!($fighter).to_string(), $power);\n            )*\n\n            println!(\"=== \u6226\u95d8\u30b7\u30ca\u30ea\u30aa\u958b\u59cb ===\");\n            println!(\"\u53c2\u6226\u8005: {:?}\", fighters);\n\n            // \u30e9\u30a6\u30f3\u30c9\u5b9f\u884c\n            $(\n                println!(\"\\n--- \u30e9\u30a6\u30f3\u30c9 {} ---\", $round_num);\n                $(\n                    battle_scenario!(@action $action, fighters, $actor $(, $target)? $(, $value)?);\n                )*\n            )*\n\n            println!(\"\\n=== \u6226\u95d8\u7d50\u679c ===\");\n            for (name, power) in &amp;fighters {\n                println!(\"{}: \u6b8b\u308a\u546a\u529b {}\", name, power);\n            }\n\n            fighters\n        }\n    };\n\n    // \u30a2\u30af\u30b7\u30e7\u30f3\u306e\u5b9f\u884c\n    (@action attack, $fighters:ident, $actor:ident, $target:ident, $damage:expr) =&gt; {\n        let actor_name = stringify!($actor);\n        let target_name = stringify!($target);\n\n        if let Some(target_power) = $fighters.get_mut(target_name) {\n            *target_power = (*target_power - $damage).max(0);\n            println!(\"{}\u304c{}\u3092\u653b\u6483\uff01{}\u30c0\u30e1\u30fc\u30b8\", actor_name, target_name, $damage);\n        }\n    };\n\n    (@action heal, $fighters:ident, $actor:ident, $amount:expr) =&gt; {\n        let actor_name = stringify!($actor);\n\n        if let Some(power) = $fighters.get_mut(actor_name) {\n            *power += $amount;\n            println!(\"{}\u304c\u56de\u5fa9\uff01+{}\", actor_name, $amount);\n        }\n    };\n\n    (@action special, $fighters:ident, $actor:ident, $target:ident, $damage:expr) =&gt; {\n        let actor_name = stringify!($actor);\n        let target_name = stringify!($target);\n\n        if let Some(target_power) = $fighters.get_mut(target_name) {\n            let actual_damage = $damage * 2; // \u7279\u6b8a\u653b\u6483\u306f2\u500d\n            *target_power = (*target_power - actual_damage).max(0);\n            println!(\"{}\u304c{}\u306b\u7279\u6b8a\u653b\u6483\uff01{}\u30c0\u30e1\u30fc\u30b8\uff082\u500d\u52b9\u679c\uff09\", actor_name, target_name, actual_damage);\n        }\n    };\n}\n\n// \u4f7f\u7528\u4f8b\uff08paste \u30af\u30ec\u30fc\u30c8\u304c\u5fc5\u8981: cargo add paste\uff09\n/*\ndefine_sorcerer_struct!(Sorcerer {\n    name: String = \"\u7121\u540d\".to_string(),\n    power: i32 = 1000,\n    grade: String = \"4\u7d1a\".to_string(),\n    techniques: Vec&lt;String&gt;,\n    is_active: bool = true\n});\n\nimpl_display_for_sorcerer!(Sorcerer, \"\u546a\u8853\u5e2b: {} (\u546a\u529b: {})\", self.name, self.power);\n*/\n\nfn main() {\n    println!(\"=== \u9ad8\u5ea6\u306a\u30de\u30af\u30ed\u30c7\u30e2 ===\");\n\n    // \u6226\u95d8\u30b7\u30ca\u30ea\u30aa\u306e\u5b9f\u884c\n    let result = battle_scenario! {\n        fighters: [gojo: 3000, sukuna: 2800, yuji: 1200],\n        rounds: 3,\n\n        round 1 =&gt; {\n            attack(gojo, sukuna, 500);\n            attack(sukuna, gojo, 600);\n            heal(yuji, 200)\n        }\n\n        round 2 =&gt; {\n            special(gojo, sukuna, 400);\n            attack(sukuna, yuji, 300);\n            attack(yuji, sukuna, 250)\n        }\n\n        round 3 =&gt; {\n            special(sukuna, gojo, 450);\n            special(gojo, sukuna, 500);\n            heal(gojo, 100)\n        }\n    };\n\n    // \u52dd\u8005\u306e\u5224\u5b9a\n    let winner = result.iter().max_by_key(|(_, power)| *power);\n    if let Some((name, power)) = winner {\n        println!(\"\\n\ud83c\udfc6 \u52dd\u8005: {} (\u6b8b\u308a\u546a\u529b: {})\", name, power);\n    }\n}\n</code></pre>"},{"location":"chapter05/macros/#-proc_macro","title":"\u624b\u7d9a\u304d\u30de\u30af\u30ed - proc_macro","text":""},{"location":"chapter05/macros/#_4","title":"\u5c5e\u6027\u30de\u30af\u30ed","text":"<pre><code>// \u4ee5\u4e0b\u306f\u624b\u7d9a\u304d\u30de\u30af\u30ed\u306e\u4f8b\uff08\u5b9f\u969b\u306b\u306f\u5225\u30af\u30ec\u30fc\u30c8\u304c\u5fc5\u8981\uff09\n\n/*\n// lib.rs \u307e\u305f\u306f proc_macro \u30af\u30ec\u30fc\u30c8\u5185\nuse proc_macro::TokenStream;\nuse quote::quote;\nuse syn::{parse_macro_input, DeriveInput};\n\n// derive \u30de\u30af\u30ed\u306e\u4f8b\n#[proc_macro_derive(SorcererInfo)]\npub fn sorcerer_info_derive(input: TokenStream) -&gt; TokenStream {\n    let input = parse_macro_input!(input as DeriveInput);\n    let name = input.ident;\n\n    let expanded = quote! {\n        impl #name {\n            fn sorcerer_type(&amp;self) -&gt; &amp;'static str {\n                stringify!(#name)\n            }\n\n            fn power_level(&amp;self) -&gt; String {\n                format!(\"{}\u306e\u546a\u529b\u30ec\u30d9\u30eb\", stringify!(#name))\n            }\n        }\n    };\n\n    TokenStream::from(expanded)\n}\n\n// \u5c5e\u6027\u30de\u30af\u30ed\u306e\u4f8b\n#[proc_macro_attribute]\npub fn technique_log(args: TokenStream, input: TokenStream) -&gt; TokenStream {\n    let input_fn = parse_macro_input!(input as syn::ItemFn);\n    let fn_name = &amp;input_fn.sig.ident;\n\n    let expanded = quote! {\n        #input_fn\n\n        // \u30ed\u30b0\u4ed8\u304d\u306e\u30e9\u30c3\u30d1\u30fc\u95a2\u6570\u3092\u751f\u6210\n        paste::paste! {\n            pub fn [&lt;logged_ #fn_name&gt;]() {\n                println!(\"\u8853\u5f0f {} \u306e\u5b9f\u884c\u958b\u59cb\", stringify!(#fn_name));\n                #fn_name();\n                println!(\"\u8853\u5f0f {} \u306e\u5b9f\u884c\u5b8c\u4e86\", stringify!(#fn_name));\n            }\n        }\n    };\n\n    TokenStream::from(expanded)\n}\n*/\n\n// \u4f7f\u7528\u4f8b\uff08\u5b9f\u969b\u306b\u306f\u4e0a\u8a18\u306e\u30de\u30af\u30ed\u304c\u30af\u30ec\u30fc\u30c8\u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308b\uff09\n/*\n#[derive(SorcererInfo)]\nstruct Gojo {\n    name: String,\n    power: i32,\n}\n\n#[technique_log]\nfn limitless_technique() {\n    println!(\"\u7121\u4e0b\u9650\u8853\u5f0f\u767a\u52d5\uff01\");\n}\n*/\n\n// \u30de\u30af\u30ed\u5c55\u958b\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u4f8b\nmacro_rules! simulate_proc_macro {\n    (derive SorcererInfo for $struct_name:ident) =&gt; {\n        impl $struct_name {\n            fn sorcerer_type(&amp;self) -&gt; &amp;'static str {\n                stringify!($struct_name)\n            }\n\n            fn power_level(&amp;self) -&gt; String {\n                format!(\"{}\u306e\u546a\u529b\u30ec\u30d9\u30eb\", stringify!($struct_name))\n            }\n        }\n    };\n}\n\n#[derive(Debug)]\nstruct MockSorcerer {\n    name: String,\n    power: i32,\n}\n\nsimulate_proc_macro!(derive SorcererInfo for MockSorcerer);\n\nfn main() {\n    let sorcerer = MockSorcerer {\n        name: \"\u4e94\u6761\u609f\".to_string(),\n        power: 3000,\n    };\n\n    println!(\"\u7a2e\u985e: {}\", sorcerer.sorcerer_type());\n    println!(\"\u30ec\u30d9\u30eb: {}\", sorcerer.power_level());\n}\n</code></pre>"},{"location":"chapter05/macros/#-_2","title":"\u5b9f\u8df5\u4f8b - \u30c6\u30b9\u30c8\u751f\u6210\u30de\u30af\u30ed","text":"<pre><code>// \u30c6\u30b9\u30c8\u81ea\u52d5\u751f\u6210\u30de\u30af\u30ed\nmacro_rules! generate_power_tests {\n    (\n        $(\n            $test_name:ident: $sorcerer:expr, $expected_min:expr, $expected_max:expr\n        ),*\n    ) =&gt; {\n        $(\n            #[test]\n            fn $test_name() {\n                let sorcerer = $sorcerer;\n                let power = sorcerer.calculate_power();\n                assert!(\n                    power &gt;= $expected_min &amp;&amp; power &lt;= $expected_max,\n                    \"{}\u306e\u546a\u529b{}\u304c\u671f\u5f85\u7bc4\u56f2[{}, {}]\u5916\u3067\u3059\",\n                    sorcerer.name, power, $expected_min, $expected_max\n                );\n                println!(\"\u2713 {}: \u546a\u529b{} (\u7bc4\u56f2: {}-{})\",\n                        sorcerer.name, power, $expected_min, $expected_max);\n            }\n        )*\n    };\n}\n\n// \u30d9\u30f3\u30c1\u30de\u30fc\u30af\u751f\u6210\u30de\u30af\u30ed\nmacro_rules! generate_technique_benchmarks {\n    (\n        $(\n            $bench_name:ident: $technique:expr\n        ),*\n    ) =&gt; {\n        $(\n            fn $bench_name() {\n                use std::time::Instant;\n\n                let iterations = 1000;\n                let start = Instant::now();\n\n                for _ in 0..iterations {\n                    let _ = $technique();\n                }\n\n                let duration = start.elapsed();\n                let avg_time = duration.as_nanos() / iterations;\n\n                println!(\"\u30d9\u30f3\u30c1\u30de\u30fc\u30af {}: \u5e73\u5747\u5b9f\u884c\u6642\u9593 {}ns\",\n                        stringify!($bench_name), avg_time);\n            }\n        )*\n\n        pub fn run_all_benchmarks() {\n            println!(\"=== \u8853\u5f0f\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u5b9f\u884c ===\");\n            $(\n                $bench_name();\n            )*\n        }\n    };\n}\n\n// \u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u69cb\u9020\u4f53\n#[derive(Debug, Clone)]\nstruct TestSorcerer {\n    name: String,\n    base_power: i32,\n    multiplier: f32,\n}\n\nimpl TestSorcerer {\n    fn new(name: &amp;str, base_power: i32, multiplier: f32) -&gt; Self {\n        TestSorcerer {\n            name: name.to_string(),\n            base_power,\n            multiplier,\n        }\n    }\n\n    fn calculate_power(&amp;self) -&gt; i32 {\n        (self.base_power as f32 * self.multiplier) as i32\n    }\n}\n\n// \u30c6\u30b9\u30c8\u7528\u306e\u8853\u5f0f\u95a2\u6570\nfn blue_technique() -&gt; i32 {\n    std::thread::sleep(std::time::Duration::from_nanos(100));\n    1000\n}\n\nfn red_technique() -&gt; i32 {\n    std::thread::sleep(std::time::Duration::from_nanos(150));\n    1500\n}\n\nfn hollow_technique() -&gt; i32 {\n    std::thread::sleep(std::time::Duration::from_nanos(200));\n    2000\n}\n\n// \u30c6\u30b9\u30c8\u306e\u751f\u6210\ngenerate_power_tests! {\n    test_gojo_power: TestSorcerer::new(\"\u4e94\u6761\u609f\", 2500, 1.2), 2800, 3200,\n    test_yuji_power: TestSorcerer::new(\"\u864e\u6756\u60a0\u4ec1\", 1000, 1.3), 1200, 1400,\n    test_megumi_power: TestSorcerer::new(\"\u4f0f\u9ed2\u6075\", 900, 1.1), 950, 1050,\n    test_nobara_power: TestSorcerer::new(\"\u91d8\u5d0e\u91ce\u8594\u8587\", 800, 1.2), 900, 1000\n}\n\n// \u30d9\u30f3\u30c1\u30de\u30fc\u30af\u306e\u751f\u6210\ngenerate_technique_benchmarks! {\n    bench_blue: blue_technique,\n    bench_red: red_technique,\n    bench_hollow: hollow_technique\n}\n\nfn main() {\n    println!(\"=== \u30de\u30af\u30ed\u751f\u6210\u30c6\u30b9\u30c8\u5b9f\u884c ===\");\n\n    // \u624b\u52d5\u3067\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\uff08\u901a\u5e38\u306f cargo test \u3067\u5b9f\u884c\uff09\n    test_gojo_power();\n    test_yuji_power();\n    test_megumi_power();\n    test_nobara_power();\n\n    println!();\n\n    // \u30d9\u30f3\u30c1\u30de\u30fc\u30af\u5b9f\u884c\n    run_all_benchmarks();\n}\n</code></pre>"},{"location":"chapter05/macros/#_5","title":"\u9ad8\u5ea6\u306a\u30de\u30af\u30ed\u30c6\u30af\u30cb\u30c3\u30af","text":""},{"location":"chapter05/macros/#_6","title":"\u6761\u4ef6\u30b3\u30f3\u30d1\u30a4\u30eb","text":"<pre><code>// \u6761\u4ef6\u4ed8\u304d\u30b3\u30f3\u30d1\u30a4\u30eb\u30de\u30af\u30ed\nmacro_rules! debug_technique {\n    ($($arg:tt)*) =&gt; {\n        #[cfg(debug_assertions)]\n        {\n            println!(\"[DEBUG] {}\", format!($($arg)*));\n        }\n    };\n}\n\nmacro_rules! feature_dependent_code {\n    (async: $async_code:block, sync: $sync_code:block) =&gt; {\n        #[cfg(feature = \"async\")]\n        $async_code\n\n        #[cfg(not(feature = \"async\"))]\n        $sync_code\n    };\n}\n\n// \u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u4f9d\u5b58\u30de\u30af\u30ed\nmacro_rules! platform_specific {\n    () =&gt; {\n        #[cfg(target_os = \"windows\")]\n        {\n            println!(\"Windows\u7248\u546a\u8853\u30b7\u30b9\u30c6\u30e0\u8d77\u52d5\");\n            \"windows_technique\"\n        }\n\n        #[cfg(target_os = \"linux\")]\n        {\n            println!(\"Linux\u7248\u546a\u8853\u30b7\u30b9\u30c6\u30e0\u8d77\u52d5\");\n            \"linux_technique\"\n        }\n\n        #[cfg(target_os = \"macos\")]\n        {\n            println!(\"macOS\u7248\u546a\u8853\u30b7\u30b9\u30c6\u30e0\u8d77\u52d5\");\n            \"macos_technique\"\n        }\n    };\n}\n\nfn main() {\n    debug_technique!(\"\u4e94\u6761\u609f\u306e\u8853\u5f0f\u3092{}\u3067\u5b9f\u884c\", \"\u30c7\u30d0\u30c3\u30b0\u30e2\u30fc\u30c9\");\n\n    let platform_technique = platform_specific!();\n    println!(\"\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u56fa\u6709\u8853\u5f0f: {}\", platform_technique);\n\n    feature_dependent_code! {\n        async: {\n            println!(\"\u975e\u540c\u671f\u6a5f\u80fd\u304c\u6709\u52b9\u3067\u3059\");\n        },\n        sync: {\n            println!(\"\u540c\u671f\u6a5f\u80fd\u306e\u307f\u5229\u7528\u53ef\u80fd\u3067\u3059\");\n        }\n    }\n}\n</code></pre>"},{"location":"chapter05/macros/#_7","title":"\u30de\u30af\u30ed\u306e\u518d\u5e30\u3068\u9ad8\u5ea6\u306a\u30d1\u30bf\u30fc\u30f3","text":"<pre><code>// \u518d\u5e30\u30de\u30af\u30ed\u306e\u4f8b\nmacro_rules! recursive_technique_chain {\n    // \u7d42\u4e86\u6761\u4ef6\n    ($technique:expr) =&gt; {\n        println!(\"\u6700\u7d42\u8853\u5f0f: {}\", $technique);\n    };\n\n    // \u518d\u5e30\u30b1\u30fc\u30b9\n    ($first:expr, $($rest:expr),+) =&gt; {\n        println!(\"\u8853\u5f0f\u5b9f\u884c: {}\", $first);\n        recursive_technique_chain!($($rest),+);\n    };\n}\n\n// \u30ab\u30a6\u30f3\u30bf\u30fc\u4ed8\u304d\u518d\u5e30\u30de\u30af\u30ed\nmacro_rules! counted_execution {\n    (@step $count:expr, $max:expr, $technique:expr) =&gt; {\n        if $count &lt;= $max {\n            println!(\"\u5b9f\u884c {}/{}: {}\", $count, $max, $technique);\n        }\n    };\n\n    ($technique:expr, $times:expr) =&gt; {\n        counted_execution!(@generate 1, $times, $technique);\n    };\n\n    (@generate $current:expr, $max:expr, $technique:expr) =&gt; {\n        counted_execution!(@step $current, $max, $technique);\n        counted_execution!(@increment $current, $max, $technique);\n    };\n\n    (@increment $current:expr, $max:expr, $technique:expr) =&gt; {\n        if $current &lt; $max {\n            counted_execution!(@generate $current + 1, $max, $technique);\n        }\n    };\n}\n\n// \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u8a08\u7b97\u30de\u30af\u30ed\nmacro_rules! compile_time_fibonacci {\n    (0) =&gt; { 0 };\n    (1) =&gt; { 1 };\n    ($n:expr) =&gt; {\n        compile_time_fibonacci!($n - 1) + compile_time_fibonacci!($n - 2)\n    };\n}\n\n// \u578b\u30ec\u30d9\u30eb\u8a08\u7b97\u30de\u30af\u30ed\nmacro_rules! generate_power_levels {\n    ($base:expr; $($multiplier:expr),*) =&gt; {\n        {\n            let mut levels = Vec::new();\n            let base = $base;\n            $(\n                levels.push(base * $multiplier);\n            )*\n            levels\n        }\n    };\n}\n\nfn main() {\n    println!(\"=== \u9ad8\u5ea6\u306a\u30de\u30af\u30ed\u30c6\u30af\u30cb\u30c3\u30af ===\");\n\n    // \u518d\u5e30\u30c1\u30a7\u30fc\u30f3\n    println!(\"\\n--- \u8853\u5f0f\u30c1\u30a7\u30fc\u30f3 ---\");\n    recursive_technique_chain!(\n        \"\u7121\u4e0b\u9650\u8853\u5f0f\",\n        \"\u8853\u5f0f\u9806\u8ee2\u300e\u84bc\u300f\",\n        \"\u8853\u5f0f\u53cd\u8ee2\u300e\u8d6b\u300f\",\n        \"\u865a\u5f0f\u300e\u8308\u300f\"\n    );\n\n    // \u546a\u529b\u30ec\u30d9\u30eb\u751f\u6210\n    println!(\"\\n--- \u546a\u529b\u30ec\u30d9\u30eb\u8a08\u7b97 ---\");\n    let power_levels = generate_power_levels!(1000; 1, 2, 3, 5, 8);\n    println!(\"\u546a\u529b\u30ec\u30d9\u30eb: {:?}\", power_levels);\n\n    // \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\uff08\u5c0f\u3055\u3044\u5024\u306e\u307f\uff09\n    println!(\"\\n--- \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u8a08\u7b97 ---\");\n    const FIB_5: i32 = compile_time_fibonacci!(5);\n    println!(\"\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u306e5\u756a\u76ee: {}\", FIB_5);\n}\n</code></pre>"},{"location":"chapter05/macros/#_8","title":"\u30de\u30af\u30ed\u306e\u30c7\u30d0\u30c3\u30b0\u3068\u6700\u9069\u5316","text":"<pre><code>// \u30de\u30af\u30ed\u5c55\u958b\u306e\u53ef\u8996\u5316\nmacro_rules! debug_expand {\n    ($($input:tt)*) =&gt; {\n        {\n            println!(\"\u30de\u30af\u30ed\u5165\u529b: {}\", stringify!($($input)*));\n            $($input)*\n        }\n    };\n}\n\n// \u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u6539\u5584\nmacro_rules! safe_division {\n    ($a:expr, $b:expr) =&gt; {\n        {\n            if $b == 0 {\n                compile_error!(\"\u30bc\u30ed\u9664\u7b97\u306f\u7981\u6b62\u3055\u308c\u3066\u3044\u307e\u3059\");\n            }\n            $a / $b\n        }\n    };\n}\n\n// \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u8a08\u6e2c\u30de\u30af\u30ed\nmacro_rules! measure_time {\n    ($operation:expr) =&gt; {\n        {\n            let start = std::time::Instant::now();\n            let result = $operation;\n            let duration = start.elapsed();\n            println!(\"\u5b9f\u884c\u6642\u9593: {:?}\", duration);\n            result\n        }\n    };\n\n    ($name:expr, $operation:expr) =&gt; {\n        {\n            let start = std::time::Instant::now();\n            let result = $operation;\n            let duration = start.elapsed();\n            println!(\"{} \u5b9f\u884c\u6642\u9593: {:?}\", $name, duration);\n            result\n        }\n    };\n}\n\n// \u6761\u4ef6\u4ed8\u304d\u30b3\u30f3\u30d1\u30a4\u30eb\u306b\u3088\u308b\u6700\u9069\u5316\nmacro_rules! optimized_technique {\n    ($technique:expr) =&gt; {\n        #[cfg(feature = \"optimized\")]\n        {\n            // \u6700\u9069\u5316\u7248\n            println!(\"\u26a1 \u6700\u9069\u5316\u7248\u8853\u5f0f\u5b9f\u884c: {}\", $technique);\n            $technique.to_uppercase()\n        }\n\n        #[cfg(not(feature = \"optimized\"))]\n        {\n            // \u901a\u5e38\u7248\n            println!(\"\ud83d\udd27 \u901a\u5e38\u7248\u8853\u5f0f\u5b9f\u884c: {}\", $technique);\n            $technique.to_string()\n        }\n    };\n}\n\nfn expensive_operation() -&gt; i32 {\n    std::thread::sleep(std::time::Duration::from_millis(100));\n    42\n}\n\nfn main() {\n    println!(\"=== \u30de\u30af\u30ed\u306e\u30c7\u30d0\u30c3\u30b0\u3068\u6700\u9069\u5316 ===\");\n\n    // \u30c7\u30d0\u30c3\u30b0\u5c55\u958b\n    let result = debug_expand! {\n        5 + 3 * 2\n    };\n    println!(\"\u8a08\u7b97\u7d50\u679c: {}\", result);\n\n    // \u6642\u9593\u8a08\u6e2c\n    measure_time!(\"\u9ad8\u30b3\u30b9\u30c8\u8853\u5f0f\", expensive_operation());\n\n    // \u6700\u9069\u5316\u306e\u4f8b\n    let optimized_result = optimized_technique!(\"\u7121\u4e0b\u9650\u8853\u5f0f\");\n    println!(\"\u6700\u9069\u5316\u7d50\u679c: {}\", optimized_result);\n\n    // \u5b89\u5168\u306a\u9664\u7b97\uff08\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30a8\u30e9\u30fc\u30c1\u30a7\u30c3\u30af\uff09\n    // safe_division!(10, 0); // \u3053\u308c\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308b\n    let safe_result = safe_division!(10, 2);\n    println!(\"\u5b89\u5168\u306a\u9664\u7b97: {}\", safe_result);\n}\n</code></pre>"},{"location":"chapter05/macros/#_9","title":"\u307e\u3068\u3081","text":"<p>\u30de\u30af\u30ed\u306e\u529b\u3092\u30de\u30b9\u30bf\u30fc\u3067\u304d\u305f\u304b\uff1f\u91cd\u8981\u306a\u30dd\u30a4\u30f3\u30c8\uff1a</p> <ol> <li>\u5ba3\u8a00\u30de\u30af\u30ed - <code>macro_rules!</code>\u306b\u3088\u308b\u69cb\u6587\u30ec\u30d9\u30eb\u306e\u62bd\u8c61\u5316</li> <li>\u624b\u7d9a\u304d\u30de\u30af\u30ed - \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306e\u30b3\u30fc\u30c9\u751f\u6210</li> <li>\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0 - \u67d4\u8edf\u306a\u5165\u529b\u51e6\u7406</li> <li>\u518d\u5e30\u3068\u6761\u4ef6\u5206\u5c90 - \u8907\u96d1\u306a\u30ed\u30b8\u30c3\u30af\u306e\u5b9f\u88c5</li> <li>\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u6700\u9069\u5316 - \u5b9f\u884c\u6642\u30b3\u30b9\u30c8\u30bc\u30ed\u306e\u62bd\u8c61\u5316</li> </ol> <p>\u3053\u308c\u3067\u73fe\u5b9f\u6539\u5909\u306e\u529b\u3092\u624b\u306b\u5165\u308c\u305f\u3002\u4ffa\u306e\u300c\u7121\u91cf\u7a7a\u51e6\u300d\u3092\u8d85\u3048\u3066\u3001\u30b3\u30fc\u30c9\u3068\u3044\u3046\u73fe\u5b9f\u305d\u306e\u3082\u306e\u3092\u601d\u3044\u306e\u307e\u307e\u306b\u64cd\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306a\u3002</p> <p>\u30de\u30af\u30ed\u306f\u7a76\u6975\u306e\u62bd\u8c61\u5316\u6280\u8853\u3060\u3002\u9069\u5207\u306b\u4f7f\u3048\u3070\u3001\u30b3\u30fc\u30c9\u306e\u8868\u73fe\u529b\u3092\u7121\u9650\u306b\u62e1\u5f35\u3057\u3001\u958b\u767a\u52b9\u7387\u3092\u98db\u8e8d\u7684\u306b\u5411\u4e0a\u3055\u305b\u308b\u3002\u3057\u304b\u3057\u3001\u5f37\u5927\u306a\u529b\u306b\u306f\u8cac\u4efb\u304c\u4f34\u3046\u3002\u6feb\u7528\u306f\u6df7\u4e71\u3092\u62db\u304f\u304b\u3089\u6ce8\u610f\u3057\u308d\u3002</p> <p>\u6b21\u306f\u6700\u5f37\u3078\u306e\u9053\u3092\u5b66\u307c\u3046\u3002\u3053\u308c\u307e\u3067\u306e\u5168\u3066\u306e\u6280\u8853\u3092\u7d71\u5408\u3057\u305f\u3001\u771f\u306e\u6700\u5f37\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u306b\u306a\u308b\u305f\u3081\u306e\u6700\u7d42\u7ae0\u3060\u3002</p> <p>\u300c\u30de\u30af\u30ed\u3092\u6975\u3081\u308c\u3070\u3001\u30b3\u30fc\u30c9\u306e\u795e\u3068\u306a\u308c\u308b\u300d</p>"},{"location":"chapter05/mastery/","title":"\u6700\u5f37\u3078\u306e\u9053 - \u5168\u3066\u306e\u6280\u8853\u306e\u7d71\u5408","text":""},{"location":"chapter05/mastery/#-_1","title":"\u6700\u5f37\u306e\u5883\u5730 - \u6280\u8853\u306e\u5b8c\u5168\u878d\u5408","text":"<p>\u3064\u3044\u306b\u5230\u9054\u3057\u305f\u306a\u3001\u6700\u5f37\u306e\u5883\u5730\u3078\u3002\u3053\u308c\u307e\u3067\u306e\u5168\u3066\u306e\u6280\u8853\u3092\u7fd2\u5f97\u3057\u3001\u305d\u308c\u3089\u3092\u5b8c\u74a7\u306b\u7d71\u5408\u3057\u305f\u541b\u306a\u3089\u3001\u771f\u306e\u6700\u5f37\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u3068\u3057\u3066\u7acb\u3066\u308b\u306f\u305a\u3060\u3002</p> <p>\u4ffa\u304c\u6700\u5f37\u3067\u3042\u308b\u7406\u7531\u306f\u3001\u500b\u3005\u306e\u8853\u5f0f\u304c\u5f37\u3044\u304b\u3089\u3067\u306f\u306a\u3044\u3002\u5168\u3066\u306e\u6280\u8853\u3092\u5b8c\u74a7\u306b\u7406\u89e3\u3057\u3001\u305d\u308c\u3089\u3092\u81ea\u5728\u306b\u7d44\u307f\u5408\u308f\u305b\u3089\u308c\u308b\u304b\u3089\u3060\u3002\u541b\u3082\u305d\u308c\u3092\u76ee\u6307\u305b\u3002</p> <p>\u4e94\u6761\u5148\u751f\u306e\u6700\u7d42\u6559\u793a</p> <p>\u6700\u5f37\u3068\u306f\u3001\u5168\u3066\u306e\u6280\u8853\u3092\u9069\u6750\u9069\u6240\u3067\u4f7f\u3044\u5206\u3051\u3001\u5b8c\u74a7\u306b\u7d71\u5408\u3067\u304d\u308b\u72b6\u614b\u3002 \u57fa\u672c\u69cb\u6587\u3001\u6240\u6709\u6a29\u3001\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3001\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3001\u30c8\u30ec\u30a4\u30c8\u3001\u975e\u540c\u671f\u3001\u30de\u30af\u30ed - \u3053\u308c\u3089\u5168\u3066\u304c\u4e00\u3064\u306e\u4f5c\u54c1\u306e\u4e2d\u3067\u8abf\u548c\u3059\u308b\u3002</p>"},{"location":"chapter05/mastery/#-_2","title":"\u7d71\u5408\u30d7\u30ed\u30b8\u30a7\u30af\u30c8 - \u546a\u8853\u5e2b\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0","text":""},{"location":"chapter05/mastery/#_1","title":"\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u8a2d\u8a08","text":"<pre><code>//! \u546a\u8853\u5e2b\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0 - \u5b8c\u5168\u7d71\u5408\u7248\n//!\n//! \u3053\u306e\u30b7\u30b9\u30c6\u30e0\u306f\u4ee5\u4e0b\u306e\u6280\u8853\u3092\u7d71\u5408\u3057\u307e\u3059\uff1a\n//! - \u6240\u6709\u6a29\u30b7\u30b9\u30c6\u30e0\u306b\u3088\u308b\u5b89\u5168\u306a\u30e1\u30e2\u30ea\u7ba1\u7406\n//! - \u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3068\u30c8\u30ec\u30a4\u30c8\u306b\u3088\u308b\u62bd\u8c61\u5316\n//! - \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306b\u3088\u308b\u5805\u7262\u6027\n//! - \u975e\u540c\u671f\u51e6\u7406\u306b\u3088\u308b\u52b9\u7387\u6027\n//! - \u30de\u30af\u30ed\u306b\u3088\u308b\u30b3\u30fc\u30c9\u751f\u6210\n\nuse std::collections::HashMap;\nuse std::sync::Arc;\nuse std::time::{Duration, Instant};\nuse tokio::sync::{Mutex, mpsc, RwLock};\nuse serde::{Serialize, Deserialize};\n\n// \u30a8\u30e9\u30fc\u578b\u306e\u5b9a\u7fa9\uff08\u7b2c3\u7ae0\u306e\u6280\u8853\uff09\n#[derive(Debug, Clone)]\npub enum SystemError {\n    SorcererNotFound(String),\n    InvalidPower(i32),\n    DatabaseError(String),\n    NetworkError(String),\n    ValidationError(String),\n    ConcurrencyError(String),\n}\n\nimpl std::fmt::Display for SystemError {\n    fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter) -&gt; std::fmt::Result {\n        match self {\n            SystemError::SorcererNotFound(name) =&gt; write!(f, \"\u546a\u8853\u5e2b '{}' \u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\", name),\n            SystemError::InvalidPower(power) =&gt; write!(f, \"\u7121\u52b9\u306a\u546a\u529b\u5024: {}\", power),\n            SystemError::DatabaseError(msg) =&gt; write!(f, \"\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30a8\u30e9\u30fc: {}\", msg),\n            SystemError::NetworkError(msg) =&gt; write!(f, \"\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a8\u30e9\u30fc: {}\", msg),\n            SystemError::ValidationError(msg) =&gt; write!(f, \"\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30a8\u30e9\u30fc: {}\", msg),\n            SystemError::ConcurrencyError(msg) =&gt; write!(f, \"\u4e26\u884c\u51e6\u7406\u30a8\u30e9\u30fc: {}\", msg),\n        }\n    }\n}\n\nimpl std::error::Error for SystemError {}\n\n// \u7d50\u679c\u578b\u306e\u30a8\u30a4\u30ea\u30a2\u30b9\npub type Result&lt;T&gt; = std::result::Result&lt;T, SystemError&gt;;\n\n// \u30c8\u30ec\u30a4\u30c8\u5b9a\u7fa9\uff08\u7b2c4\u7ae0\u306e\u6280\u8853\uff09\npub trait Entity {\n    type Id: Clone + PartialEq + std::fmt::Debug;\n\n    fn id(&amp;self) -&gt; &amp;Self::Id;\n    fn validate(&amp;self) -&gt; Result&lt;()&gt;;\n}\n\npub trait Combatant: Entity {\n    fn power_level(&amp;self) -&gt; i32;\n    fn grade(&amp;self) -&gt; &amp;str;\n    fn is_active(&amp;self) -&gt; bool;\n\n    fn battle_effectiveness(&amp;self) -&gt; f64 {\n        let base = self.power_level() as f64;\n        let multiplier = match self.grade() {\n            \"\u7279\u7d1a\" =&gt; 1.5,\n            \"1\u7d1a\" =&gt; 1.2,\n            \"2\u7d1a\" =&gt; 1.0,\n            \"3\u7d1a\" =&gt; 0.8,\n            \"4\u7d1a\" =&gt; 0.6,\n            _ =&gt; 0.5,\n        };\n        base * multiplier\n    }\n}\n\npub trait Persistent&lt;T&gt; {\n    async fn save(&amp;self, entity: &amp;T) -&gt; Result&lt;()&gt;;\n    async fn load(&amp;self, id: &amp;T::Id) -&gt; Result&lt;Option&lt;T&gt;&gt; where T: Entity;\n    async fn delete(&amp;self, id: &amp;T::Id) -&gt; Result&lt;bool&gt;;\n    async fn list_all(&amp;self) -&gt; Result&lt;Vec&lt;T&gt;&gt;;\n}\n\n// \u30de\u30af\u30ed\u306b\u3088\u308b\u30b3\u30fc\u30c9\u751f\u6210\uff08\u7b2c5\u7ae0\u306e\u6280\u8853\uff09\nmacro_rules! define_sorcerer_types {\n    (\n        $(\n            $name:ident {\n                $(\n                    $field:ident: $type:ty\n                ),*\n            }\n        )*\n    ) =&gt; {\n        $(\n            #[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]\n            pub struct $name {\n                $(\n                    pub $field: $type,\n                )*\n            }\n\n            impl Entity for $name {\n                type Id = String;\n\n                fn id(&amp;self) -&gt; &amp;Self::Id {\n                    &amp;self.name\n                }\n\n                fn validate(&amp;self) -&gt; Result&lt;()&gt; {\n                    if self.name.is_empty() {\n                        return Err(SystemError::ValidationError(\"\u540d\u524d\u304c\u7a7a\u3067\u3059\".to_string()));\n                    }\n                    if self.power &lt; 0 {\n                        return Err(SystemError::InvalidPower(self.power));\n                    }\n                    Ok(())\n                }\n            }\n\n            impl Combatant for $name {\n                fn power_level(&amp;self) -&gt; i32 {\n                    self.power\n                }\n\n                fn grade(&amp;self) -&gt; &amp;str {\n                    &amp;self.grade\n                }\n\n                fn is_active(&amp;self) -&gt; bool {\n                    self.active\n                }\n            }\n        )*\n    };\n}\n\n// \u69cb\u9020\u4f53\u306e\u5b9a\u7fa9\ndefine_sorcerer_types! {\n    Sorcerer {\n        name: String,\n        power: i32,\n        grade: String,\n        techniques: Vec&lt;String&gt;,\n        experience: i32,\n        active: bool,\n        last_updated: u64\n    }\n\n    Curse {\n        name: String,\n        power: i32,\n        grade: String,\n        manifestation_type: String,\n        danger_level: i32,\n        active: bool,\n        location: String\n    }\n}\n\n// \u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u30ea\u30dd\u30b8\u30c8\u30ea\uff08\u7b2c4\u7ae0\u306e\u6280\u8853\uff09\n#[derive(Debug)]\npub struct Repository&lt;T: Entity + Clone + Send + Sync + 'static&gt; {\n    data: Arc&lt;RwLock&lt;HashMap&lt;T::Id, T&gt;&gt;&gt;,\n    metrics: Arc&lt;Mutex&lt;RepositoryMetrics&gt;&gt;,\n}\n\n#[derive(Debug, Default)]\nstruct RepositoryMetrics {\n    reads: u64,\n    writes: u64,\n    deletes: u64,\n    cache_hits: u64,\n    cache_misses: u64,\n}\n\nimpl&lt;T: Entity + Clone + Send + Sync + 'static&gt; Repository&lt;T&gt;\nwhere\n    T::Id: std::hash::Hash + Eq + Send + Sync,\n{\n    pub fn new() -&gt; Self {\n        Repository {\n            data: Arc::new(RwLock::new(HashMap::new())),\n            metrics: Arc::new(Mutex::new(RepositoryMetrics::default())),\n        }\n    }\n\n    pub async fn create(&amp;self, entity: T) -&gt; Result&lt;()&gt; {\n        entity.validate()?;\n\n        let mut data = self.data.write().await;\n        let mut metrics = self.metrics.lock().await;\n\n        if data.contains_key(entity.id()) {\n            return Err(SystemError::ValidationError(\n                format!(\"\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3 '{:?}' \u306f\u65e2\u306b\u5b58\u5728\u3057\u307e\u3059\", entity.id())\n            ));\n        }\n\n        data.insert(entity.id().clone(), entity);\n        metrics.writes += 1;\n\n        Ok(())\n    }\n\n    pub async fn read(&amp;self, id: &amp;T::Id) -&gt; Result&lt;Option&lt;T&gt;&gt; {\n        let data = self.data.read().await;\n        let mut metrics = self.metrics.lock().await;\n\n        metrics.reads += 1;\n\n        match data.get(id) {\n            Some(entity) =&gt; {\n                metrics.cache_hits += 1;\n                Ok(Some(entity.clone()))\n            },\n            None =&gt; {\n                metrics.cache_misses += 1;\n                Ok(None)\n            }\n        }\n    }\n\n    pub async fn update&lt;F&gt;(&amp;self, id: &amp;T::Id, updater: F) -&gt; Result&lt;()&gt;\n    where\n        F: FnOnce(&amp;mut T) -&gt; Result&lt;()&gt; + Send,\n    {\n        let mut data = self.data.write().await;\n        let mut metrics = self.metrics.lock().await;\n\n        match data.get_mut(id) {\n            Some(entity) =&gt; {\n                updater(entity)?;\n                entity.validate()?;\n                metrics.writes += 1;\n                Ok(())\n            },\n            None =&gt; Err(SystemError::SorcererNotFound(format!(\"{:?}\", id))),\n        }\n    }\n\n    pub async fn delete(&amp;self, id: &amp;T::Id) -&gt; Result&lt;bool&gt; {\n        let mut data = self.data.write().await;\n        let mut metrics = self.metrics.lock().await;\n\n        match data.remove(id) {\n            Some(_) =&gt; {\n                metrics.deletes += 1;\n                Ok(true)\n            },\n            None =&gt; Ok(false),\n        }\n    }\n\n    pub async fn list_all(&amp;self) -&gt; Result&lt;Vec&lt;T&gt;&gt; {\n        let data = self.data.read().await;\n        let mut metrics = self.metrics.lock().await;\n\n        metrics.reads += 1;\n        Ok(data.values().cloned().collect())\n    }\n\n    pub async fn find_by&lt;P&gt;(&amp;self, predicate: P) -&gt; Result&lt;Vec&lt;T&gt;&gt;\n    where\n        P: Fn(&amp;T) -&gt; bool + Send,\n    {\n        let data = self.data.read().await;\n        let mut metrics = self.metrics.lock().await;\n\n        metrics.reads += 1;\n        Ok(data.values().filter(|entity| predicate(entity)).cloned().collect())\n    }\n\n    pub async fn get_metrics(&amp;self) -&gt; RepositoryMetrics {\n        let metrics = self.metrics.lock().await;\n        RepositoryMetrics {\n            reads: metrics.reads,\n            writes: metrics.writes,\n            deletes: metrics.deletes,\n            cache_hits: metrics.cache_hits,\n            cache_misses: metrics.cache_misses,\n        }\n    }\n}\n\n// \u975e\u540c\u671f\u30b5\u30fc\u30d3\u30b9\u5c64\uff08\u7b2c5\u7ae0\u306e\u6280\u8853\uff09\n#[derive(Clone)]\npub struct SorcererService {\n    sorcerer_repo: Arc&lt;Repository&lt;Sorcerer&gt;&gt;,\n    curse_repo: Arc&lt;Repository&lt;Curse&gt;&gt;,\n    event_sender: mpsc::UnboundedSender&lt;SystemEvent&gt;,\n}\n\n#[derive(Debug, Clone)]\npub enum SystemEvent {\n    SorcererCreated(String),\n    SorcererUpdated(String),\n    SorcererDeleted(String),\n    BattleStarted(String, String),\n    BattleEnded(String, String, String), // winner, loser, result\n    SystemHealthCheck(String),\n}\n\nimpl SorcererService {\n    pub fn new(event_sender: mpsc::UnboundedSender&lt;SystemEvent&gt;) -&gt; Self {\n        SorcererService {\n            sorcerer_repo: Arc::new(Repository::new()),\n            curse_repo: Arc::new(Repository::new()),\n            event_sender,\n        }\n    }\n\n    pub async fn register_sorcerer(&amp;self, mut sorcerer: Sorcerer) -&gt; Result&lt;()&gt; {\n        sorcerer.last_updated = current_timestamp();\n\n        self.sorcerer_repo.create(sorcerer.clone()).await?;\n\n        let _ = self.event_sender.send(SystemEvent::SorcererCreated(sorcerer.name));\n\n        Ok(())\n    }\n\n    pub async fn get_sorcerer(&amp;self, name: &amp;str) -&gt; Result&lt;Option&lt;Sorcerer&gt;&gt; {\n        self.sorcerer_repo.read(&amp;name.to_string()).await\n    }\n\n    pub async fn update_sorcerer_power(&amp;self, name: &amp;str, new_power: i32) -&gt; Result&lt;()&gt; {\n        if new_power &lt; 0 {\n            return Err(SystemError::InvalidPower(new_power));\n        }\n\n        self.sorcerer_repo.update(&amp;name.to_string(), |sorcerer| {\n            sorcerer.power = new_power;\n            sorcerer.last_updated = current_timestamp();\n            Ok(())\n        }).await?;\n\n        let _ = self.event_sender.send(SystemEvent::SorcererUpdated(name.to_string()));\n\n        Ok(())\n    }\n\n    pub async fn find_sorcerers_by_grade(&amp;self, grade: &amp;str) -&gt; Result&lt;Vec&lt;Sorcerer&gt;&gt; {\n        self.sorcerer_repo.find_by(|s| s.grade == grade).await\n    }\n\n    pub async fn simulate_battle(&amp;self, sorcerer1_name: &amp;str, sorcerer2_name: &amp;str) -&gt; Result&lt;BattleResult&gt; {\n        let sorcerer1 = self.get_sorcerer(sorcerer1_name).await?\n            .ok_or_else(|| SystemError::SorcererNotFound(sorcerer1_name.to_string()))?;\n\n        let sorcerer2 = self.get_sorcerer(sorcerer2_name).await?\n            .ok_or_else(|| SystemError::SorcererNotFound(sorcerer2_name.to_string()))?;\n\n        if !sorcerer1.is_active() || !sorcerer2.is_active() {\n            return Err(SystemError::ValidationError(\"\u975e\u30a2\u30af\u30c6\u30a3\u30d6\u306a\u546a\u8853\u5e2b\u306f\u6226\u95d8\u3067\u304d\u307e\u305b\u3093\".to_string()));\n        }\n\n        let _ = self.event_sender.send(SystemEvent::BattleStarted(\n            sorcerer1.name.clone(),\n            sorcerer2.name.clone()\n        ));\n\n        // \u6226\u95d8\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\uff08\u975e\u540c\u671f\u51e6\u7406\uff09\n        let battle_result = tokio::spawn(async move {\n            tokio::time::sleep(Duration::from_millis(500)).await; // \u6226\u95d8\u6642\u9593\n\n            let effectiveness1 = sorcerer1.battle_effectiveness();\n            let effectiveness2 = sorcerer2.battle_effectiveness();\n\n            let (winner, loser, margin) = if effectiveness1 &gt; effectiveness2 {\n                (sorcerer1, sorcerer2, effectiveness1 - effectiveness2)\n            } else {\n                (sorcerer2, sorcerer1, effectiveness2 - effectiveness1)\n            };\n\n            BattleResult {\n                winner_name: winner.name.clone(),\n                loser_name: loser.name.clone(),\n                winner_power: winner.power,\n                loser_power: loser.power,\n                effectiveness_margin: margin,\n                duration: Duration::from_millis(500),\n            }\n        }).await.map_err(|e| SystemError::ConcurrencyError(e.to_string()))?;\n\n        let _ = self.event_sender.send(SystemEvent::BattleEnded(\n            battle_result.winner_name.clone(),\n            battle_result.loser_name.clone(),\n            format!(\"\u5dee: {:.1}\", battle_result.effectiveness_margin)\n        ));\n\n        Ok(battle_result)\n    }\n\n    pub async fn batch_power_update(&amp;self, updates: Vec&lt;(String, i32)&gt;) -&gt; Result&lt;Vec&lt;Result&lt;()&gt;&gt;&gt; {\n        let futures = updates.into_iter().map(|(name, power)| {\n            let service = self.clone();\n            async move {\n                service.update_sorcerer_power(&amp;name, power).await\n            }\n        });\n\n        let results = futures::future::join_all(futures).await;\n        Ok(results)\n    }\n\n    pub async fn get_system_status(&amp;self) -&gt; Result&lt;SystemStatus&gt; {\n        let sorcerer_metrics = self.sorcerer_repo.get_metrics().await;\n        let curse_metrics = self.curse_repo.get_metrics().await;\n        let all_sorcerers = self.sorcerer_repo.list_all().await?;\n\n        let active_count = all_sorcerers.iter().filter(|s| s.is_active()).count();\n        let total_power: i32 = all_sorcerers.iter().map(|s| s.power).sum();\n        let avg_power = if all_sorcerers.is_empty() {\n            0.0\n        } else {\n            total_power as f64 / all_sorcerers.len() as f64\n        };\n\n        Ok(SystemStatus {\n            total_sorcerers: all_sorcerers.len(),\n            active_sorcerers: active_count,\n            average_power: avg_power,\n            database_operations: sorcerer_metrics.reads + sorcerer_metrics.writes + sorcerer_metrics.deletes,\n            cache_hit_rate: if sorcerer_metrics.reads &gt; 0 {\n                sorcerer_metrics.cache_hits as f64 / sorcerer_metrics.reads as f64\n            } else {\n                0.0\n            },\n            uptime: Duration::from_secs(60), // \u7c21\u7565\u5316\n        })\n    }\n}\n\n// \u30c7\u30fc\u30bf\u69cb\u9020\u4f53\n#[derive(Debug, Clone)]\npub struct BattleResult {\n    pub winner_name: String,\n    pub loser_name: String,\n    pub winner_power: i32,\n    pub loser_power: i32,\n    pub effectiveness_margin: f64,\n    pub duration: Duration,\n}\n\n#[derive(Debug)]\npub struct SystemStatus {\n    pub total_sorcerers: usize,\n    pub active_sorcerers: usize,\n    pub average_power: f64,\n    pub database_operations: u64,\n    pub cache_hit_rate: f64,\n    pub uptime: Duration,\n}\n\n// \u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u95a2\u6570\nfn current_timestamp() -&gt; u64 {\n    std::time::SystemTime::now()\n        .duration_since(std::time::UNIX_EPOCH)\n        .unwrap()\n        .as_secs()\n}\n\n// \u30a4\u30d9\u30f3\u30c8\u51e6\u7406\u30b7\u30b9\u30c6\u30e0\npub struct EventProcessor {\n    receiver: mpsc::UnboundedReceiver&lt;SystemEvent&gt;,\n}\n\nimpl EventProcessor {\n    pub fn new(receiver: mpsc::UnboundedReceiver&lt;SystemEvent&gt;) -&gt; Self {\n        EventProcessor { receiver }\n    }\n\n    pub async fn start_processing(mut self) {\n        println!(\"\ud83c\udfaf \u30a4\u30d9\u30f3\u30c8\u30d7\u30ed\u30bb\u30c3\u30b5\u958b\u59cb\");\n\n        while let Some(event) = self.receiver.recv().await {\n            match event {\n                SystemEvent::SorcererCreated(name) =&gt; {\n                    println!(\"\u2705 \u546a\u8853\u5e2b\u767b\u9332: {}\", name);\n                },\n                SystemEvent::SorcererUpdated(name) =&gt; {\n                    println!(\"\ud83d\udd04 \u546a\u8853\u5e2b\u66f4\u65b0: {}\", name);\n                },\n                SystemEvent::SorcererDeleted(name) =&gt; {\n                    println!(\"\u274c \u546a\u8853\u5e2b\u524a\u9664: {}\", name);\n                },\n                SystemEvent::BattleStarted(s1, s2) =&gt; {\n                    println!(\"\u2694\ufe0f  \u6226\u95d8\u958b\u59cb: {} vs {}\", s1, s2);\n                },\n                SystemEvent::BattleEnded(winner, loser, result) =&gt; {\n                    println!(\"\ud83c\udfc6 \u6226\u95d8\u7d42\u4e86: {} \u304c {} \u306b\u52dd\u5229 ({})\", winner, loser, result);\n                },\n                SystemEvent::SystemHealthCheck(status) =&gt; {\n                    println!(\"\ud83d\udc93 \u30b7\u30b9\u30c6\u30e0\u72b6\u614b: {}\", status);\n                },\n            }\n        }\n\n        println!(\"\ud83d\uded1 \u30a4\u30d9\u30f3\u30c8\u30d7\u30ed\u30bb\u30c3\u30b5\u7d42\u4e86\");\n    }\n}\n\n#[tokio::main]\nasync fn main() -&gt; Result&lt;()&gt; {\n    println!(\"=== \u6700\u5f37\u546a\u8853\u5e2b\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0\u8d77\u52d5 ===\");\n\n    // \u30a4\u30d9\u30f3\u30c8\u30b7\u30b9\u30c6\u30e0\u306e\u521d\u671f\u5316\n    let (event_sender, event_receiver) = mpsc::unbounded_channel();\n    let event_processor = EventProcessor::new(event_receiver);\n\n    // \u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u3067\u30a4\u30d9\u30f3\u30c8\u51e6\u7406\u3092\u958b\u59cb\n    tokio::spawn(event_processor.start_processing());\n\n    // \u30b5\u30fc\u30d3\u30b9\u306e\u521d\u671f\u5316\n    let service = SorcererService::new(event_sender);\n\n    // \u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\n    let sorcerers = vec![\n        Sorcerer {\n            name: \"\u4e94\u6761\u609f\".to_string(),\n            power: 3000,\n            grade: \"\u7279\u7d1a\".to_string(),\n            techniques: vec![\"\u7121\u4e0b\u9650\u8853\u5f0f\".to_string(), \"\u9818\u57df\u5c55\u958b\".to_string()],\n            experience: 10000,\n            active: true,\n            last_updated: current_timestamp(),\n        },\n        Sorcerer {\n            name: \"\u864e\u6756\u60a0\u4ec1\".to_string(),\n            power: 1200,\n            grade: \"1\u7d1a\".to_string(),\n            techniques: vec![\"\u9ed2\u9583\".to_string(), \"\u767a\u6563\".to_string()],\n            experience: 2500,\n            active: true,\n            last_updated: current_timestamp(),\n        },\n        Sorcerer {\n            name: \"\u4f0f\u9ed2\u6075\".to_string(),\n            power: 1000,\n            grade: \"2\u7d1a\".to_string(),\n            techniques: vec![\"\u5341\u7a2e\u5f71\u6cd5\u8853\".to_string()],\n            experience: 2000,\n            active: true,\n            last_updated: current_timestamp(),\n        },\n    ];\n\n    // \u546a\u8853\u5e2b\u306e\u767b\u9332\n    println!(\"\\n\ud83d\udcdd \u546a\u8853\u5e2b\u767b\u9332\u4e2d...\");\n    for sorcerer in sorcerers {\n        service.register_sorcerer(sorcerer).await?;\n    }\n\n    // \u30b7\u30b9\u30c6\u30e0\u72b6\u614b\u306e\u78ba\u8a8d\n    println!(\"\\n\ud83d\udcca \u30b7\u30b9\u30c6\u30e0\u72b6\u614b\u78ba\u8a8d...\");\n    let status = service.get_system_status().await?;\n    println!(\"\u7dcf\u546a\u8853\u5e2b\u6570: {}\", status.total_sorcerers);\n    println!(\"\u30a2\u30af\u30c6\u30a3\u30d6\u546a\u8853\u5e2b\u6570: {}\", status.active_sorcerers);\n    println!(\"\u5e73\u5747\u546a\u529b: {:.1}\", status.average_power);\n    println!(\"\u30ad\u30e3\u30c3\u30b7\u30e5\u30d2\u30c3\u30c8\u7387: {:.2}%\", status.cache_hit_rate * 100.0);\n\n    // \u546a\u8853\u5e2b\u306e\u691c\u7d22\n    println!(\"\\n\ud83d\udd0d \u7279\u7d1a\u546a\u8853\u5e2b\u691c\u7d22...\");\n    let special_grade = service.find_sorcerers_by_grade(\"\u7279\u7d1a\").await?;\n    for sorcerer in special_grade {\n        println!(\"\u7279\u7d1a: {} (\u546a\u529b: {})\", sorcerer.name, sorcerer.power);\n    }\n\n    // \u6226\u95d8\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\n    println!(\"\\n\u2694\ufe0f  \u6226\u95d8\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u5b9f\u884c...\");\n    let battle_result = service.simulate_battle(\"\u4e94\u6761\u609f\", \"\u864e\u6756\u60a0\u4ec1\").await?;\n    println!(\"\u52dd\u8005: {} (\u546a\u529b: {})\", battle_result.winner_name, battle_result.winner_power);\n    println!(\"\u6557\u8005: {} (\u546a\u529b: {})\", battle_result.loser_name, battle_result.loser_power);\n    println!(\"\u6226\u95d8\u52b9\u679c\u5dee: {:.1}\", battle_result.effectiveness_margin);\n    println!(\"\u6226\u95d8\u6642\u9593: {:?}\", battle_result.duration);\n\n    // \u4e26\u884c\u51e6\u7406\u306b\u3088\u308b\u546a\u529b\u66f4\u65b0\n    println!(\"\\n\ud83d\udd04 \u4e26\u884c\u546a\u529b\u66f4\u65b0...\");\n    let updates = vec![\n        (\"\u864e\u6756\u60a0\u4ec1\".to_string(), 1500),\n        (\"\u4f0f\u9ed2\u6075\".to_string(), 1200),\n    ];\n\n    let update_results = service.batch_power_update(updates).await?;\n    for (i, result) in update_results.iter().enumerate() {\n        match result {\n            Ok(_) =&gt; println!(\"\u2705 \u66f4\u65b0 {} \u6210\u529f\", i + 1),\n            Err(e) =&gt; println!(\"\u274c \u66f4\u65b0 {} \u5931\u6557: {}\", i + 1, e),\n        }\n    }\n\n    // \u6700\u7d42\u72b6\u614b\u78ba\u8a8d\n    println!(\"\\n\ud83d\udcc8 \u6700\u7d42\u30b7\u30b9\u30c6\u30e0\u72b6\u614b...\");\n    let final_status = service.get_system_status().await?;\n    println!(\"\u5e73\u5747\u546a\u529b: {:.1}\", final_status.average_power);\n    println!(\"\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u6570: {}\", final_status.database_operations);\n\n    // \u5c11\u3057\u5f85\u3063\u3066\u304b\u3089\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\n    tokio::time::sleep(Duration::from_millis(100)).await;\n\n    println!(\"\\n\ud83c\udfaf \u30b7\u30b9\u30c6\u30e0\u6b63\u5e38\u7d42\u4e86\");\n\n    Ok(())\n}\n\n/*\n\u4f9d\u5b58\u95a2\u4fc2 (Cargo.toml):\n\n[dependencies]\ntokio = { version = \"1.0\", features = [\"full\"] }\nserde = { version = \"1.0\", features = [\"derive\"] }\nfutures = \"0.3\"\n*/\n</code></pre>"},{"location":"chapter05/mastery/#_2","title":"\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6700\u9069\u5316\u3068\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9","text":"<pre><code>// \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u8a08\u6e2c\u30de\u30af\u30ed\nmacro_rules! benchmark {\n    ($name:expr, $iterations:expr, $code:expr) =&gt; {\n        {\n            let start = std::time::Instant::now();\n            for _ in 0..$iterations {\n                $code;\n            }\n            let duration = start.elapsed();\n            let avg = duration.as_nanos() / $iterations;\n            println!(\"\u30d9\u30f3\u30c1\u30de\u30fc\u30af {}: {}\u56de\u5b9f\u884c, \u5e73\u5747{}ns\", $name, $iterations, avg);\n            duration\n        }\n    };\n}\n\n// \u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u6700\u9069\u5316\u306e\u4f8b\nuse std::rc::Rc;\nuse std::cell::RefCell;\n\n#[derive(Debug)]\nstruct OptimizedSorcererRegistry {\n    // \u6587\u5b57\u5217\u306e\u91cd\u8907\u3092\u907f\u3051\u308b\u305f\u3081\u3001\u30a4\u30f3\u30bf\u30fc\u30f3\u5316\n    name_pool: Vec&lt;String&gt;,\n    grade_pool: Vec&lt;String&gt;,\n\n    // \u5b9f\u969b\u306e\u30c7\u30fc\u30bf\u306f\u53c2\u7167\u306e\u307f\u4fdd\u6301\n    sorcerers: Vec&lt;OptimizedSorcerer&gt;,\n}\n\n#[derive(Debug)]\nstruct OptimizedSorcerer {\n    name_idx: usize,\n    grade_idx: usize,\n    power: i32,\n    active: bool,\n}\n\nimpl OptimizedSorcererRegistry {\n    fn new() -&gt; Self {\n        OptimizedSorcererRegistry {\n            name_pool: Vec::new(),\n            grade_pool: Vec::new(),\n            sorcerers: Vec::new(),\n        }\n    }\n\n    fn intern_string(pool: &amp;mut Vec&lt;String&gt;, s: &amp;str) -&gt; usize {\n        if let Some(pos) = pool.iter().position(|x| x == s) {\n            pos\n        } else {\n            pool.push(s.to_string());\n            pool.len() - 1\n        }\n    }\n\n    fn add_sorcerer(&amp;mut self, name: &amp;str, grade: &amp;str, power: i32) {\n        let name_idx = Self::intern_string(&amp;mut self.name_pool, name);\n        let grade_idx = Self::intern_string(&amp;mut self.grade_pool, grade);\n\n        self.sorcerers.push(OptimizedSorcerer {\n            name_idx,\n            grade_idx,\n            power,\n            active: true,\n        });\n    }\n\n    fn get_name(&amp;self, sorcerer: &amp;OptimizedSorcerer) -&gt; &amp;str {\n        &amp;self.name_pool[sorcerer.name_idx]\n    }\n\n    fn get_grade(&amp;self, sorcerer: &amp;OptimizedSorcerer) -&gt; &amp;str {\n        &amp;self.grade_pool[sorcerer.grade_idx]\n    }\n}\n\n// \u30bc\u30ed\u30b3\u30b9\u30c8\u62bd\u8c61\u5316\u306e\u4f8b\ntrait ZeroCostTechnique {\n    fn power(&amp;self) -&gt; i32;\n\n    #[inline(always)]\n    fn amplified_power(&amp;self) -&gt; i32 {\n        self.power() * 2  // \u30a4\u30f3\u30e9\u30a4\u30f3\u5c55\u958b\u3055\u308c\u308b\n    }\n}\n\nstruct SimpleTechnique {\n    base_power: i32,\n}\n\nimpl ZeroCostTechnique for SimpleTechnique {\n    #[inline(always)]\n    fn power(&amp;self) -&gt; i32 {\n        self.base_power\n    }\n}\n\nfn benchmark_example() {\n    println!(\"=== \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6700\u9069\u5316\u30c7\u30e2 ===\");\n\n    // \u30e1\u30e2\u30ea\u52b9\u7387\u306e\u6bd4\u8f03\n    let mut optimized_registry = OptimizedSorcererRegistry::new();\n\n    benchmark!(\"\u6700\u9069\u5316\u30ec\u30b8\u30b9\u30c8\u30ea\u8ffd\u52a0\", 10000, {\n        optimized_registry.add_sorcerer(\"\u30c6\u30b9\u30c8\u546a\u8853\u5e2b\", \"1\u7d1a\", 1000);\n    });\n\n    // \u30bc\u30ed\u30b3\u30b9\u30c8\u62bd\u8c61\u5316\u306e\u30d9\u30f3\u30c1\u30de\u30fc\u30af\n    let technique = SimpleTechnique { base_power: 1000 };\n\n    benchmark!(\"\u30bc\u30ed\u30b3\u30b9\u30c8\u62bd\u8c61\u5316\", 1000000, {\n        let _ = technique.amplified_power();\n    });\n\n    println!(\"\u6700\u9069\u5316\u30ec\u30b8\u30b9\u30c8\u30ea\u30b5\u30a4\u30ba: {}\u540d\", optimized_registry.sorcerers.len());\n    println!(\"\u540d\u524d\u30d7\u30fc\u30eb: {}\u500b\", optimized_registry.name_pool.len());\n    println!(\"\u7b49\u7d1a\u30d7\u30fc\u30eb: {}\u500b\", optimized_registry.grade_pool.len());\n}\n\nfn main() {\n    benchmark_example();\n}\n</code></pre>"},{"location":"chapter05/mastery/#_3","title":"\u30b3\u30fc\u30c9\u306e\u7d44\u7e54\u5316\u3068\u30e2\u30b8\u30e5\u30fc\u30eb\u8a2d\u8a08","text":"<pre><code>// \u30e2\u30b8\u30e5\u30fc\u30eb\u69cb\u9020\u306e\u4f8b\npub mod domain {\n    pub mod entities;\n    pub mod repositories;\n    pub mod services;\n    pub mod value_objects;\n}\n\npub mod infrastructure {\n    pub mod database;\n    pub mod network;\n    pub mod cache;\n}\n\npub mod application {\n    pub mod commands;\n    pub mod queries;\n    pub mod handlers;\n}\n\npub mod presentation {\n    pub mod controllers;\n    pub mod serializers;\n    pub mod validators;\n}\n\n// \u30af\u30ea\u30fc\u30f3\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u5b9f\u88c5\u4f8b\npub mod clean_architecture_example {\n    use std::collections::HashMap;\n    use async_trait::async_trait;\n\n    // \u30c9\u30e1\u30a4\u30f3\u5c64\n    pub mod domain {\n        use super::*;\n\n        #[derive(Debug, Clone)]\n        pub struct Sorcerer {\n            pub id: SorcererId,\n            pub name: String,\n            pub power: Power,\n        }\n\n        #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n        pub struct SorcererId(pub String);\n\n        #[derive(Debug, Clone)]\n        pub struct Power(pub i32);\n\n        impl Power {\n            pub fn new(value: i32) -&gt; Result&lt;Self, String&gt; {\n                if value &lt; 0 {\n                    Err(\"\u546a\u529b\u306f\u8ca0\u306e\u5024\u306b\u3067\u304d\u307e\u305b\u3093\".to_string())\n                } else if value &gt; 10000 {\n                    Err(\"\u546a\u529b\u306e\u4e0a\u9650\u306f10000\u3067\u3059\".to_string())\n                } else {\n                    Ok(Power(value))\n                }\n            }\n\n            pub fn value(&amp;self) -&gt; i32 {\n                self.0\n            }\n        }\n\n        #[async_trait]\n        pub trait SorcererRepository {\n            async fn save(&amp;self, sorcerer: Sorcerer) -&gt; Result&lt;(), String&gt;;\n            async fn find_by_id(&amp;self, id: &amp;SorcererId) -&gt; Result&lt;Option&lt;Sorcerer&gt;, String&gt;;\n            async fn find_all(&amp;self) -&gt; Result&lt;Vec&lt;Sorcerer&gt;, String&gt;;\n        }\n    }\n\n    // \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5c64\n    pub mod application {\n        use super::domain::*;\n        use async_trait::async_trait;\n\n        pub struct CreateSorcererCommand {\n            pub name: String,\n            pub power: i32,\n        }\n\n        pub struct SorcererService&lt;R: SorcererRepository&gt; {\n            repository: R,\n        }\n\n        impl&lt;R: SorcererRepository&gt; SorcererService&lt;R&gt; {\n            pub fn new(repository: R) -&gt; Self {\n                SorcererService { repository }\n            }\n\n            pub async fn create_sorcerer(&amp;self, command: CreateSorcererCommand) -&gt; Result&lt;(), String&gt; {\n                let power = Power::new(command.power)?;\n                let sorcerer = Sorcerer {\n                    id: SorcererId(command.name.clone()),\n                    name: command.name,\n                    power,\n                };\n\n                self.repository.save(sorcerer).await\n            }\n\n            pub async fn get_all_sorcerers(&amp;self) -&gt; Result&lt;Vec&lt;Sorcerer&gt;, String&gt; {\n                self.repository.find_all().await\n            }\n        }\n    }\n\n    // \u30a4\u30f3\u30d5\u30e9\u30b9\u30c8\u30e9\u30af\u30c1\u30e3\u5c64\n    pub mod infrastructure {\n        use super::domain::*;\n        use std::collections::HashMap;\n        use tokio::sync::RwLock;\n        use async_trait::async_trait;\n\n        pub struct InMemorySorcererRepository {\n            data: RwLock&lt;HashMap&lt;SorcererId, Sorcerer&gt;&gt;,\n        }\n\n        impl InMemorySorcererRepository {\n            pub fn new() -&gt; Self {\n                InMemorySorcererRepository {\n                    data: RwLock::new(HashMap::new()),\n                }\n            }\n        }\n\n        #[async_trait]\n        impl SorcererRepository for InMemorySorcererRepository {\n            async fn save(&amp;self, sorcerer: Sorcerer) -&gt; Result&lt;(), String&gt; {\n                let mut data = self.data.write().await;\n                data.insert(sorcerer.id.clone(), sorcerer);\n                Ok(())\n            }\n\n            async fn find_by_id(&amp;self, id: &amp;SorcererId) -&gt; Result&lt;Option&lt;Sorcerer&gt;, String&gt; {\n                let data = self.data.read().await;\n                Ok(data.get(id).cloned())\n            }\n\n            async fn find_all(&amp;self) -&gt; Result&lt;Vec&lt;Sorcerer&gt;, String&gt; {\n                let data = self.data.read().await;\n                Ok(data.values().cloned().collect())\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"chapter05/mastery/#quality-assurance","title":"\u30c6\u30b9\u30c8\u3068Quality Assurance","text":"<pre><code>#[cfg(test)]\nmod tests {\n    use super::*;\n\n    // \u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\n    #[test]\n    fn test_power_validation() {\n        use clean_architecture_example::domain::Power;\n\n        assert!(Power::new(1000).is_ok());\n        assert!(Power::new(-1).is_err());\n        assert!(Power::new(10001).is_err());\n    }\n\n    // \u7d71\u5408\u30c6\u30b9\u30c8\n    #[tokio::test]\n    async fn test_sorcerer_service() {\n        use clean_architecture_example::{\n            application::{SorcererService, CreateSorcererCommand},\n            infrastructure::InMemorySorcererRepository,\n        };\n\n        let repository = InMemorySorcererRepository::new();\n        let service = SorcererService::new(repository);\n\n        let command = CreateSorcererCommand {\n            name: \"\u30c6\u30b9\u30c8\u546a\u8853\u5e2b\".to_string(),\n            power: 1500,\n        };\n\n        assert!(service.create_sorcerer(command).await.is_ok());\n\n        let sorcerers = service.get_all_sorcerers().await.unwrap();\n        assert_eq!(sorcerers.len(), 1);\n        assert_eq!(sorcerers[0].name, \"\u30c6\u30b9\u30c8\u546a\u8853\u5e2b\");\n    }\n\n    // \u30d7\u30ed\u30d1\u30c6\u30a3\u30d9\u30fc\u30b9\u30c6\u30b9\u30c8\u98a8\u306e\u4f8b\n    #[test]\n    fn test_battle_effectiveness_properties() {\n        let sorcerer1 = Sorcerer {\n            name: \"\u5f37\u3044\u546a\u8853\u5e2b\".to_string(),\n            power: 2000,\n            grade: \"\u7279\u7d1a\".to_string(),\n            techniques: vec![],\n            experience: 0,\n            active: true,\n            last_updated: 0,\n        };\n\n        let sorcerer2 = Sorcerer {\n            name: \"\u5f31\u3044\u546a\u8853\u5e2b\".to_string(),\n            power: 1000,\n            grade: \"1\u7d1a\".to_string(),\n            techniques: vec![],\n            experience: 0,\n            active: true,\n            last_updated: 0,\n        };\n\n        // \u3088\u308a\u9ad8\u3044\u546a\u529b\u306e\u546a\u8853\u5e2b\u306f\u3001\u3088\u308a\u9ad8\u3044\u6226\u95d8\u52b9\u679c\u3092\u6301\u3064\u306f\u305a\n        assert!(sorcerer1.battle_effectiveness() &gt; sorcerer2.battle_effectiveness());\n\n        // \u7279\u7d1a\u306f1\u7d1a\u3088\u308a\u9ad8\u3044\u500d\u7387\u3092\u6301\u3064\u306f\u305a\n        let same_power_special = Sorcerer {\n            name: \"\u7279\u7d1a\".to_string(),\n            power: 1000,\n            grade: \"\u7279\u7d1a\".to_string(),\n            techniques: vec![],\n            experience: 0,\n            active: true,\n            last_updated: 0,\n        };\n\n        assert!(same_power_special.battle_effectiveness() &gt; sorcerer2.battle_effectiveness());\n    }\n}\n\n// \u30d9\u30f3\u30c1\u30de\u30fc\u30af\u30c6\u30b9\u30c8\n#[cfg(test)]\nmod benchmarks {\n    use super::*;\n    use std::time::Instant;\n\n    #[tokio::test]\n    async fn benchmark_repository_operations() {\n        let repo = Repository::&lt;Sorcerer&gt;::new();\n\n        // \u66f8\u304d\u8fbc\u307f\u30d9\u30f3\u30c1\u30de\u30fc\u30af\n        let start = Instant::now();\n        for i in 0..1000 {\n            let sorcerer = Sorcerer {\n                name: format!(\"\u546a\u8853\u5e2b{}\", i),\n                power: 1000 + i as i32,\n                grade: \"1\u7d1a\".to_string(),\n                techniques: vec![],\n                experience: 0,\n                active: true,\n                last_updated: 0,\n            };\n            repo.create(sorcerer).await.unwrap();\n        }\n        let write_duration = start.elapsed();\n\n        // \u8aad\u307f\u8fbc\u307f\u30d9\u30f3\u30c1\u30de\u30fc\u30af\n        let start = Instant::now();\n        for i in 0..1000 {\n            let _ = repo.read(&amp;format!(\"\u546a\u8853\u5e2b{}\", i)).await.unwrap();\n        }\n        let read_duration = start.elapsed();\n\n        println!(\"\u66f8\u304d\u8fbc\u307f\u6642\u9593: {:?}\", write_duration);\n        println!(\"\u8aad\u307f\u8fbc\u307f\u6642\u9593: {:?}\", read_duration);\n\n        // \u6027\u80fd\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\n        assert!(write_duration.as_millis() &lt; 1000, \"\u66f8\u304d\u8fbc\u307f\u304c\u9045\u3059\u304e\u307e\u3059\");\n        assert!(read_duration.as_millis() &lt; 500, \"\u8aad\u307f\u8fbc\u307f\u304c\u9045\u3059\u304e\u307e\u3059\");\n    }\n}\n</code></pre>"},{"location":"chapter05/mastery/#-_3","title":"\u307e\u3068\u3081 - \u6700\u5f37\u3078\u306e\u5230\u9054","text":"<p>\u541b\u306f\u4eca\u3001\u771f\u306e\u6700\u5f37\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u3068\u3057\u3066\u7acb\u3063\u3066\u3044\u308b\u3002\u91cd\u8981\u306a\u30dd\u30a4\u30f3\u30c8\uff1a</p> <ol> <li>\u6280\u8853\u306e\u7d71\u5408 - \u5168\u3066\u306e\u6982\u5ff5\u3092\u4e00\u3064\u306e\u30b7\u30b9\u30c6\u30e0\u3067\u8abf\u548c\u3055\u305b\u308b</li> <li>\u5b9f\u8df5\u7684\u306a\u8a2d\u8a08 - \u73fe\u5b9f\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3067\u304d\u308b\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3</li> <li>\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u610f\u8b58 - \u52b9\u7387\u7684\u3067\u6700\u9069\u5316\u3055\u308c\u305f\u30b3\u30fc\u30c9</li> <li>\u4fdd\u5b88\u6027 - \u9577\u671f\u9593\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u3067\u304d\u308b\u69cb\u9020</li> <li>\u30c6\u30b9\u30c8\u53ef\u80fd\u6027 - \u54c1\u8cea\u3092\u4fdd\u8a3c\u3067\u304d\u308b\u8a2d\u8a08</li> </ol> <p>\u3053\u308c\u3067\u541b\u306f\u4ffa\u3068\u540c\u3058\u5883\u5730\u306b\u7acb\u3063\u305f\u3002\u5168\u3066\u306e\u6280\u8853\u3092\u7406\u89e3\u3057\u3001\u9069\u6750\u9069\u6240\u3067\u4f7f\u3044\u5206\u3051\u3001\u5b8c\u74a7\u306b\u7d71\u5408\u3067\u304d\u308b\u6700\u5f37\u306e\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u3060\u3002</p> <p>\u3057\u304b\u3057\u3001\u6700\u5f37\u3068\u306f\u7d42\u7740\u70b9\u3067\u306f\u306a\u3044\u3002\u6280\u8853\u306f\u5e38\u306b\u9032\u6b69\u3057\u3001\u65b0\u3057\u3044\u6311\u6226\u304c\u73fe\u308c\u308b\u3002\u541b\u3082\u305d\u306e\u9032\u6b69\u306b\u5408\u308f\u305b\u3066\u6210\u9577\u3057\u7d9a\u3051\u308d\u3002</p> <p>\u6700\u5f37\u306e\u8a3c\u660e\u306f\u3001\u541b\u304c\u66f8\u304f\u30b3\u30fc\u30c9\u305d\u306e\u3082\u306e\u3060\u3002\u7f8e\u3057\u304f\u3001\u52b9\u7387\u7684\u3067\u3001\u4fdd\u5b88\u3057\u3084\u3059\u304f\u3001\u305d\u3057\u3066\u554f\u984c\u3092\u78ba\u5b9f\u306b\u89e3\u6c7a\u3059\u308b\u30b3\u30fc\u30c9\u3002\u305d\u308c\u304c\u541b\u306e\u529b\u306e\u8a3c\u660e\u3068\u306a\u308b\u3002</p> <p>\u4ffa\u306e\u6559\u3048\u306f\u3053\u3053\u307e\u3067\u3060\u3002\u3042\u3068\u306f\u541b\u81ea\u8eab\u306e\u9053\u3092\u6b69\u3081\u3002\u6700\u5f37\u306e\u540d\u306b\u6065\u3058\u306a\u3044\u3001\u7d20\u6674\u3089\u3057\u3044\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u306b\u306a\u308b\u3053\u3068\u3092\u671f\u5f85\u3057\u3066\u3044\u308b\u3002</p> <p>\u300c\u6700\u5f37\u3068\u306f\u3001\u5168\u3066\u3092\u7406\u89e3\u3057\u3001\u5168\u3066\u3092\u7d71\u5408\u3057\u3001\u5168\u3066\u3092\u8d85\u8d8a\u3059\u308b\u3053\u3068\u300d</p> <p>- \u4e94\u6761\u609f\u3001\u6700\u5f37\u306e\u546a\u8853\u5e2b\u3088\u308a -</p>"}]}